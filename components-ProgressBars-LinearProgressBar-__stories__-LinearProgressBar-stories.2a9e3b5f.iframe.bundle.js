"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[4628],{"./src/components/ProgressBars/LinearProgressBar/__stories__/LinearProgressBar.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MultiProgressBar:()=>MultiProgressBar,Overview:()=>Overview,ProgressBarAsACounter:()=>ProgressBarAsACounter,ProgressBarAsLoadingIndicator:()=>ProgressBarAsLoadingIndicator,Regular:()=>Regular,WithSecondaryValue:()=>WithSecondaryValue,__namedExportsOrder:()=>__namedExportsOrder,default:()=>LinearProgressBar_stories});var react=__webpack_require__("../../node_modules/react/index.js"),LinearProgressBar=__webpack_require__("./src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),Info=__webpack_require__("../icons/dist/react/Info.js"),Icon=__webpack_require__("./src/components/Icon/Icon.tsx");const Logo_namespaceObject=__webpack_require__.p+"static/media/Logo.e6823aa8.png";var Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),Box=__webpack_require__("./src/components/Box/Box.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:LinearProgressBar.A});const LinearProgressBar_stories={title:"Components/LinearProgressBar",component:LinearProgressBar.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators};var Overview={render:function render(args){return(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(LinearProgressBar.A,_objectSpread({value:20,size:"large"},args))})},parameters:{docs:{liveEdit:{isEnabled:!1}}}},Regular={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"large",children:[(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"small",align:"start",style:{width:"400px"},children:[(0,jsx_runtime.jsx)(LinearProgressBar.A,{indicateProgress:!0,value:30,size:"large"}),"With label"]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"small",align:"start",style:{width:"400px"},children:[(0,jsx_runtime.jsx)(LinearProgressBar.A,{value:30,size:"large"}),"Without label"]})]})}},WithSecondaryValue={render:function render(){return(0,jsx_runtime.jsx)("div",{style:{width:"400px"},children:(0,jsx_runtime.jsx)(LinearProgressBar.A,{value:50,indicateProgress:!0,valueSecondary:65,size:"large"})})}},MultiProgressBar={render:function render(){var multiValues=(0,react.useMemo)((function(){return[{value:25,color:"var(--primary-color)"},{value:75,color:"var(--warning-color)"},{value:100,color:"var(--positive-color)"}]}),[]);return(0,jsx_runtime.jsx)("div",{style:{width:"600px"},children:(0,jsx_runtime.jsx)(LinearProgressBar.A,{value:25,size:"large",indicateProgress:!0,multi:!0,multiValues})})},name:"Multi progress bar"},ProgressBarAsACounter={render:function render(){return(0,jsx_runtime.jsxs)("div",{style:{width:200},children:[(0,jsx_runtime.jsx)(Text.A,{type:"text1",weight:"bold",style:{marginBottom:"var(--space-48)"},children:"Loading files"}),(0,jsx_runtime.jsxs)(Flex.A,{justify:"space-between",style:{marginBottom:"var(--space-4)"},children:[(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Items"}),(0,jsx_runtime.jsx)(Icon.A,{icon:Info.A,style:{color:"var(--icon-color)"}})]}),(0,jsx_runtime.jsx)(Text.A,{children:"142/200"})]}),(0,jsx_runtime.jsx)(LinearProgressBar.A,{value:71,size:"large",barStyle:"positive"})]})},name:"Progress bar as a counter"},ProgressBarAsLoadingIndicator={render:function render(){return(0,jsx_runtime.jsxs)(Box.A,{border:!0,padding:"medium",style:{width:400},children:[(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{marginBottom:"var(--space-8)",height:80},children:[(0,jsx_runtime.jsx)(Box.A,{style:{flexShrink:0,height:"100%"},children:(0,jsx_runtime.jsx)("img",{src:Logo_namespaceObject,alt:"Frame 697.jpg",style:{height:"100%"}})}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"stretch",justify:"space-between",style:{flex:1,height:"100%"},children:[(0,jsx_runtime.jsx)(Text.A,{type:"text1",weight:"bold",children:"Frame 697.jpg"}),(0,jsx_runtime.jsxs)(Flex.A,{justify:"space-between",children:[(0,jsx_runtime.jsx)(Text.A,{children:"2KB"}),(0,jsx_runtime.jsx)(Text.A,{children:"Saving..."})]})]})]}),(0,jsx_runtime.jsx)(LinearProgressBar.A,{value:71})]})},name:"Progress bar as loading indicator"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: (args: LinearProgressBarProps) => <div style={{\n    width: "400px"\n  }}>\n      <LinearProgressBar value={20} size="large" {...args} />\n    </div>,\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Regular.parameters={...Regular.parameters,docs:{...Regular.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex direction="column" gap="large">\n      <Flex direction="column" gap="small" align="start" style={{\n      width: "400px"\n    }}>\n        <LinearProgressBar indicateProgress value={30} size="large" />\n        With label\n      </Flex>\n      <Flex direction="column" gap="small" align="start" style={{\n      width: "400px"\n    }}>\n        <LinearProgressBar value={30} size="large" />\n        Without label\n      </Flex>\n    </Flex>\n}',...Regular.parameters?.docs?.source}}},WithSecondaryValue.parameters={...WithSecondaryValue.parameters,docs:{...WithSecondaryValue.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    width: "400px"\n  }}>\n      <LinearProgressBar value={50} indicateProgress valueSecondary={65} size="large" />\n    </div>\n}',...WithSecondaryValue.parameters?.docs?.source}}},MultiProgressBar.parameters={...MultiProgressBar.parameters,docs:{...MultiProgressBar.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const multiValues = useMemo(() => [{\n      value: 25,\n      color: "var(--primary-color)"\n    }, {\n      value: 75,\n      color: "var(--warning-color)"\n    }, {\n      value: 100,\n      color: "var(--positive-color)"\n    }], []);\n    return <div style={{\n      width: "600px"\n    }}>\n        <LinearProgressBar value={25} size="large" indicateProgress multi multiValues={multiValues} />\n      </div>;\n  },\n  name: "Multi progress bar"\n}',...MultiProgressBar.parameters?.docs?.source}}},ProgressBarAsACounter.parameters={...ProgressBarAsACounter.parameters,docs:{...ProgressBarAsACounter.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    width: 200\n  }}>\n      <Text type="text1" weight="bold" style={{\n      marginBottom: "var(--space-48)"\n    }}>\n        Loading files\n      </Text>\n      <Flex justify="space-between" style={{\n      marginBottom: "var(--space-4)"\n    }}>\n        <Flex gap="xs">\n          <Text>Items</Text>\n          <Icon icon={Info} style={{\n          color: "var(--icon-color)"\n        }} />\n        </Flex>\n        <Text>142/200</Text>\n      </Flex>\n      <LinearProgressBar value={71} size="large" barStyle="positive" />\n    </div>,\n  name: "Progress bar as a counter"\n}',...ProgressBarAsACounter.parameters?.docs?.source}}},ProgressBarAsLoadingIndicator.parameters={...ProgressBarAsLoadingIndicator.parameters,docs:{...ProgressBarAsLoadingIndicator.parameters?.docs,source:{originalSource:'{\n  render: () => <Box border padding="medium" style={{\n    width: 400\n  }}>\n      <Flex gap="small" style={{\n      marginBottom: "var(--space-8)",\n      height: 80\n    }}>\n        <Box style={{\n        flexShrink: 0,\n        height: "100%"\n      }}>\n          <img src={Logo} alt="Frame 697.jpg" style={{\n          height: "100%"\n        }} />\n        </Box>\n        <Flex direction="column" align="stretch" justify="space-between" style={{\n        flex: 1,\n        height: "100%"\n      }}>\n          <Text type="text1" weight="bold">\n            Frame 697.jpg\n          </Text>\n          <Flex justify="space-between">\n            <Text>2KB</Text>\n            <Text>Saving...</Text>\n          </Flex>\n        </Flex>\n      </Flex>\n      <LinearProgressBar value={71} />\n    </Box>,\n  name: "Progress bar as loading indicator"\n}',...ProgressBarAsLoadingIndicator.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Regular","WithSecondaryValue","MultiProgressBar","ProgressBarAsACounter","ProgressBarAsLoadingIndicator"]}}]);