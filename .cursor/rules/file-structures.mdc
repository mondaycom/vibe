---
description: "Outlines file and directory structure conventions within the `@vibe/core` package (located in `packages/core/`), including top-level "src/" and component-specific organization (tests, stories, sub-components, hooks)."
globs: 
alwaysApply: false
---

# File Structure Conventions for @vibe/core

This document outlines the typical file and directory structure within the `packages/core` library. Adhering to these conventions helps maintain consistency and predictability across the codebase.

## Top-Level Structure within `packages/core/src`

The `packages/core/src` directory generally contains the following:

- **`components/`**: Houses all UI components. Each component resides in its own subdirectory.
- **`hooks/`**: Contains custom React hooks that are reusable across multiple components.
- **`utils/`**: Includes utility functions that are not specific to any single component or hook.
- **`types/`**: Defines shared TypeScript types and interfaces used throughout the `@vibe/core` library.
- **`constants/`**: Stores constant values used across the library.
- **`storybook/`**: Contains global Storybook configurations, decorators, or providers.
- **`styles/`**: Can include global styles or theme-related style files, although most component-specific styling is co-located with the component. It is preferred to not add new code to this directory.
- **`index.ts`**: The main export file for the `@vibe/core` library, re-exporting key modules and components.

## Component-Specific Structure (`packages/core/src/components/ComponentName/`)

Each component within `packages/core/src/components/` should follow a consistent structure:

### Core Files

- **`ComponentName.tsx`**: The main React component file.
- **`ComponentName.types.ts`**: TypeScript type definitions and interfaces specific to the component.
- **`ComponentName.module.scss`**: SCSS module for styling the component.
- **`index.ts`**: Exports the component and related types/interfaces.

### Subdirectories

- **`__tests__/`**: Contains unit and integration tests for the component.
  - Files within this directory follow the pattern `ComponentName.test.ts`.
- **`__stories__/`**: Holds Storybook stories for the component.
  - Files are typically named `ComponentName.stories.tsx`.
- **`components/`**: For more complex components, this directory can house sub-components that are only used by `ComponentName`.
- **`hooks/`**: Custom React hooks that are specific to `ComponentName` and not intended for reuse elsewhere.
- **`context/`**: If a component uses React Context, the context definition, provider, and consumer hook should be placed in this subdirectory (e.g., `ComponentName/context/ComponentNameContext.ts`).

### General Guidelines

- **Simpler Components**: For simpler components, not all subdirectories (`hooks/`, `utils/`, `components/`, `context/`) are necessary. Files like `ComponentName.tsx`, `ComponentName.types.ts`, `ComponentName.module.scss`, `index.ts`, and directories for tests (`__tests__/`) and stories (`__stories__/`) are sufficient in most of the cases.
- **Reusability**: If a hook or utility is reusable across multiple components (not potentially reusable, but actually reused in more than one component), it should be placed in the top-level `packages/core/src/hooks/` or `packages/core/src/utils/` directories, respectively.
- **Exports**: The `index.ts` file in each component directory should be the primary point of export for that component and its related parts. The main `packages/core/src/index.ts` should then re-export these components.
