---
description: This rule explains the monorepo's structure, including package locations, file organization conventions, creating new packages, details on scripts (both global and package-specific), shared configurations, and the use of tools like Lerna and Yarn Workspaces. Activate this rule when your query involves creating new packages, understanding where packages are located, navigating the file structure, or inquiring about monorepo-level configurations and tooling.
globs:
  - "lerna.json"
  - "package.json"
alwaysApply: false
---

# Monorepo Navigation & Structure

This project is a Lerna monorepo that utilizes Yarn Workspaces for managing packages.

- **Package Location**: All individual packages are located within the `packages/` directory. When looking for specific package code, navigate to `packages/` and find the relevant sub-directory for that package.
- **Yarn Workspaces**:
  - Dependencies between packages in this monorepo are managed by Yarn Workspaces. Running `yarn install` at the root of the project will install all dependencies for all packages and link them together.
  - To add a dependency to a specific package: `yarn workspace <package-name> add <dependency-name>`
  - To add a dev dependency to a specific package: `yarn workspace <package-name> add -D <dependency-name>`
  - To add a dependency to the root (for global tools like Lerna): `yarn add -W <dependency-name>`
- **Running Scripts**:
  - Scripts defined in the root `package.json` (like `build`, `lint`, `test`) often use Lerna to run corresponding scripts in each package (e.g., `lerna run build`).
  - You can run a script for all packages using: `yarn workspaces run <script-name>` or `lerna run <script-name>`.
  - To run a script in a specific package: `yarn workspace <package-name> run <script-name>`.
- **Lerna**: Lerna is used for tasks like versioning, publishing, and running commands across multiple packages. Key commands you might encounter:
  - `lerna run <script>`: Runs an npm script in each package that contains that script.
  - `lerna exec -- <command>`: Executes an arbitrary command in each package.
- **Shared Configuration**: Look for shared development configurations (e.g., ESLint, Prettier, Stylelint, TypeScript `tsconfig.json`) in the root directory. These often provide a base configuration for all packages, though individual packages might extend or override them.
