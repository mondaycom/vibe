"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[3943],{"./src/components/AttentionBox/__stories__/AttentionBox.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AttentionBoxAnimation:()=>AttentionBoxAnimation,AttentionBoxInsideADialogCombobox:()=>AttentionBoxInsideADialogCombobox,AttentionBoxWithLink:()=>AttentionBoxWithLink,Dismissable:()=>Dismissable,NaturalAttentionBox:()=>NaturalAttentionBox,Overview:()=>Overview,States:()=>States,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AttentionBox_stories});var react=__webpack_require__("../../node_modules/react/index.js"),AttentionBox=__webpack_require__("./src/components/AttentionBox/AttentionBox.tsx"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),createComponentTemplate=__webpack_require__("../storybook-blocks/dist/src/functions/createComponentTemplate.js"),story_description=__webpack_require__("../storybook-blocks/dist/src/components/story-description/story-description.js"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Info=__webpack_require__("../icons/dist/react/Info.js"),ThumbsUp=__webpack_require__("../icons/dist/react/ThumbsUp.js"),Favorite=__webpack_require__("../icons/dist/react/Favorite.js"),Invite=__webpack_require__("../icons/dist/react/Invite.js"),Icon=__webpack_require__("./src/components/Icon/Icon.tsx"),Search=__webpack_require__("./src/components/Search/Search.tsx"),Avatar=__webpack_require__("./src/components/Avatar/Avatar.tsx");const person_namespaceObject=__webpack_require__.p+"static/media/person.de30c8ee.png";var Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),AttentionBoxLink=__webpack_require__("./src/components/AttentionBox/AttentionBoxLink/AttentionBoxLink.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),Heading=__webpack_require__("./src/components/Heading/Heading.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:AttentionBox.A,iconPropNamesArray:["icon"],actionPropsArray:["onClose"]}),attentionBoxTemplate=(0,createComponentTemplate.M)(AttentionBox.A);const AttentionBox_stories={title:"Components/AttentionBox",component:AttentionBox.A,subcomponents:{AttentionBoxLink:AttentionBoxLink.A},argTypes:metaSettings.argTypes,decorators:metaSettings.decorators,parameters:{storySource:{source:'import React, { useState } from "react";\nimport { useCallback } from "react";\nimport AttentionBox from "../AttentionBox";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { createComponentTemplate, StoryDescription } from "vibe-storybook-components";\nimport DialogContentContainer from "../../DialogContentContainer/DialogContentContainer";\nimport { Info, Invite, ThumbsUp, Favorite } from "@vibe/icons";\nimport Icon from "../../Icon/Icon";\nimport Search from "../../Search/Search";\nimport Avatar from "../../Avatar/Avatar";\nimport person from "./assets/person.png";\nimport Flex from "../../Flex/Flex";\nimport AttentionBoxLink from "../AttentionBoxLink/AttentionBoxLink";\nimport Button from "../../Button/Button";\nimport Text from "../../Text/Text";\nimport { Heading } from "../../Heading";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: AttentionBox,\n  iconPropNamesArray: ["icon"],\n  actionPropsArray: ["onClose"]\n});\n\nconst attentionBoxTemplate = createComponentTemplate(AttentionBox);\n\nexport default {\n  title: "Components/AttentionBox",\n  component: AttentionBox,\n  subcomponents: {\n    AttentionBoxLink\n  },\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Info }\n      }\n    }\n  }\n};\n\nexport const Overview = {\n  render: () => (\n    <div style={{ width: "340px" }}>\n      {attentionBoxTemplate({\n        onClose: () => {},\n        title: "Attention box title",\n        text: "Studies show that 100% of people who celebrate birthdays, will eventually die."\n      })}\n    </div>\n  ),\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const States = {\n  render: () => (\n    <Flex direction="column" gap="small" align="start">\n      <StoryDescription description="Primary">\n        <div style={{ width: "340px" }}>\n          <AttentionBox\n            title="Enabling SSO Login"\n            text="Will cause all your team lose access to the account until using the correct SSO source."\n            icon={Info}\n          />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Success">\n        <div style={{ width: "340px" }}>\n          <AttentionBox\n            title="You\'re doing great"\n            text="Lorem Ipsum is simply dummy text of the printing and typesetting industry."\n            type="success"\n            icon={ThumbsUp}\n          />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Danger">\n        <div style={{ width: "340px" }}>\n          <AttentionBox\n            title="Account low on free space"\n            text="Your account is out of free space, free some space to prevent data loss."\n            type="danger"\n          />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Warning">\n        <div style={{ width: "340px" }}>\n          <AttentionBox\n            title="Account low on free space"\n            text="Your account is out of free space, free some space to prevent data loss."\n            type="warning"\n            icon={Info}\n          />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Dark">\n        <div style={{ width: "340px" }}>\n          <AttentionBox\n            title="What a great idea!"\n            text="You can also make this list sortable by tagging the items with tags column"\n            type="dark"\n            icon={Favorite}\n          />\n        </div>\n      </StoryDescription>\n    </Flex>\n  ),\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { StoryDescription, ThumbsUp, Favorite }\n      }\n    }\n  }\n};\n\nexport const AttentionBoxWithLink = {\n  render: () => (\n    <AttentionBox compact>\n      <Flex justify="space-between" gap="xs" style={{ minWidth: "320px" }}>\n        Get your monday.com notifications\n        <AttentionBoxLink href="" text="Learn more" />\n      </Flex>\n    </AttentionBox>\n  )\n};\n\nexport const Dismissable = {\n  render: () => {\n    const mockOnClose = useCallback(() => null, []);\n\n    return (\n      <Flex gap="large" align="start">\n        <div style={{ width: "274px" }}>\n          <AttentionBox\n            title="Regular attention box"\n            text="Dismissable attention box with two lines of content."\n            onClose={mockOnClose}\n            icon={Info}\n          />\n        </div>\n        <div style={{ width: "274px" }}>\n          <AttentionBox text="Attention box in compact mode" onClose={mockOnClose} compact />\n        </div>\n      </Flex>\n    );\n  }\n};\n\nexport const NaturalAttentionBox = {\n  render: () => (\n    <Flex direction="column" align="start">\n      <Heading type="h3" weight="bold">\n        Cross-Account Copier\n      </Heading>\n      <Text style={{ margin: "4px 0 10px" }}>Copy boards and dashboards to another account</Text>\n      <AttentionBox\n        compact\n        withIconWithoutHeader\n        icon={Info}\n        text="First, move the content you want to copy into folder. Only main boards and dashboards can be copied."\n        type="dark"\n      />\n    </Flex>\n  )\n};\n\nexport const AttentionBoxInsideADialogCombobox = {\n  render: () => {\n    const mockOnClose = useCallback(() => null, []);\n\n    return (\n      <DialogContentContainer style={{ width: "380px", padding: "var(--spacing-medium)" }}>\n        <Flex direction="column" gap="medium" align="initial">\n          <Search placeholder="Search by name, role, team, or email" />\n          <Text style={{ paddingInlineStart: "5px", marginTop: "4px" }}>Suggested people</Text>\n          <Flex direction="column" gap="medium" align="start">\n            <Flex gap="small">\n              <Avatar size="medium" src={person} type="img" />\n              <Flex gap="xs">\n                <Text>May Kishon </Text>\n                <Text color="secondary">(UX/UI Product Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex gap="small">\n              <Icon iconSize="32" icon={Invite} style={{ padding: "0 6px" }} />\n              <Text>Invite new board member by email</Text>\n            </Flex>\n            <AttentionBox text="Hold ⌘ to select more than one person or team" compact onClose={mockOnClose} />\n          </Flex>\n        </Flex>\n      </DialogContentContainer>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person, Invite }\n      }\n    }\n  },\n\n  name: "Attention box inside a dialog/combobox"\n};\n\nexport const AttentionBoxAnimation = {\n  render: () => {\n    const [isOpen, setOpen] = useState(false);\n    const onClick = useCallback(() => {\n      setOpen(true);\n    }, []);\n    return (\n      <>\n        <Flex\n          gap={Flex.gaps.MEDIUM}\n          style={{\n            height: "44px"\n          }}\n        >\n          <Button onClick={onClick} kind={Button.kinds.SECONDARY}>\n            Entry animation\n          </Button>\n          {isOpen && (\n            <AttentionBox\n              compact\n              withIconWithoutHeader\n              entryAnimation\n              icon={Info}\n              text="First, move the content you want to copy into folder. Only main boards and dashboards can be copied."\n              onClose={() => setOpen(false)}\n            />\n          )}\n        </Flex>\n      </>\n    );\n  },\n\n  name: "Attention box inside a dialog/combobox"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:43},endLoc:{col:1,line:61},startBody:{col:24,line:43},endBody:{col:1,line:61}},states:{startLoc:{col:22,line:63},endLoc:{col:1,line:123},startBody:{col:22,line:63},endBody:{col:1,line:123}},"attention-box-with-link":{startLoc:{col:36,line:125},endLoc:{col:1,line:134},startBody:{col:36,line:125},endBody:{col:1,line:134}},dismissable:{startLoc:{col:27,line:136},endLoc:{col:1,line:156},startBody:{col:27,line:136},endBody:{col:1,line:156}},"natural-attention-box":{startLoc:{col:35,line:158},endLoc:{col:1,line:174},startBody:{col:35,line:158},endBody:{col:1,line:174}},"attention-box-inside-a-dialog-combobox":{startLoc:{col:49,line:176},endLoc:{col:1,line:212},startBody:{col:49,line:176},endBody:{col:1,line:212}},"attention-box-animation":{startLoc:{col:37,line:214},endLoc:{col:1,line:247},startBody:{col:37,line:214},endBody:{col:1,line:247}}}},docs:{liveEdit:{scope:{Info:Info.A}}}}};var Overview={render:function render(){return(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:attentionBoxTemplate({onClose:function onClose(){},title:"Attention box title",text:"Studies show that 100% of people who celebrate birthdays, will eventually die."})})},name:"Overview",parameters:{docs:{liveEdit:{isEnabled:!1}}}},States={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"small",align:"start",children:[(0,jsx_runtime.jsx)(story_description.A,{description:"Primary",children:(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"Enabling SSO Login",text:"Will cause all your team lose access to the account until using the correct SSO source.",icon:Info.A})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Success",children:(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"You're doing great",text:"Lorem Ipsum is simply dummy text of the printing and typesetting industry.",type:"success",icon:ThumbsUp.A})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Danger",children:(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"Account low on free space",text:"Your account is out of free space, free some space to prevent data loss.",type:"danger"})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Warning",children:(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"Account low on free space",text:"Your account is out of free space, free some space to prevent data loss.",type:"warning",icon:Info.A})})}),(0,jsx_runtime.jsx)(story_description.A,{description:"Dark",children:(0,jsx_runtime.jsx)("div",{style:{width:"340px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"What a great idea!",text:"You can also make this list sortable by tagging the items with tags column",type:"dark",icon:Favorite.A})})})]})},parameters:{docs:{liveEdit:{scope:{StoryDescription:story_description.A,ThumbsUp:ThumbsUp.A,Favorite:Favorite.A}}}}},AttentionBoxWithLink={render:function render(){return(0,jsx_runtime.jsx)(AttentionBox.A,{compact:!0,children:(0,jsx_runtime.jsxs)(Flex.A,{justify:"space-between",gap:"xs",style:{minWidth:"320px"},children:["Get your monday.com notifications",(0,jsx_runtime.jsx)(AttentionBoxLink.A,{href:"",text:"Learn more"})]})})}},Dismissable={render:function render(){var mockOnClose=(0,react.useCallback)((function(){return null}),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:"large",align:"start",children:[(0,jsx_runtime.jsx)("div",{style:{width:"274px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{title:"Regular attention box",text:"Dismissable attention box with two lines of content.",onClose:mockOnClose,icon:Info.A})}),(0,jsx_runtime.jsx)("div",{style:{width:"274px"},children:(0,jsx_runtime.jsx)(AttentionBox.A,{text:"Attention box in compact mode",onClose:mockOnClose,compact:!0})})]})}},NaturalAttentionBox={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",children:[(0,jsx_runtime.jsx)(Heading.A,{type:"h3",weight:"bold",children:"Cross-Account Copier"}),(0,jsx_runtime.jsx)(Text.A,{style:{margin:"4px 0 10px"},children:"Copy boards and dashboards to another account"}),(0,jsx_runtime.jsx)(AttentionBox.A,{compact:!0,withIconWithoutHeader:!0,icon:Info.A,text:"First, move the content you want to copy into folder. Only main boards and dashboards can be copied.",type:"dark"})]})}},AttentionBoxInsideADialogCombobox={render:function render(){var mockOnClose=(0,react.useCallback)((function(){return null}),[]);return(0,jsx_runtime.jsx)(DialogContentContainer.A,{style:{width:"380px",padding:"var(--spacing-medium)"},children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",align:"initial",children:[(0,jsx_runtime.jsx)(Search.A,{placeholder:"Search by name, role, team, or email"}),(0,jsx_runtime.jsx)(Text.A,{style:{paddingInlineStart:"5px",marginTop:"4px"},children:"Suggested people"}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",align:"start",children:[(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",children:[(0,jsx_runtime.jsx)(Avatar.A,{size:"medium",src:person_namespaceObject,type:"img"}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"May Kishon "}),(0,jsx_runtime.jsx)(Text.A,{color:"secondary",children:"(UX/UI Product Designer)"})]})]}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",children:[(0,jsx_runtime.jsx)(Icon.A,{iconSize:"32",icon:Invite.A,style:{padding:"0 6px"}}),(0,jsx_runtime.jsx)(Text.A,{children:"Invite new board member by email"})]}),(0,jsx_runtime.jsx)(AttentionBox.A,{text:"Hold ⌘ to select more than one person or team",compact:!0,onClose:mockOnClose})]})]})})},parameters:{docs:{liveEdit:{scope:{person:person_namespaceObject,Invite:Invite.A}}}},name:"Attention box inside a dialog/combobox"},AttentionBoxAnimation={render:function render(){var _useState2=_slicedToArray((0,react.useState)(!1),2),isOpen=_useState2[0],setOpen=_useState2[1],onClick=(0,react.useCallback)((function(){setOpen(!0)}),[]);return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsxs)(Flex.A,{gap:Flex.A.gaps.MEDIUM,style:{height:"44px"},children:[(0,jsx_runtime.jsx)(Button.A,{onClick,kind:Button.A.kinds.SECONDARY,children:"Entry animation"}),isOpen&&(0,jsx_runtime.jsx)(AttentionBox.A,{compact:!0,withIconWithoutHeader:!0,entryAnimation:!0,icon:Info.A,text:"First, move the content you want to copy into folder. Only main boards and dashboards can be copied.",onClose:function onClose(){return setOpen(!1)}})]})})},name:"Attention box inside a dialog/combobox"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: () => <div style={{\n    width: "340px"\n  }}>\n      {attentionBoxTemplate({\n      onClose: () => {},\n      title: "Attention box title",\n      text: "Studies show that 100% of people who celebrate birthdays, will eventually die."\n    })}\n    </div>,\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},States.parameters={...States.parameters,docs:{...States.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex direction="column" gap="small" align="start">\n      <StoryDescription description="Primary">\n        <div style={{\n        width: "340px"\n      }}>\n          <AttentionBox title="Enabling SSO Login" text="Will cause all your team lose access to the account until using the correct SSO source." icon={Info} />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Success">\n        <div style={{\n        width: "340px"\n      }}>\n          <AttentionBox title="You\'re doing great" text="Lorem Ipsum is simply dummy text of the printing and typesetting industry." type="success" icon={ThumbsUp} />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Danger">\n        <div style={{\n        width: "340px"\n      }}>\n          <AttentionBox title="Account low on free space" text="Your account is out of free space, free some space to prevent data loss." type="danger" />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Warning">\n        <div style={{\n        width: "340px"\n      }}>\n          <AttentionBox title="Account low on free space" text="Your account is out of free space, free some space to prevent data loss." type="warning" icon={Info} />\n        </div>\n      </StoryDescription>\n      <StoryDescription description="Dark">\n        <div style={{\n        width: "340px"\n      }}>\n          <AttentionBox title="What a great idea!" text="You can also make this list sortable by tagging the items with tags column" type="dark" icon={Favorite} />\n        </div>\n      </StoryDescription>\n    </Flex>,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          StoryDescription,\n          ThumbsUp,\n          Favorite\n        }\n      }\n    }\n  }\n}',...States.parameters?.docs?.source}}},AttentionBoxWithLink.parameters={...AttentionBoxWithLink.parameters,docs:{...AttentionBoxWithLink.parameters?.docs,source:{originalSource:'{\n  render: () => <AttentionBox compact>\n      <Flex justify="space-between" gap="xs" style={{\n      minWidth: "320px"\n    }}>\n        Get your monday.com notifications\n        <AttentionBoxLink href="" text="Learn more" />\n      </Flex>\n    </AttentionBox>\n}',...AttentionBoxWithLink.parameters?.docs?.source}}},Dismissable.parameters={...Dismissable.parameters,docs:{...Dismissable.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const mockOnClose = useCallback(() => null, []);\n    return <Flex gap="large" align="start">\n        <div style={{\n        width: "274px"\n      }}>\n          <AttentionBox title="Regular attention box" text="Dismissable attention box with two lines of content." onClose={mockOnClose} icon={Info} />\n        </div>\n        <div style={{\n        width: "274px"\n      }}>\n          <AttentionBox text="Attention box in compact mode" onClose={mockOnClose} compact />\n        </div>\n      </Flex>;\n  }\n}',...Dismissable.parameters?.docs?.source}}},NaturalAttentionBox.parameters={...NaturalAttentionBox.parameters,docs:{...NaturalAttentionBox.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex direction="column" align="start">\n      <Heading type="h3" weight="bold">\n        Cross-Account Copier\n      </Heading>\n      <Text style={{\n      margin: "4px 0 10px"\n    }}>Copy boards and dashboards to another account</Text>\n      <AttentionBox compact withIconWithoutHeader icon={Info} text="First, move the content you want to copy into folder. Only main boards and dashboards can be copied." type="dark" />\n    </Flex>\n}',...NaturalAttentionBox.parameters?.docs?.source}}},AttentionBoxInsideADialogCombobox.parameters={...AttentionBoxInsideADialogCombobox.parameters,docs:{...AttentionBoxInsideADialogCombobox.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const mockOnClose = useCallback(() => null, []);\n    return <DialogContentContainer style={{\n      width: "380px",\n      padding: "var(--spacing-medium)"\n    }}>\n        <Flex direction="column" gap="medium" align="initial">\n          <Search placeholder="Search by name, role, team, or email" />\n          <Text style={{\n          paddingInlineStart: "5px",\n          marginTop: "4px"\n        }}>Suggested people</Text>\n          <Flex direction="column" gap="medium" align="start">\n            <Flex gap="small">\n              <Avatar size="medium" src={person} type="img" />\n              <Flex gap="xs">\n                <Text>May Kishon </Text>\n                <Text color="secondary">(UX/UI Product Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex gap="small">\n              <Icon iconSize="32" icon={Invite} style={{\n              padding: "0 6px"\n            }} />\n              <Text>Invite new board member by email</Text>\n            </Flex>\n            <AttentionBox text="Hold ⌘ to select more than one person or team" compact onClose={mockOnClose} />\n          </Flex>\n        </Flex>\n      </DialogContentContainer>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person,\n          Invite\n        }\n      }\n    }\n  },\n  name: "Attention box inside a dialog/combobox"\n}',...AttentionBoxInsideADialogCombobox.parameters?.docs?.source}}},AttentionBoxAnimation.parameters={...AttentionBoxAnimation.parameters,docs:{...AttentionBoxAnimation.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const [isOpen, setOpen] = useState(false);\n    const onClick = useCallback(() => {\n      setOpen(true);\n    }, []);\n    return <>\n        <Flex gap={Flex.gaps.MEDIUM} style={{\n        height: "44px"\n      }}>\n          <Button onClick={onClick} kind={Button.kinds.SECONDARY}>\n            Entry animation\n          </Button>\n          {isOpen && <AttentionBox compact withIconWithoutHeader entryAnimation icon={Info} text="First, move the content you want to copy into folder. Only main boards and dashboards can be copied." onClose={() => setOpen(false)} />}\n        </Flex>\n      </>;\n  },\n  name: "Attention box inside a dialog/combobox"\n}',...AttentionBoxAnimation.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","States","AttentionBoxWithLink","Dismissable","NaturalAttentionBox","AttentionBoxInsideADialogCombobox","AttentionBoxAnimation"]},"../storybook-blocks/dist/src/components/story-description/story-description.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>p});var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),react=__webpack_require__("../../node_modules/react/index.js"),classnames=__webpack_require__("../../node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),withStaticProps=__webpack_require__("../storybook-blocks/dist/src/types/withStaticProps.js"),FlexConstants=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/FlexConstants.js"),Flex=__webpack_require__("../storybook-blocks/dist/src/helpers/components/Flex/Flex.js"),e_description="story-description-module_description__yFjQO",e_vertical="story-description-module_vertical__C1SJj";function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _defineProperty(obj,key,value){return key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key),key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var p=(0,withStaticProps.N)((function m(t){var o,l,n,_t$description=t.description,a=void 0===_t$description?"":_t$description,p=t.headerStyle,u=t.children,_t$vertical=t.vertical,v=void 0!==_t$vertical&&_t$vertical,f=t.className,j=t.align,_t$justify=t.justify,g=void 0===_t$justify?null===(o=m.justify)||void 0===o?void 0:o.START:_t$justify,h=t.headerAlign,y=t.headerJustify,x=(0,react.useMemo)((function(){var i,s;return v?null===(i=m.directions)||void 0===i?void 0:i.COLUMN:null===(s=m.directions)||void 0===s?void 0:s.ROW}),[v]);return(0,jsx_runtime.jsxs)(Flex.A,{direction:x,gap:null===(l=m.gaps)||void 0===l?void 0:l.MEDIUM,justify:g,align:j||void 0,className:f,children:[(0,jsx_runtime.jsx)(Flex.A,{className:classnames_default()(e_description,_defineProperty({},e_vertical,v)),style:Object.assign({width:"120px"},p),justify:y,align:h||(null===(n=m.align)||void 0===n?void 0:n.CENTER),children:a}),u]})}),{justify:FlexConstants.aP,align:FlexConstants.xB,gaps:FlexConstants.Us,directions:FlexConstants.bo})},"../storybook-blocks/dist/src/functions/createComponentTemplate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>r});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");function r(r){return function(e){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(r,Object.assign({},e))}}}}]);