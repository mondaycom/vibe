@use "sass:map";
@use "sass:string";
@use "sass:list";
@import "~monday-ui-style/dist/functions";

/*  stylelint-disable scss/at-if-no-null */
$utility-spacing-vars: (
  0: 0,
  xs: var(--spacing-xs),
  small: var(--spacing-small),
  medium: var(--spacing-medium),
  large: var(--spacing-large),
  xl: var(--spacing-xl),
  xxl: var(--spacing-xxl),
  xxxl: var(--spacing-xxxl)
);

$utility-border-colors-vars: (
  uiBorderColor: var(--ui-border-color),
  layoutBorderColor: var(--layout-border-color)
);

$utility-colors-vars: (
  primaryTextColor: var(--primary-text-color),
  textColorOnInverted: var(--text-color-on-inverted),
  secondaryTextColor: var(--secondary-text-color)
);

$utility-background-colors-vars: (
  primaryBackgroundColor: var(--primary-background-color),
  secondaryBackgroundColor: var(--secondary-background-color),
  greyBackgroundColor: var(--grey-background-color),
  allgreyBackgroundColor: var(--allgrey-background-color),
  invertedColorBackground: var(--inverted-color-background)
);

$utilities-modules: (
  "opacity": (
    property: opacity,
    values: (
      disabled: var(--disabled-component-opacity)
    )
  ),
  "border": (
    property: border,
    values: (
      null: var(--border-width) var(--border-style) var(--ui-border-color)
    )
  ),
  "borderColor": (
    property: border-color,
    class: borderColor,
    values: $utility-border-colors-vars
  ),
  "rounded": (
    property: border-radius,
    class: rounded,
    values: (
      0: 0,
      small: var(--border-radius-small),
      medium: var(--border-radius-medium),
      big: var(--border-radius-big)
    )
  ),
  "shadow": (
    property: box-shadow,
    class: shadow,
    values: (
      xs: var(--box-shadow-xs),
      small: var(--box-shadow-small),
      medium: var(--box-shadow-medium),
      large: var(--box-shadow-large)
    )
  ),
  "margin": (
    property: margin,
    class: m,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginX": (
    property: margin-right margin-left,
    class: mx,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginY": (
    property: margin-top margin-bottom,
    class: my,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginTop": (
    property: margin-top,
    class: mt,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginEnd": (
    property: margin-inline-end,
    class: me,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginBottom": (
    property: margin-bottom,
    class: mb,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "marginStart": (
    property: margin-inline-start,
    class: ms,
    values:
      map.merge(
        $utility-spacing-vars,
        (
          auto: auto
        )
      )
  ),
  "padding": (
    property: padding,
    class: p,
    values: $utility-spacing-vars
  ),
  "paddingX": (
    property: padding-right padding-left,
    class: px,
    values: $utility-spacing-vars
  ),
  "paddingY": (
    property: padding-top padding-bottom,
    class: py,
    values: $utility-spacing-vars
  ),
  "paddingTop": (
    property: padding-top,
    class: pt,
    values: $utility-spacing-vars
  ),
  "paddingEnd": (
    property: padding-inline-end,
    class: pe,
    values: $utility-spacing-vars
  ),
  "paddingBottom": (
    property: padding-bottom,
    class: pb,
    values: $utility-spacing-vars
  ),
  "paddingStart": (
    property: padding-inline-start,
    class: ps,
    values: $utility-spacing-vars
  ),
  "color": (
    property: color,
    class: text,
    values: $utility-colors-vars
  ),
  "backgroundColor": (
    property: background-color,
    class: bg,
    values: $utility-background-colors-vars
  )
);

// Generate utilities
// @arguments: $utility , $infix, $export
// - $utility is a scope key from the utilities map.
// - $infix is defined by utility values
// - $export enables Camelcase by capitalizing the $infix
// -- This is achieved via flag using $export:"modules" (for css modules)
// This mixin generates classes with definition per a utility scope
// - Utility scopes are nested within a utility map
// - Map keys are fixed and defined within the mixin:
// --  property, class,values,
@mixin generate-utility-class($utility, $infix, $export) {
  $values: map.get($utility, values);
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: list.zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map.get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: list.append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map.has-key($utility, class), map.get($utility, class), list.nth($properties, 1));
    $property-class: if($property-class == null, "", $property-class);

    $infix: if($property-class == "" and string.slice($infix, 1, 1) == "-", string.slice($infix, 2), $infix);

    // Don't prefix if value key is null (eg. with shadow class)
    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "") + $key, "");

    @if $value != null {
      @if $export == "modules" {
        $class-name: $property-class + capitalize(camelize($infix)) + capitalize(camelize($property-class-modifier));
        .#{$class-name} {
          @each $property in $properties {
            #{$property}: $value !important;
          }
        }
      } @else {
        $class-name: $property-class + $infix + -#{$property-class-modifier};
        .#{$class-name} {
          @each $property in $properties {
            #{$property}: $value !important;
          }
        }
      }
    }
  }
}

// Generate utilities
// This mixin invoke the utility mixin by setting its map and export type, and initializing the $infix.
@mixin utility-class-factory($map, $infix: "", $export: "") {
  @each $key, $utility in $map {
    // The utility can be disabled with `false`, thus check if the utility is a map first
    // Only proceed if responsive media queries are enabled or if it's the base media query
    @if type-of($utility) == "map" and ($infix == "") {
      @include generate-utility-class($utility, $infix, $export);
    }
  }
}
/*  stylelint-enable scss/at-if-no-null */
