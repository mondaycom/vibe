{
  "src/components/AlertBanner/AlertBanner.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AlertBanner",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Set external styling to the progress bar."
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "backgroundColor": {
          "required": false,
          "tsType": {
            "name": "AlertBannerBackgroundColor"
          },
          "description": "",
          "defaultValue": {
            "value": "AlertBanner.backgroundColors.PRIMARY",
            "computed": true
          }
        },
        "isCloseHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA description for the progress bar",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "closeButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Close\"",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ChildrenType | ChildrenType[]",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "union",
                    "raw": "AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps",
                    "elements": [
                      {
                        "name": "AlertBannerButtonProps"
                      },
                      {
                        "name": "AlertBannerLinkProps"
                      },
                      {
                        "name": "AlertBannerTextProps"
                      }
                    ]
                  }
                ],
                "raw": "ReactElement<AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps",
                        "elements": [
                          {
                            "name": "AlertBannerButtonProps"
                          },
                          {
                            "name": "AlertBannerLinkProps"
                          },
                          {
                            "name": "AlertBannerTextProps"
                          }
                        ]
                      }
                    ],
                    "raw": "ReactElement<AlertBannerButtonProps | AlertBannerLinkProps | AlertBannerTextProps>"
                  }
                ],
                "raw": "ChildrenType[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AttentionBox/AttentionBox.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AttentionBox",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "withIconWithoutHeader": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AttentionBoxType"
          },
          "description": "we support 5 types of attention boxes",
          "defaultValue": {
            "value": "AttentionBox.types.PRIMARY",
            "computed": true
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon classname for icon font or SVG Icon Component for SVG Type"
        },
        "iconType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "IconType.SVG | IconType.ICON_FONT",
            "elements": [
              {
                "name": "IconType.SVG"
              },
              {
                "name": "IconType.ICON_FONT"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "Icon.type.SVG",
            "computed": true
          }
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "withoutIcon": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "compact": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "closeButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Close\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Avatar/Avatar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Avatar",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "src": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "withoutTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": "",
          "defaultValue": {
            "value": "AvatarType.TEXT",
            "computed": true
          }
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for the avatar content of text type",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "avatarContentWrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for a div-wrapper of avatar content"
        },
        "backgroundColor": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof ElementAllowedColor)[keyof typeof ElementAllowedColor] | string",
            "elements": [
              {
                "name": "unknown[unknown]",
                "raw": "(typeof ElementAllowedColor)[keyof typeof ElementAllowedColor]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "chili-blue",
            "computed": true
          }
        },
        "customBackgroundColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "AriaRole"
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "AvatarSize"
          },
          "description": "",
          "defaultValue": {
            "value": "AvatarSize.LARGE",
            "computed": true
          }
        },
        "customSize": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "ariaHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isSquare": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use square instead"
        },
        "isDisabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use disabled instead"
        },
        "square": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "topLeftBadgeProps": {
          "required": false,
          "tsType": {
            "name": "AvatarBadgeProps"
          },
          "description": ""
        },
        "topRightBadgeProps": {
          "required": false,
          "tsType": {
            "name": "AvatarBadgeProps"
          },
          "description": ""
        },
        "bottomLeftBadgeProps": {
          "required": false,
          "tsType": {
            "name": "AvatarBadgeProps"
          },
          "description": ""
        },
        "bottomRightBadgeProps": {
          "required": false,
          "tsType": {
            "name": "AvatarBadgeProps"
          },
          "description": ""
        },
        "withoutBorder": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.KeyboardEvent, avatarId: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "avatarId"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Avatar/AvatarBadge.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarBadge",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "src": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Use to provide SVG Components"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "AvatarSize.LARGE",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Avatar/AvatarContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "src": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": "",
          "defaultValue": {
            "value": "AvatarType.TEXT",
            "computed": true
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "AvatarSize"
          },
          "description": "",
          "defaultValue": {
            "value": "AvatarSize.LARGE",
            "computed": true
          }
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "we support two types of icons - SVG and FONT (classname) so this prop is either the name of the icon or the component"
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroupCounterTooltipHelper.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "avatarRenderer",
      "props": {
        "value": {
          "required": true,
          "tsType": {
            "name": "intersection",
            "raw": "AvatarProps & { tooltipContent: ElementContent }",
            "elements": [
              {
                "name": "AvatarProps"
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ tooltipContent: ElementContent }",
                "signature": {
                  "properties": [
                    {
                      "key": "tooltipContent",
                      "value": {
                        "name": "ElementContent",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroup.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarGroup",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "avatarClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement<AvatarProps> | ReactElement<AvatarProps>[]",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "AvatarProps"
                  }
                ],
                "raw": "ReactElement<AvatarProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "AvatarProps"
                      }
                    ],
                    "raw": "ReactElement<AvatarProps>"
                  }
                ],
                "raw": "ReactElement<AvatarProps>[]"
              }
            ]
          },
          "description": "Array of `Avatar` components"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "AvatarSize"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": ""
        },
        "max": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "5",
            "computed": false
          }
        },
        "counterProps": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  color?: CounterColor.LIGHT | CounterColor.DARK;\n  count?: number;\n  prefix?: string;\n  maxDigits?: number;\n  ariaLabelItemsName?: string;\n  noAnimation?: boolean;\n}",
            "signature": {
              "properties": [
                {
                  "key": "color",
                  "value": {
                    "name": "union",
                    "raw": "CounterColor.LIGHT | CounterColor.DARK",
                    "elements": [
                      {
                        "name": "CounterColor.LIGHT"
                      },
                      {
                        "name": "CounterColor.DARK"
                      }
                    ],
                    "required": false
                  }
                },
                {
                  "key": "count",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "prefix",
                  "value": {
                    "name": "string",
                    "required": false
                  }
                },
                {
                  "key": "maxDigits",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "ariaLabelItemsName",
                  "value": {
                    "name": "string",
                    "required": false
                  }
                },
                {
                  "key": "noAnimation",
                  "value": {
                    "name": "boolean",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "4 `Counter.props` for customization + ariaLabelItemsName for specifying the \"items\" name in aria label"
        },
        "counterTooltipCustomProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "`Tooltip.props`: props for custom counter tooltip"
        },
        "counterTooltipIsVirtualizedList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Using counter default tooltip virtualized list for rendering only visible items (performance optimization)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "removePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, padding will be removed from the container",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroupCounterTooltipContentVirtualizedList.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarGroupCounterTooltipContentVirtualizedList",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "avatarItems": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  value: AvatarProps & { tooltipContent: ElementContent };\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "value",
                      "value": {
                        "name": "intersection",
                        "raw": "AvatarProps & { tooltipContent: ElementContent }",
                        "elements": [
                          {
                            "name": "AvatarProps"
                          },
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{ tooltipContent: ElementContent }",
                            "signature": {
                              "properties": [
                                {
                                  "key": "tooltipContent",
                                  "value": {
                                    "name": "union",
                                    "raw": "ReactNode | ReactNode[]",
                                    "elements": [
                                      {
                                        "name": "ReactNode"
                                      },
                                      {
                                        "name": "Array",
                                        "elements": [
                                          {
                                            "name": "ReactNode"
                                          }
                                        ],
                                        "raw": "ReactNode[]"
                                      }
                                    ],
                                    "required": true
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "required": true
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "AvatarItem[]"
          },
          "description": "Array of Avatar components",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "avatarRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  item: AvatarItem,\n  index: number,\n  style: CSSProperties,\n  type: AvatarType,\n  displayAsGrid: boolean\n) => ReactElement",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value: AvatarProps & { tooltipContent: ElementContent };\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "intersection",
                            "raw": "AvatarProps & { tooltipContent: ElementContent }",
                            "elements": [
                              {
                                "name": "AvatarProps"
                              },
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{ tooltipContent: ElementContent }",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": "tooltipContent",
                                      "value": {
                                        "name": "union",
                                        "raw": "ReactNode | ReactNode[]",
                                        "elements": [
                                          {
                                            "name": "ReactNode"
                                          },
                                          {
                                            "name": "Array",
                                            "elements": [
                                              {
                                                "name": "ReactNode"
                                              }
                                            ],
                                            "raw": "ReactNode[]"
                                          }
                                        ],
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "CSSProperties"
                  },
                  "name": "style"
                },
                {
                  "type": {
                    "name": "AvatarType"
                  },
                  "name": "type"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "displayAsGrid"
                }
              ],
              "return": {
                "name": "ReactElement"
              }
            }
          },
          "description": ""
        },
        "tooltipContainerAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipContentContainerRef": {
          "required": false,
          "tsType": {
            "name": "Ref",
            "elements": [
              {
                "name": "HTMLDivElement"
              }
            ],
            "raw": "Ref<HTMLDivElement>"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Badge/Badge.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Badge",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "anchor": {
          "required": false,
          "tsType": {
            "name": "BadgeAnchor"
          },
          "description": "",
          "defaultValue": {
            "value": "Badge.anchors.TOP_END",
            "computed": true
          }
        },
        "alignment": {
          "required": false,
          "tsType": {
            "name": "BadgeAlignments"
          },
          "description": "",
          "defaultValue": {
            "value": "Badge.alignments.RECTANGULAR",
            "computed": true
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "type": {
          "defaultValue": {
            "value": "Badge.types.INDICATOR",
            "computed": true
          },
          "required": false
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroupCounterTooltipContainer.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarGroupCounterTooltipContainer",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement"
              }
            ],
            "raw": "ReactElement[]"
          },
          "description": "Counter element & focus placeholders",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "avatars": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "AvatarProps"
                  }
                ],
                "raw": "ReactElement<AvatarProps>"
              }
            ],
            "raw": "ReactElement<AvatarProps>[]"
          },
          "description": "Array of Avatar elements",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "counterTooltipCustomProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        },
        "counterTooltipIsVirtualizedList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "focusPrevPlaceholderRef": {
          "required": false,
          "tsType": {
            "name": "RefObject",
            "elements": [
              {
                "name": "HTMLDivElement"
              }
            ],
            "raw": "RefObject<HTMLDivElement>"
          },
          "description": ""
        },
        "focusNextPlaceholderRef": {
          "required": false,
          "tsType": {
            "name": "RefObject",
            "elements": [
              {
                "name": "HTMLDivElement"
              }
            ],
            "raw": "RefObject<HTMLDivElement>"
          },
          "description": ""
        },
        "counterContainerRef": {
          "required": false,
          "tsType": {
            "name": "RefObject",
            "elements": [
              {
                "name": "HTMLDivElement"
              }
            ],
            "raw": "RefObject<HTMLDivElement>"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroupCounter.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarGroupCounter",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "counterTooltipAvatars": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "AvatarProps"
                  }
                ],
                "raw": "ReactElement<AvatarProps>"
              }
            ],
            "raw": "ReactElement<AvatarProps>[]"
          },
          "description": "Array of Avatar elements",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "counterProps": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  color?: CounterColor.LIGHT | CounterColor.DARK;\n  count?: number;\n  prefix?: string;\n  maxDigits?: number;\n  ariaLabelItemsName?: string;\n  noAnimation?: boolean;\n}",
            "signature": {
              "properties": [
                {
                  "key": "color",
                  "value": {
                    "name": "union",
                    "raw": "CounterColor.LIGHT | CounterColor.DARK",
                    "elements": [
                      {
                        "name": "CounterColor.LIGHT"
                      },
                      {
                        "name": "CounterColor.DARK"
                      }
                    ],
                    "required": false
                  }
                },
                {
                  "key": "count",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "prefix",
                  "value": {
                    "name": "string",
                    "required": false
                  }
                },
                {
                  "key": "maxDigits",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "ariaLabelItemsName",
                  "value": {
                    "name": "string",
                    "required": false
                  }
                },
                {
                  "key": "noAnimation",
                  "value": {
                    "name": "boolean",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "AvatarGroupCounterVisualProps: props for counter"
        },
        "counterTooltipCustomProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        },
        "counterTooltipIsVirtualizedList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "AvatarSize"
          },
          "description": "",
          "defaultValue": {
            "value": "Avatar.sizes.MEDIUM",
            "computed": true
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": ""
        },
        "counterAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AvatarGroup/AvatarGroupCounterTooltipContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AvatarGroupCounterTooltipContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": ""
        },
        "avatars": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "AvatarProps"
                  }
                ],
                "raw": "ReactElement<AvatarProps>"
              }
            ],
            "raw": "ReactElement<AvatarProps>[]"
          },
          "description": "Array of Avatar components",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "isVirtualizedList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipContentContainerRef": {
          "required": false,
          "tsType": {
            "name": "Ref",
            "elements": [
              {
                "name": "HTMLDivElement"
              }
            ],
            "raw": "Ref<HTMLDivElement>"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/BreadcrumbsBar/BreadcrumbsBar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BreadcrumbsBar",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "BreadcrumbsBarType"
          },
          "description": "The type of the bar is responsible for whether it will be navigational or for indication only",
          "defaultValue": {
            "value": "BreadcrumbsBar.types.INDICATION",
            "computed": true
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactElement<BreadcrumbItemProps> | ReactElement<BreadcrumbItemProps>[]",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "BreadcrumbItemProps"
                  }
                ],
                "raw": "ReactElement<BreadcrumbItemProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "BreadcrumbItemProps"
                      }
                    ],
                    "raw": "ReactElement<BreadcrumbItemProps>"
                  }
                ],
                "raw": "ReactElement<BreadcrumbItemProps>[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Box/Box.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Box",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "elementType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "keyof JSX.IntrinsicElements | string",
            "elements": [
              {
                "name": "JSX.IntrinsicElements"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"div\"",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "border": {
          "required": false,
          "tsType": {
            "name": "BORDER[BORDER]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "borderColor": {
          "required": false,
          "tsType": {
            "name": "BORDER_COLOR[BORDER_COLOR]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "rounded": {
          "required": false,
          "tsType": {
            "name": "ROUNDED[ROUNDED]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "shadow": {
          "required": false,
          "tsType": {
            "name": "SHADOW[SHADOW]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "margin": {
          "required": false,
          "tsType": {
            "name": "MARGIN[MARGIN]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginX": {
          "required": false,
          "tsType": {
            "name": "MARGIN_X[MARGIN_X]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginY": {
          "required": false,
          "tsType": {
            "name": "MARGIN_Y[MARGIN_Y]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginTop": {
          "required": false,
          "tsType": {
            "name": "MARGIN_TOP[MARGIN_TOP]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginEnd": {
          "required": false,
          "tsType": {
            "name": "MARGIN_END[MARGIN_END]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginBottom": {
          "required": false,
          "tsType": {
            "name": "MARGIN_BOTTOM[MARGIN_BOTTOM]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "marginStart": {
          "required": false,
          "tsType": {
            "name": "MARGIN_START[MARGIN_START]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "padding": {
          "required": false,
          "tsType": {
            "name": "PADDING[PADDING]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingX": {
          "required": false,
          "tsType": {
            "name": "PADDING_X[PADDING_X]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingY": {
          "required": false,
          "tsType": {
            "name": "PADDING_Y[PADDING_Y]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingTop": {
          "required": false,
          "tsType": {
            "name": "PADDING_TOP[PADDING_TOP]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingEnd": {
          "required": false,
          "tsType": {
            "name": "PADDING_END[PADDING_END]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingBottom": {
          "required": false,
          "tsType": {
            "name": "PADDING_BOTTOM[PADDING_BOTTOM]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "paddingStart": {
          "required": false,
          "tsType": {
            "name": "PADDING_START[PADDING_START]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "backgroundColor": {
          "required": false,
          "tsType": {
            "name": "BACKGROUND_COLORS[BACKGROUND_COLORS]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "textColor": {
          "required": false,
          "tsType": {
            "name": "COLORS[COLORS]",
            "raw": "T[keyof T]"
          },
          "description": ""
        },
        "scrollable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "TODO: make default in next major version"
        }
      }
    }
  ],
  "src/components/Button/Button.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Button",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the button",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "activeButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "The button's kind",
          "defaultValue": {
            "value": "ButtonType.PRIMARY",
            "computed": true
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to run when the button is clicked",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "blurOnMouseUp": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Blur on button click",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Name of the button - for form submit usages",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "The button's size",
          "defaultValue": {
            "value": "SIZES.MEDIUM",
            "computed": true
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color",
          "defaultValue": {
            "value": "ButtonColor.PRIMARY",
            "computed": true
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ButtonInputType"
          },
          "description": "The button's type",
          "defaultValue": {
            "value": "ButtonInputType.BUTTON",
            "computed": true
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the button should be disabled or not",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "success": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the success props are used when you have async action and wants to display a success message",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "successIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Success icon name",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "successText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Success text",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "loading boolean which switches the text to a loader",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": "",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "displays the active state",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "marginRight": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the right",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the left",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the button accordingly",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria label to provide important when providing only Icon",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "ReactHTMLProps[\"aria-haspopup\"]",
            "raw": "React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"]"
          },
          "description": "aria for a button popup",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "aria to be set if the popup is open",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria controls - receives id for the controlled region",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "aria-describedby": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-describedby\"]",
            "raw": "AriaAttributes[\"aria-describedby\"]"
          },
          "description": ""
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "aria to be used for screen reader to know if the button is hidden"
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Focus callback",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Blur callback",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "rightFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "leftFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "preventClickAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "noSidePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "defaultTextColorOnPrimaryColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)",
          "defaultValue": {
            "value": "\"rgba(0, 0, 0, 0)\"",
            "computed": false
          }
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        }
      }
    }
  ],
  "src/components/ButtonGroup/ButtonWrapper.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ButtonWrapper",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the button"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "activeButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "The button's kind"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to run when the button is clicked"
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "blurOnMouseUp": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Blur on button click"
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Name of the button - for form submit usages"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "The button's size"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ButtonInputType"
          },
          "description": "The button's type"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the button should be disabled or not"
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right"
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left"
        },
        "success": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the success props are used when you have async action and wants to display a success message"
        },
        "successIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Success icon name"
        },
        "successText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Success text"
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "loading boolean which switches the text to a loader"
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "displays the active state"
        },
        "marginRight": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the right"
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the left"
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the button accordingly"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria label to provide important when providing only Icon"
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "ReactHTMLProps[\"aria-haspopup\"]",
            "raw": "React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"]"
          },
          "description": "aria for a button popup"
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "aria to be set if the popup is open"
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria controls - receives id for the controlled region"
        },
        "aria-describedby": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-describedby\"]",
            "raw": "AriaAttributes[\"aria-describedby\"]"
          },
          "description": ""
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "aria to be used for screen reader to know if the button is hidden"
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Focus callback"
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Blur callback"
        },
        "rightFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "leftFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "preventClickAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "noSidePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "defaultTextColorOnPrimaryColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)"
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it"
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        },
        "tooltipContent": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ..."
        },
        "tooltipHideDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "tooltipShowDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "tooltipContainerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipMoveBy": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  main?: number;\n  secondary?: number;\n}",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Chips/Chips.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Chips",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "readOnly": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "rightRenderer": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "A React element that is positioned to the right of the text"
        },
        "leftRenderer": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "A React element that is positioned to the left of the text"
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "rightAvatar": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Img to place as avatar on the right",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "rightAvatarType": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": "the type of right avatar",
          "defaultValue": {
            "value": "AvatarType.IMG",
            "computed": true
          }
        },
        "leftAvatar": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Img to place as avatar on the left",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "leftAvatarType": {
          "required": false,
          "tsType": {
            "name": "AvatarType"
          },
          "description": "the type of left avatar",
          "defaultValue": {
            "value": "AvatarType.IMG",
            "computed": true
          }
        },
        "iconClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ClassName for left or right icon"
        },
        "avatarClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ClassName for left or right avatar"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof ElementAllowedColor)[keyof typeof ElementAllowedColor] | string",
            "elements": [
              {
                "name": "unknown[unknown]",
                "raw": "(typeof ElementAllowedColor)[keyof typeof ElementAllowedColor]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "Chips.colors.PRIMARY",
            "computed": true
          }
        },
        "iconSize": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "Size for font icon",
          "defaultValue": {
            "value": "18",
            "computed": false
          }
        },
        "onDelete": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(id: string, event: React.MouseEvent<HTMLSpanElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "id"
                },
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLSpanElement>",
                    "elements": [
                      {
                        "name": "HTMLSpanElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "(_id: string, _e: React.MouseEvent<HTMLSpanElement>) => {}",
            "computed": false
          }
        },
        "noAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disables the Chip's entry animation",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "allowTextSelection": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Allow user to select text",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLDivElement, MouseEvent>",
                    "elements": [
                      {
                        "name": "HTMLDivElement"
                      },
                      {
                        "name": "MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to be called when the user clicks the component."
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLDivElement, MouseEvent>",
                    "elements": [
                      {
                        "name": "HTMLDivElement"
                      },
                      {
                        "name": "MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to be called when the user clicks the component."
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Applies when element has onClick or onMouseDown props"
        },
        "clickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.\n@deprecated"
        },
        "isClickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Deprecated, there is no need to use this prop for implementing clickable chips. Please use onClick for this purpose.\n@deprecated"
        },
        "disableClickableBehavior": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disable click behaviors",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "showBorder": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Show border, the border color is `--text-color-on-primary`, should be when the chip is a colored background like\nselected-color",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "closeButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Remove\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Checkbox/Checkbox.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Checkbox",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A classname to be added to the wrapping element"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "An id to be added the input element"
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "checkboxClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A classname to be added to the checkbox element label"
        },
        "labelClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A classname to be added to the label element"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A11y prop to describe the content for screen readers"
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "React.ReactNode | Array<React.ReactNode>",
            "elements": [
              {
                "name": "ReactReactNode",
                "raw": "React.ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactReactNode",
                    "raw": "React.ReactNode"
                  }
                ],
                "raw": "Array<React.ReactNode>"
              }
            ]
          },
          "description": "The content to be rendered within the option"
        },
        "ariaLabelledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A11y prop - An Id of an element which describes this option"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.ChangeEvent<HTMLInputElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement>",
                    "elements": [
                      {
                        "name": "HTMLInputElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback function when the value changes",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Use this when you want to control the component, this will set the state of the component"
        },
        "indeterminate": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "An in between state to display a non selected",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Set the option to be disabled",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "defaultChecked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the default value which the checkbox will start from"
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective HTMLInputElement object's value property. The value attribute is always optional, though should be considered mandatory for checkbox, radio, and hidden.l",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of the input element"
        }
      }
    }
  ],
  "src/components/Clickable/ClickableWrapper.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClickableWrapper",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "isClickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "clickableProps": {
          "required": false,
          "tsType": {
            "name": "ClickableProps"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Counter/Counter.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Counter",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component wrapper"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the element",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Use className instead\n@deprecated"
        },
        "counterClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component"
        },
        "count": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The numeric value of the counter",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Counter description",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "CounterSize"
          },
          "description": "The size of the counter",
          "defaultValue": {
            "value": "Counter.sizes.LARGE",
            "computed": true
          }
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "CounterType"
          },
          "description": "",
          "defaultValue": {
            "value": "Counter.kinds.FILL",
            "computed": true
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "CounterColor"
          },
          "description": "The color of the counter",
          "defaultValue": {
            "value": "Counter.colors.PRIMARY",
            "computed": true
          }
        },
        "maxDigits": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "maximum number of digits to display (see relevant story)",
          "defaultValue": {
            "value": "3",
            "computed": false
          }
        },
        "prefix": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Text prepended to counter value",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLSpanElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLSpanElement>",
                    "elements": [
                      {
                        "name": "HTMLSpanElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback to be called when the counter is clicked.",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "noAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disables the component's animation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Combobox/Combobox.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Combobox",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Unique element id",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "optionClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "searchWrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Placeholder to show when no value was selected",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "noResultsMessage": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A message that will be displayed inside the combo box when no results are found",
          "defaultValue": {
            "value": "\"No results found\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "options": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "IComboboxOption"
              }
            ],
            "raw": "IComboboxOption[]"
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "categories": {
          "required": false,
          "tsType": {
            "name": "IComboboxCategoryMap"
          },
          "description": ""
        },
        "withCategoriesDivider": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Divider between categories sections",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof BASE_SIZES)[keyof typeof BASE_SIZES]"
          },
          "description": "",
          "defaultValue": {
            "value": "Combobox.sizes.MEDIUM",
            "computed": true
          }
        },
        "optionLineHeight": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "32",
            "computed": false
          }
        },
        "optionsListHeight": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "autoFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onAddNew": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback that called after clicking on the add new combo box button.\n@param {string} _filterValue"
        },
        "addNewLabel": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "((label: string) => ElementContent) | string",
            "elements": [
              {
                "name": "unknown"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "The label of the button that appears at the end of the combo box when the search does not return appropriate options",
          "defaultValue": {
            "value": "\"Add new\"",
            "computed": false
          }
        },
        "filter": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(filterValue: string, options: IComboboxOption[]) => IComboboxOption[]",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "filterValue"
                },
                {
                  "type": {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "IComboboxOption"
                      }
                    ],
                    "raw": "IComboboxOption[]"
                  },
                  "name": "options"
                }
              ],
              "return": {
                "name": "Array",
                "elements": [
                  {
                    "name": "IComboboxOption"
                  }
                ],
                "raw": "IComboboxOption[]"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "(filterValue: string, options: IComboboxOption[]) =>\noptions.filter(\n  ({ label }: { label: string }) => !filterValue || label.toLowerCase().includes(filterValue.toLowerCase())\n)",
            "computed": false
          }
        },
        "defaultFilter": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Default search input",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disableFilter": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onFilterChanged": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Display the combo box with loading state",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onOptionHover": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "on mouse hover callback for option",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "onOptionLeave": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "on mouse leave callback for option",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "shouldScrollToSelectedItem": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Allowed to the following behavior: scrolling automatically to the combo box's selected option",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "noResultsRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => JSX.Element",
            "signature": {
              "arguments": [],
              "return": {
                "name": "JSX.Element"
              }
            }
          },
          "description": ""
        },
        "stickyCategories": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "defaultVisualFocusFirstIndex": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "By default, the first option will be selected, when focusing selecting the first option, or when changing items"
        },
        "clearFilterOnSelection": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Clear the filter/search on selection (click or enter)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "optionRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: IComboboxOption) => JSX.Element",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "JSX.Element"
              }
            }
          },
          "description": "Replace the regular appearance of combo box option with custom renderer.",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "maxOptionsWithoutScroll": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Maximum options count without scroll"
        },
        "renderOnlyVisibleOptions": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Using virtualized list for rendering only the items which visible to the user in any given user (performance optimization)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(optionData: IComboboxOption) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "optionData"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On option click callback",
          "defaultValue": {
            "value": "(_optionData: IComboboxOption) => {}",
            "computed": false
          }
        },
        "searchIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Custom search icon"
        },
        "searchInputAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Search for content\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/DatePicker/DatePicker.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DatePicker",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "firstDayOfWeek": {
          "required": false,
          "tsType": {
            "name": "DayOfWeekShape"
          },
          "description": "set the first day of the week to display",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "date": {
          "required": false,
          "tsType": {
            "name": "moment.Moment"
          },
          "description": "current start date"
        },
        "endDate": {
          "required": false,
          "tsType": {
            "name": "moment.Moment"
          },
          "description": "current end date"
        },
        "onPickDate": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(date: Moment | RangeDate) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "Moment | RangeDate",
                    "elements": [
                      {
                        "name": "moment.Moment"
                      },
                      {
                        "name": "RangeDate"
                      }
                    ]
                  },
                  "name": "date"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "on date selected callback"
        },
        "hideNavigationKeys": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "hide the month navigations keys",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "enableOutsideDays": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "show days outside the cuurent month view",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "showWeekNumber": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "show week number column",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "daySize": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "set the size of single day element",
          "defaultValue": {
            "value": "40",
            "computed": false
          }
        },
        "shouldBlockDay": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(date: Moment) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "moment.Moment"
                  },
                  "name": "date"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": "determine if day should be disabled"
        },
        "range": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "date range mode",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "numberOfMonths": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "number of month to display",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "shouldBlockYear": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(year: number) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "year"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": "determine if year should be disabled"
        },
        "shouldBlockRange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(date: Moment) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "moment.Moment"
                  },
                  "name": "date"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": "determine if date range should be disabled"
        }
      }
    }
  ],
  "src/components/Dialog/Dialog.tsx": [
    {
      "description": "",
      "methods": [
        {
          "name": "closeDialogOnEscape",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "KeyboardEvent",
                "alias": "KeyboardEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "getContainer",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "showDialog",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "options",
              "optional": true,
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "onShowDialog",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "showDialogIfNeeded",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "options",
              "optional": true,
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "hideDialog",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "React.MouseEvent | React.KeyboardEvent | KeyboardEvent | React.FocusEvent | CustomEvent",
                "elements": [
                  {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  {
                    "name": "KeyboardEvent"
                  },
                  {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  {
                    "name": "CustomEvent"
                  }
                ],
                "alias": "DialogEvent"
              }
            },
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "HideShowEvent | string",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onHideDialog",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "React.MouseEvent | React.KeyboardEvent | KeyboardEvent | React.FocusEvent | CustomEvent",
                "elements": [
                  {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  {
                    "name": "KeyboardEvent"
                  },
                  {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  {
                    "name": "CustomEvent"
                  }
                ],
                "alias": "DialogEvent"
              }
            },
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "HideShowEvent | string",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": null
        },
        {
          "name": "hideDialogIfNeeded",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "React.MouseEvent | React.KeyboardEvent | KeyboardEvent | React.FocusEvent | CustomEvent",
                "elements": [
                  {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  {
                    "name": "KeyboardEvent"
                  },
                  {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  {
                    "name": "CustomEvent"
                  }
                ],
                "alias": "DialogEvent"
              }
            },
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "HideShowEvent | string",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  },
                  {
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "returns": null
        },
        {
          "name": "handleEvent",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "HideShowEvent",
                "alias": "HideShowEvent"
              }
            },
            {
              "name": "target",
              "optional": false,
              "type": {
                "name": "EventTarget",
                "alias": "EventTarget"
              }
            },
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "union",
                "raw": "React.MouseEvent | React.KeyboardEvent | KeyboardEvent | React.FocusEvent | CustomEvent",
                "elements": [
                  {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  {
                    "name": "KeyboardEvent"
                  },
                  {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  {
                    "name": "CustomEvent"
                  }
                ],
                "alias": "DialogEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "isShown",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "isShowTrigger",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "HideShowEvent",
                "alias": "HideShowEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "isHideTrigger",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "eventName",
              "optional": false,
              "type": {
                "name": "HideShowEvent",
                "alias": "HideShowEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onMouseEnter",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onMouseLeave",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onKeyDown",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "ReactKeyboardEvent",
                "raw": "React.KeyboardEvent",
                "alias": "React.KeyboardEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onMouseDown",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onFocus",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactFocusEvent",
                "raw": "React.FocusEvent",
                "alias": "React.FocusEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onBlur",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactFocusEvent",
                "raw": "React.FocusEvent",
                "alias": "React.FocusEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onEsc",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactKeyboardEvent",
                "raw": "React.KeyboardEvent",
                "alias": "React.KeyboardEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onContextMenu",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onClickOutside",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onDialogEnter",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "onDialogLeave",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        },
        {
          "name": "onContentClick",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "e",
              "optional": false,
              "type": {
                "name": "ReactMouseEvent",
                "raw": "React.MouseEvent",
                "alias": "React.MouseEvent"
              }
            }
          ],
          "returns": null
        }
      ],
      "displayName": "Dialog",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "referenceWrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A Classname to be added to <span> element which wraps the children"
        },
        "position": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "Where the dialog should be in reference to the children,\nTop, Left, Right, Bottom ...",
          "defaultValue": {
            "value": "\"top\"",
            "computed": false
          }
        },
        "modifiers": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "Modifier",
                "elements": [
                  {
                    "name": "any"
                  }
                ],
                "raw": "Modifier<any>"
              }
            ],
            "raw": "Modifier<any>[]"
          },
          "description": "PopperJS Modifiers type\nhttps://popper.js.org/docs/v2/modifiers/",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "startingEdge": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "moveBy": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{ main?: number; secondary?: number }",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "How much to move the dialog in relative to children\nmain is the axis in which the position is aligned to\nsecondary is the vertical axes to the position",
          "defaultValue": {
            "value": "{ main: 0, secondary: 0 }",
            "computed": false
          }
        },
        "showDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "how much delay should the Dialog wait until it should trigger the show in MS",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "hideDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "how much delay should the Dialog wait until it should trigger the hide in MS",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "showTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | HideShowEvent[]",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "HideShowEvent[]"
              }
            ]
          },
          "description": "an array of hide/show trigger -\nDialog.hideShowTriggers",
          "defaultValue": {
            "value": "Dialog.hideShowTriggers.MOUSE_ENTER",
            "computed": true
          }
        },
        "hideTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | HideShowEvent[]",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "HideShowEvent[]"
              }
            ]
          },
          "description": "an array of hide/show trigger -\nDialog.hideShowTriggers",
          "defaultValue": {
            "value": "Dialog.hideShowTriggers.MOUSE_LEAVE",
            "computed": true
          }
        },
        "showOnDialogEnter": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, prevents open Dialog from closing on mouseEnter and closes Dialog, when  mouse leaves it",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "shouldShowOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Show the Dialog when the children are mounting",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disable the opening of the dialog",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "open is a controlled prop to open the dialog",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "isOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "used when state is derived from props"
        },
        "showTriggerIgnoreClass": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | Array<string>",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "Array<string>"
              }
            ]
          },
          "description": "if this class exists on the children the show trigger will be ignored"
        },
        "hideTriggerIgnoreClass": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | Array<string>",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "Array<string>"
              }
            ]
          },
          "description": "if this class exists on the children the hide trigger will be ignored"
        },
        "animationType": {
          "required": false,
          "tsType": {
            "name": "AnimationType"
          },
          "description": "Dialog animation type",
          "defaultValue": {
            "value": "Dialog.animationTypes.EXPAND",
            "computed": true
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Classname to be added to the content container"
        },
        "preventAnimationOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Prevent Animation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "containerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the container selector in which to append the dialog\nfor examples: \"body\" , \".my-class\", \"#my-id\"",
          "defaultValue": {
            "value": "\"body\"",
            "computed": false
          }
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "should position the tooltip element\nhttps://popper.js.org/docs/v2/modifiers/arrow/",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class name to add to the tooltip element"
        },
        "onDialogDidShow": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when the dialog is shown",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onDialogDidHide": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: DialogEvent, eventName: HideShowEvent | string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent | KeyboardEvent | React.FocusEvent | CustomEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "KeyboardEvent"
                      },
                      {
                        "name": "ReactFocusEvent",
                        "raw": "React.FocusEvent"
                      },
                      {
                        "name": "CustomEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "union",
                    "raw": "HideShowEvent | string",
                    "elements": [
                      {
                        "name": "HideShowEvent"
                      },
                      {
                        "name": "string"
                      }
                    ]
                  },
                  "name": "eventName"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when the dialog is hidden",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onClickOutside": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when click outside is being triggered",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onContentClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when click on the content is being triggered",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "zIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "z-index to add to the dialog"
        },
        "useDerivedStateFromProps": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "hideWhenReferenceHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Make the dialog disappear when the element it is attached to becomes hidden",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "shoudlCallbackOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use shouldCallbackOnMount instead",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "shouldCallbackOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "instantShowAndHide": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "getDynamicShowDelay": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => { showDelay: number; preventAnimation: boolean }",
            "signature": {
              "arguments": [],
              "return": {
                "name": "signature",
                "type": "object",
                "raw": "{ showDelay: number; preventAnimation: boolean }",
                "signature": {
                  "properties": [
                    {
                      "key": "showDelay",
                      "value": {
                        "name": "number",
                        "required": true
                      }
                    },
                    {
                      "key": "preventAnimation",
                      "value": {
                        "name": "boolean",
                        "required": true
                      }
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        },
        "content": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(() => JSX.Element) | JSX.Element",
            "elements": [
              {
                "name": "unknown"
              },
              {
                "name": "JSX.Element"
              }
            ]
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[] | string",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "The element where we will position the dialog beside."
        },
        "addKeyboardHideShowTriggersByDefault": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Treats keyboard focus/blur events as mouse-enter/mouse-leave events",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disableContainerScroll": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "If true disable the scroll for the containerSelector element.\nIf string use it as selector to prevent scroll."
        }
      }
    }
  ],
  "src/components/Dropdown/Dropdown.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Dropdown",
      "props": {
        "multi": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "If set to true, the dropdown will be in multi-select mode.\nWhen in multi-select mode, the selected value will be an array,\nand it will be displayed as our [`<Chips>`](/?path=/docs/components-chips--sandbox) component.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "multiline": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "If set to true together with `multi`, it will make the dropdown expand to multiple lines when new values are selected.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "closeMenuOnSelect": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "Pass closeMenuOnSelect to close the multi choose any time an options is chosen.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "tabSelectsValue": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "Overrides the built-in logic of tab selecting value (default: true)",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "className": {
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "Custom style",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "optionWrapperClassName": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "ClassName to be added to dropdown option wrapper (dropdown-wrapper__option--reset)",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "dropdownMenuWrapperClassName": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "ClassName to be added to dropdown menu wrapper (dropdown-menu-wrapper)",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "singleValueWrapperClassName": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "ClassName to be added to dropdown single value wrapper (dropdown-wrapper__single-value--reset)",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "placeholder": {
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "Placeholder to show when no value was selected",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "onMenuOpen": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when menu is opened",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onMenuClose": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when menu is closed",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onKeyDown": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when key is pressed in the dropdown",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onFocus": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when focused",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onBlur": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when blurred",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onChange": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when selected value has changed",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "onInputChange": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Called when the dropdown's input changes.",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "searchable": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "If true, search in options will be enabled",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "options": {
          "defaultValue": {
            "value": "[]",
            "computed": false
          },
          "description": "The dropdown options",
          "type": {
            "name": "arrayOf",
            "value": {
              "name": "object"
            }
          },
          "required": false
        },
        "menuPlacement": {
          "defaultValue": {
            "value": "Dropdown.menuPlacements.BOTTOM",
            "computed": true
          },
          "description": "Default placement of the Dropdown menu in relation to its control. Use \"auto\" to flip the menu when there isn't enough space below the control.",
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"top\"",
                "computed": false
              },
              {
                "value": "\"bottom\"",
                "computed": false
              },
              {
                "value": "\"auto\"",
                "computed": false
              }
            ]
          },
          "required": false
        },
        "menuPosition": {
          "defaultValue": {
            "value": "Dropdown.menuPositions.ABSOLUTE",
            "computed": true
          },
          "description": "The CSS position value of the menu, when \"fixed\" extra layout management might be required\nFixed position can be used to solve the issue of positioning Dropdown inside overflow container like Modal or Dialog",
          "type": {
            "name": "enum",
            "value": [
              {
                "value": "\"absolute\"",
                "computed": false
              },
              {
                "value": "\"fixed\"",
                "computed": false
              }
            ]
          },
          "required": false
        },
        "noOptionsMessage": {
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          },
          "description": "Text to display when there are no options",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "clearable": {
          "defaultValue": {
            "value": "true",
            "computed": false
          },
          "description": "If set to true, clear button will be added",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "size": {
          "defaultValue": {
            "value": "SIZES.MEDIUM",
            "computed": true
          },
          "description": "Select menu size from `Dropdown.size` - Dropdown.sizes.LARGE | Dropdown.sizes.MEDIUM | Dropdown.sizes.SMALL",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "extraStyles": {
          "defaultValue": {
            "value": "baseStyles => baseStyles",
            "computed": false
          },
          "description": "Custom function to override existing styles (similar to `react-select`'s `style` prop), for example: `base => ({...base, color: 'red'})`, where `base` is the component's default styles",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "tabIndex": {
          "defaultValue": {
            "value": "\"0\"",
            "computed": false
          },
          "description": "Tab index for keyboard navigation purposes",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "required": false
        },
        "onOptionRemove": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "callback to be called when `multiline` is `true` and the option is removed",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "id": {
          "defaultValue": {
            "value": "\"dropdown-menu-id\"",
            "computed": false
          },
          "description": "ID for the select container",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "autoFocus": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "focusAuto when component mount",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "closeMenuOnScroll": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "If menu should be closed on scroll - helpful for some tricky use cases\n@default false, but true when insideOverflowContainer or insideOverflowWithTransformContainer are true",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "ref": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "Pass Ref for reference of the actual dropdown component",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "withMandatoryDefaultOptions": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "The options set by default will be set as mandatory and the user will not be able to cancel their selection",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "insideOverflowContainer": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "For display the drop down menu in overflow hidden/scroll container.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "insideOverflowWithTransformContainer": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "For display the drop down menu in overflow hidden/scroll container which contains transform css function usage.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "tooltipContent": {
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "description": "When content is passed, the dropdown will include a tooltip on the dropdown's value.",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "disabled": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "If set to true, dropdown will be disabled",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "readOnly": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "If set to true, dropdown won't be editable",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "isLoading": {
          "defaultValue": {
            "value": "false",
            "computed": false
          },
          "description": "Display the drop down with loading state.",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "loadingMessage": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "Overrides the built-in logic of loading message design",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "ariaLabel": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "aria-label attribute for dropdown",
          "type": {
            "name": "string"
          },
          "required": false
        },
        "filterOption": {
          "defaultValue": {
            "value": "undefined",
            "computed": true
          },
          "description": "Overrides the build-in search filter logic - https://react-select.com/advanced#custom-filter-logic\ncreateFilter function is available at Dropdown.createFilter",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "func"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false
        },
        "openMenuOnFocus": {
          "description": "If set to true, the menu will open when focused",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "openMenuOnClick": {
          "description": "If set to true, the menu will open when clicked",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "optionRenderer": {
          "description": "custom option render function",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "func"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false
        },
        "valueRenderer": {
          "description": "custom value render function",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "menuRenderer": {
          "description": "custom menu render function",
          "type": {
            "name": "func"
          },
          "required": false
        },
        "rtl": {
          "description": "If set to true, the dropdown will be in Right to Left mode",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "defaultValue": {
          "description": "Set default selected value",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                }
              },
              {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": true
                  },
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              }
            ]
          },
          "required": false
        },
        "value": {
          "description": "The component's value.\nWhen passed, makes this a [controlled](https://reactjs.org/docs/forms.html#controlled-components) component.",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "arrayOf",
                "value": {
                  "name": "shape",
                  "value": {
                    "label": {
                      "name": "string",
                      "required": true
                    },
                    "value": {
                      "name": "string",
                      "required": true
                    }
                  }
                }
              },
              {
                "name": "shape",
                "value": {
                  "label": {
                    "name": "string",
                    "required": true
                  },
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              }
            ]
          },
          "required": false
        },
        "asyncOptions": {
          "description": "If provided Dropdown will work in async mode. Can be either promise or callback",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "func"
              },
              {
                "name": "shape",
                "value": {
                  "then": {
                    "name": "func",
                    "required": true
                  },
                  "catch": {
                    "name": "func",
                    "required": true
                  }
                }
              }
            ]
          },
          "required": false
        },
        "cacheOptions": {
          "description": "If set to true, fetched async options will be cached",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "defaultOptions": {
          "description": "If set, `asyncOptions` will be invoked with its value on mount and the resolved results will be loaded",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "bool"
              },
              {
                "name": "arrayOf",
                "value": {
                  "name": "object"
                }
              }
            ]
          },
          "required": false
        },
        "isVirtualized": {
          "description": "If set to true, the menu will use virtualization. Virtualized async works only with",
          "type": {
            "name": "bool"
          },
          "required": false
        },
        "menuPortalTarget": {
          "description": "Whether the menu should use a portal, and where it should attach",
          "type": {
            "name": "union",
            "value": [
              {
                "name": "element"
              },
              {
                "name": "object"
              }
            ]
          },
          "required": false
        },
        "maxMenuHeight": {
          "description": "Maximum height of the menu before scrolling",
          "type": {
            "name": "number"
          },
          "required": false
        },
        "isOptionSelected": {
          "description": "Override the built-in logic to detect whether an option is selected.",
          "type": {
            "name": "func"
          },
          "required": false
        }
      }
    }
  ],
  "src/components/DialogContentContainer/DialogContentContainer.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DialogContentContainer",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "getTestId(ComponentDefaultTestId.DIALOG_CONTENT_CONTAINER, id)",
            "computed": true
          }
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "ariaLabelledby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "ariaDescribedby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "DialogType"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogType.POPOVER",
            "computed": true
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "DialogSize"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogSize.MEDIUM",
            "computed": true
          }
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Clickable/Clickable.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Clickable",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "elementType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "keyof JSX.IntrinsicElements | string",
            "elements": [
              {
                "name": "JSX.IntrinsicElements"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "The type of the clickable element wrapper (for example div or span)",
          "defaultValue": {
            "value": "\"div\"",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "AriaRole"
          },
          "description": "",
          "defaultValue": {
            "value": "\"button\"",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "enableTextSelection": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "onMouseEnter": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "onMouseLeave": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ariaHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Is the element and its content should be hidden from screen readers and other assistive technologies"
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"0\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        }
      }
    }
  ],
  "src/components/Divider/Divider.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Divider",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "undefined",
            "computed": true
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "direction": {
          "required": false,
          "tsType": {
            "name": "DirectionType"
          },
          "description": "",
          "defaultValue": {
            "value": "DirectionType.HORIZONTAL",
            "computed": true
          }
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "withoutMargin": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/EditableInput/EditableInput.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "EditableInput",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "inputType": {
          "required": false,
          "tsType": {
            "name": "InputType"
          },
          "description": "",
          "defaultValue": {
            "value": "InputType.INPUT",
            "computed": true
          }
        },
        "autoSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "autoComplete": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "maxLength": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "shouldFocusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "textareaSubmitOnEnter": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "customColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "isValidValue": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": ""
        },
        "onFinishEditing": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent | React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "union",
                    "raw": "React.KeyboardEvent | React.FocusEvent",
                    "elements": [
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "ReactFocusEvent",
                        "raw": "React.FocusEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onArrowKeyDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "HTMLInputElement | HTMLTextAreaElement",
                        "elements": [
                          {
                            "name": "HTMLInputElement"
                          },
                          {
                            "name": "HTMLTextAreaElement"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onKeyPress": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "selectOnMount": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "ignoreBlurClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onIgnoreBlurEvent": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onCancelEditing": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onError": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onSuccess": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onKeyDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent, value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onTabHandler": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/EditableText/EditableText.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "EditableText",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Value of the text"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the current value changes to a non-empty value"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent | React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.KeyboardEvent | React.MouseEvent",
                    "elements": [
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the component gets clicked"
        },
        "readOnly": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disables editing mode - component will be just a typography element"
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Shown in edit mode when the text value is empty"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA Label"
        },
        "isEditMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the mode of the component (i.e. view/edit mode)"
        },
        "onEditModeChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(isEditMode: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isEditMode"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called when the mode of the component changes"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": "Override Tooltip props when needed"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "TextType"
          },
          "description": "Sets the Text type\n@type {TextType}",
          "defaultValue": {
            "value": "Text.types.TEXT2",
            "computed": true
          }
        },
        "weight": {
          "required": false,
          "tsType": {
            "name": "TextWeight"
          },
          "description": "Sets the Text weight\n@type {TextWeight}",
          "defaultValue": {
            "value": "Text.weights.NORMAL",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/EditableTypography/EditableTypography.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "EditableTypography",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Value of the text"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the current value changes to a non-empty value"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent | React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.KeyboardEvent | React.MouseEvent",
                    "elements": [
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the component gets clicked"
        },
        "readOnly": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disables editing mode - component will be just a typography element",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Shown in edit mode when the text value is empty"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA Label",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "isEditMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the mode of the component (i.e. view/edit mode)"
        },
        "onEditModeChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(isEditMode: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isEditMode"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called when the mode of the component changes"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": "Override Tooltip props when needed"
        },
        "component": {
          "required": true,
          "tsType": {
            "name": "ElementType"
          },
          "description": "A typography component that is being rendered in view mode"
        },
        "typographyClassName": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Controls the style of the typography component in view mode"
        },
        "clearable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Shows placeholder when empty, if provided"
        }
      }
    }
  ],
  "src/components/EditableHeading/EditableHeading.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "EditableHeading",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": "Value of the text"
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the current value changes to a non-empty value"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent | React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.KeyboardEvent | React.MouseEvent",
                    "elements": [
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called whenever the component gets clicked"
        },
        "readOnly": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Disables editing mode - component will be just a typography element"
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Shown in edit mode when the text value is empty"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA Label"
        },
        "isEditMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Controls the mode of the component (i.e. view/edit mode)"
        },
        "onEditModeChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(isEditMode: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isEditMode"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Will be called when the mode of the component changes"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": "Override Tooltip props when needed"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "HeadingType"
          },
          "description": "Sets the Heading type\n@type {HeadingType}",
          "defaultValue": {
            "value": "Heading.types.H1",
            "computed": true
          }
        },
        "weight": {
          "required": false,
          "tsType": {
            "name": "HeadingWeight"
          },
          "description": "Sets the Heading weight\n@type {HeadingWeight}",
          "defaultValue": {
            "value": "Heading.weights.NORMAL",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/FieldLabel/FieldLabel.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "FieldLabel",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "labelText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "labelFor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "labelClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "requiredAsterisk": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/FormattedNumber/FormattedNumber.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "FormattedNumber",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "A numeric value to format."
        },
        "prefix": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "If included, will be added as a prefix to the number."
        },
        "suffix": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "If included, will be added as a suffix to the number."
        },
        "emptyPlaceHolder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The text that will be shown if no value is provided.",
          "defaultValue": {
            "value": "\"N/A\"",
            "computed": false
          }
        },
        "decimalPrecision": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Determines the number of decimal numbers (0 ~ 20).",
          "defaultValue": {
            "value": "2",
            "computed": false
          }
        },
        "compact": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Format number into compact number and initial (if required).",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "local": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Determines the number's local (Unicode BCP 47 locale identifier).",
          "defaultValue": {
            "value": "FormattedNumber.localFallBack",
            "computed": true
          }
        },
        "rtl": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Determines suffix and prefix location"
        }
      }
    }
  ],
  "src/components/Icon/Icon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Icon",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "(_event: React.MouseEvent) => {}",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "We support three types of icons - SVG, FONT and SRC (classname) so this prop is either the name of the icon or the component",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "clickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Is icon is a button",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "iconLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "mo   * Icon aria label [aria label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)"
        },
        "iconType": {
          "required": false,
          "tsType": {
            "name": "IconType"
          },
          "description": "The type of the component - svg, font or custom svg (using [`react-inlinesvg`](https://github.com/gilbarbara/react-inlinesvg#readme))",
          "defaultValue": {
            "value": "IconType.SVG",
            "computed": true
          }
        },
        "iconSize": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "Size for font icon",
          "defaultValue": {
            "value": "16",
            "computed": false
          }
        },
        "ignoreFocusStyle": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Remove focus style",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tabindex": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        },
        "ariaHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Hide icon asset from screen reader. No need to set value for this prop when `clickable` is false"
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "useCurrentColor": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "When using svg from src (Icon.type.SRC) this boolean will transform the \"fill\" property to \"currentColor\"",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "customColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Override the default color with a custom one"
        }
      }
    }
  ],
  "src/components/ExpandCollapse/ExpandCollapse.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ExpandCollapse",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "headerComponentRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => ReactElement",
            "signature": {
              "arguments": [],
              "return": {
                "name": "ReactElement"
              }
            }
          },
          "description": "Component as parameter to be rendered as header",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "headerClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name to add to the header of the expandable"
        },
        "contentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name to add to the content of the expandable"
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name to add to the component"
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "Header title",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "The value of the expandable section"
        },
        "iconSize": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "The expand icon font size",
          "defaultValue": {
            "value": "24",
            "computed": false
          }
        },
        "defaultOpenState": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should be open or closed by default (when rendered)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "hideBorder": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Flex/Flex.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Flex",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "object"
          },
          "description": ""
        },
        "direction": {
          "required": false,
          "tsType": {
            "name": "FlexDirection"
          },
          "description": "",
          "defaultValue": {
            "value": "Flex.directions.ROW",
            "computed": true
          }
        },
        "elementType": {
          "required": false,
          "tsType": {
            "name": "ReactElementType",
            "raw": "React.ElementType"
          },
          "description": "",
          "defaultValue": {
            "value": "\"div\"",
            "computed": false
          }
        },
        "wrap": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ElementContent | ElementContent[]",
            "elements": [
              {
                "name": "union",
                "raw": "ReactNode | ReactNode[]",
                "elements": [
                  {
                    "name": "ReactNode"
                  },
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "ReactNode"
                      }
                    ],
                    "raw": "ReactNode[]"
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ReactNode | ReactNode[]",
                    "elements": [
                      {
                        "name": "ReactNode"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "ReactNode"
                          }
                        ],
                        "raw": "ReactNode[]"
                      }
                    ]
                  }
                ],
                "raw": "ElementContent[]"
              }
            ]
          },
          "description": ""
        },
        "justify": {
          "required": false,
          "tsType": {
            "name": "FlexJustify"
          },
          "description": "",
          "defaultValue": {
            "value": "Flex.justify.START",
            "computed": true
          }
        },
        "align": {
          "required": false,
          "tsType": {
            "name": "FlexAlign"
          },
          "description": "",
          "defaultValue": {
            "value": "Flex.align.CENTER",
            "computed": true
          }
        },
        "gap": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "FlexGap | number",
            "elements": [
              {
                "name": "FlexGap"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "Flex.gaps.NONE",
            "computed": true
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick function - MouseEvent"
        },
        "ariaLabelledby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly"
        }
      }
    }
  ],
  "src/components/HiddenText/HiddenText.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "HiddenText",
      "props": {
        "className": {
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          },
          "required": false
        },
        "id": {
          "defaultValue": {
            "value": "\"hiddenText\"",
            "computed": false
          },
          "required": false
        }
      }
    }
  ],
  "src/components/IconButton/IconButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "IconButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to be added to the element"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback function when clicking the icon button",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the class name of the button wrapper"
        },
        "iconClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the class name of the button icon"
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to be rendered",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M10.75 6C10.75 5.58579 10.4142 5.25 10 5.25C9.58579 5.25 9.25 5.58579 9.25 6V9.25H6C5.58579 9.25 5.25 9.58579 5.25 10C5.25 10.4142 5.58579 10.75 6 10.75H9.25V14C9.25 14.4142 9.58579 14.75 10 14.75C10.4142 14.75 10.75 14.4142 10.75 14V10.75H14C14.4142 10.75 14.75 10.4142 14.75 10C14.75 9.58579 14.4142 9.25 14 9.25H10.75V6Z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "a11y property to be added, used for screen reader to know what kind of button it is"
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "a11y property to be added, used for screen reader to know if the button is expanded"
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "a11y property to be added, used for screen reader to know if the button is hidden"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof SIZES)[keyof typeof SIZES]"
          },
          "description": "Size of the icon",
          "defaultValue": {
            "value": "IconButton.sizes.MEDIUM",
            "computed": true
          }
        },
        "hideTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the tooltip should be displayed or not",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": "Props for Tooltip component",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "tooltipContent": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Tooltip wraps the button icon, it will display in the tooltip, if not present the aria label will be shown"
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "Kind of button - like <Button />",
          "defaultValue": {
            "value": "IconButton.kinds.TERTIARY",
            "computed": true
          }
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disabled state",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabledReason": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "if disabled - this will be shown in the tooltip"
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        }
      }
    }
  ],
  "src/components/Label/Label.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Label",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "labelClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for an inner text wrapper"
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "LabelKind"
          },
          "description": "",
          "defaultValue": {
            "value": "LabelKind.FILL",
            "computed": true
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "LabelColor"
          },
          "description": "",
          "defaultValue": {
            "value": "LabelColor.PRIMARY",
            "computed": true
          }
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "isAnimationDisabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "isLegIncluded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLSpanElement, MouseEvent>",
                    "elements": [
                      {
                        "name": "HTMLSpanElement"
                      },
                      {
                        "name": "MouseEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/LegacyEditableHeading/LegacyEditableHeading.tsx": [
    {
      "description": "@deprecated - use EditableHeading from 'monday-ui-react-core/next'",
      "methods": [],
      "displayName": "LegacyEditableHeading",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "inputType": {
          "required": false,
          "tsType": {
            "name": "InputType"
          },
          "description": ""
        },
        "autoSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "autoComplete": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "maxLength": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "shouldFocusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "textareaSubmitOnEnter": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "customColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "isValidValue": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": ""
        },
        "onFinishEditing": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent | React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "union",
                    "raw": "React.KeyboardEvent | React.FocusEvent",
                    "elements": [
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      },
                      {
                        "name": "ReactFocusEvent",
                        "raw": "React.FocusEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onArrowKeyDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "HTMLInputElement | HTMLTextAreaElement",
                        "elements": [
                          {
                            "name": "HTMLInputElement"
                          },
                          {
                            "name": "HTMLTextAreaElement"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onKeyPress": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "selectOnMount": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "ignoreBlurClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onIgnoreBlurEvent": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onCancelEditing": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onError": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onSuccess": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onKeyDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent, value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onTabHandler": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "HeadingTypes"
          },
          "description": ""
        },
        "ellipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "ellipsisMaxLines": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "suggestEditOnHover": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "nonEllipsisTooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Tooltip to show when no overflow"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "Sizes"
          },
          "description": ""
        },
        "highlightTerm": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": ""
        },
        "displayPlaceholderInTextMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "inputAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "errorClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "headingClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "inputClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "editing": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "errorClassTimeout": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "onStartEditing": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "tooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "contentRenderer": {
          "required": false,
          "tsType": {
            "name": "ReactFC",
            "raw": "React.FC"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Label/Leg.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Leg"
    }
  ],
  "src/components/Link/Link.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Link",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for overriding link text styles"
        },
        "href": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Specifies the location (URL) of the external resource",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The link text",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "rel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Defines the relationship between a linked resource and the current document",
          "defaultValue": {
            "value": "\"noreferrer\"",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick function - MouseEvent",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "target": {
          "required": false,
          "tsType": {
            "name": "LinkTarget"
          },
          "description": "Specifies where to open the linked document",
          "defaultValue": {
            "value": "Link.targets.NEW_WINDOW",
            "computed": true
          }
        },
        "ariaLabelDescription": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Aria label description",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "ariaDescribedby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Identifies the element (or elements) that describes the element on which the attribute is set.",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to add to the link element",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconPosition": {
          "required": false,
          "tsType": {
            "name": "IconPosition"
          },
          "description": "the position of the icon in relation to the etext",
          "defaultValue": {
            "value": "Link.position.START",
            "computed": true
          }
        },
        "disableNavigation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disable navigation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "inheritFontSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "inherit text size",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "inlineText": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "if the link is in part of other text content",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/List/List.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "List",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "component": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ListWrapperComponentType | ListWrapperComponentStringType",
            "elements": [
              {
                "name": "ListWrapperComponentType"
              },
              {
                "name": "union",
                "raw": "\"div\" | \"nav\" | \"ul\" | \"ol\"",
                "elements": [
                  {
                    "name": "literal",
                    "value": "\"div\""
                  },
                  {
                    "name": "literal",
                    "value": "\"nav\""
                  },
                  {
                    "name": "literal",
                    "value": "\"ul\""
                  },
                  {
                    "name": "literal",
                    "value": "\"ol\""
                  }
                ]
              }
            ]
          },
          "description": "the wrapping component to wrap the List Items [div, nav, ul, ol]",
          "defaultValue": {
            "value": "List.components.UL",
            "computed": true
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA label string to describe to list"
        },
        "ariaDescribedBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA described by string to reference an id to describe by"
        },
        "aria-controls": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-controls\"]",
            "raw": "AriaAttributes[\"aria-controls\"]"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement<ListItemProps | ListTitleProps> | ReactElement<ListItemProps | ListTitleProps>[]",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ListItemProps | ListTitleProps",
                    "elements": [
                      {
                        "name": "ListItemProps"
                      },
                      {
                        "name": "ListTitleProps"
                      }
                    ]
                  }
                ],
                "raw": "ReactElement<ListItemProps | ListTitleProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "ListItemProps | ListTitleProps",
                        "elements": [
                          {
                            "name": "ListItemProps"
                          },
                          {
                            "name": "ListTitleProps"
                          }
                        ]
                      }
                    ],
                    "raw": "ReactElement<ListItemProps | ListTitleProps>"
                  }
                ],
                "raw": "ReactElement<ListItemProps | ListTitleProps>[]"
              }
            ]
          },
          "description": ""
        },
        "renderOnlyVisibleItems": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Using virtualized list for rendering only the items which visible to the user in any given user (performance optimization)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "CSSProperties"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ListItemAvatar/ListItemAvatar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ListItemAvatar",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "component": {
          "required": false,
          "tsType": {
            "name": "ListItemComponentType"
          },
          "description": "the ListItem component [li, div, a]",
          "defaultValue": {
            "value": "ListItemAvatar.components.DIV",
            "computed": true
          }
        },
        "src": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "avatarClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ListItem/ListItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ListItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A class name to be passed to the list item wrapper"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "An id to be passed to the list item wrapper"
        },
        "component": {
          "required": false,
          "tsType": {
            "name": "ListItemComponentType"
          },
          "description": "the ListItem component [li, div, a]",
          "defaultValue": {
            "value": "ListItem.components.DIV",
            "computed": true
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "The textual content of the list item"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.KeyboardEvent, id: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "id"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "A callback function which is being called when the item is being clicked\nIt will be called with the following params\nevent (DomEvent)\nid (the id which is being passed)\nonClick(event, id)",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onHover": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.FocusEvent, id: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.FocusEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactFocusEvent",
                        "raw": "React.FocusEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "id"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "A callback function which is being called when the item is being hovered\nIt will be called with the following params\nevent (DomEvent)\nid (the id which is being passed)\nonHover(event, id)",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disabled state - callback will not be called and navigation will be skipped",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "selected": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Selected indication"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof SIZES)[keyof typeof SIZES]"
          },
          "description": "The size of the list item",
          "defaultValue": {
            "value": "SIZES.SMALL",
            "computed": true
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Tabindex is used for keyboard navigation - if you want to skip \"Tab navigation\" please pass -1.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "aria-current": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-current\"]",
            "raw": "AriaAttributes[\"aria-current\"]"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ListItemIcon/ListItemIcon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ListItemIcon",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "component": {
          "required": false,
          "tsType": {
            "name": "ListItemComponentType"
          },
          "description": "the ListItem component [li, div, a]",
          "defaultValue": {
            "value": "ListItemIcon.components.DIV",
            "computed": true
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "margin": {
          "required": false,
          "tsType": {
            "name": "ListItemIconMargin"
          },
          "description": "the position of the icon inside the list item (this sets the margins of the icon)",
          "defaultValue": {
            "value": "ListItemIcon.margin.START",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/ButtonGroup/ButtonGroup.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ButtonGroup",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "options": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  icon?: SubIcon;\n  leftIcon?: SubIcon;\n  ariaLabel?: string;\n  subText?: string;\n  value: ButtonValue;\n  text: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "icon",
                      "value": {
                        "name": "union",
                        "raw": "string | React.FC<IconSubComponentProps> | null",
                        "elements": [
                          {
                            "name": "string"
                          },
                          {
                            "name": "ReactFC",
                            "raw": "React.FC<IconSubComponentProps>",
                            "elements": [
                              {
                                "name": "IconSubComponentProps"
                              }
                            ]
                          },
                          {
                            "name": "null"
                          }
                        ],
                        "required": false
                      }
                    },
                    {
                      "key": "leftIcon",
                      "value": {
                        "name": "union",
                        "raw": "string | React.FC<IconSubComponentProps> | null",
                        "elements": [
                          {
                            "name": "string"
                          },
                          {
                            "name": "ReactFC",
                            "raw": "React.FC<IconSubComponentProps>",
                            "elements": [
                              {
                                "name": "IconSubComponentProps"
                              }
                            ]
                          },
                          {
                            "name": "null"
                          }
                        ],
                        "required": false
                      }
                    },
                    {
                      "key": "ariaLabel",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "subText",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "value",
                      "value": {
                        "name": "union",
                        "raw": "string | number",
                        "elements": [
                          {
                            "name": "string"
                          },
                          {
                            "name": "number"
                          }
                        ],
                        "required": true
                      }
                    },
                    {
                      "key": "text",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "disabled",
                      "value": {
                        "name": "boolean",
                        "required": false
                      }
                    },
                    {
                      "key": "tooltipContent",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "Array<ButtonGroupOption>"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | number",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "onSelect": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: ButtonValue, name: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "string | number",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "number"
                      }
                    ]
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "name"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"small\"",
            "computed": false
          }
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ButtonType.SECONDARY | ButtonType.TERTIARY",
            "elements": [
              {
                "name": "ButtonType.SECONDARY"
              },
              {
                "name": "ButtonType.TERTIARY"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "ButtonType.SECONDARY",
            "computed": true
          }
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "groupAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ..."
        },
        "tooltipHideDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "tooltipShowDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "tooltipContainerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipMoveBy": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  main?: number;\n  secondary?: number;\n}",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Loader/Loader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Loader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "svgClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "typeof LoaderSizes | number",
            "elements": [
              {
                "name": "LoaderSizes"
              },
              {
                "name": "number"
              }
            ]
          },
          "description": "The loader's size: `number` or `LoaderSizes`"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "LoaderColors"
          },
          "description": ""
        },
        "hasBackground": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ListTitle/ListTitle.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ListTitle",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/MenuButton/MenuButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Control the button's selected state"
        },
        "openDialogComponentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name to add to the button when the dialog is open"
        },
        "component": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(() => JSX.Element) | React.ElementType",
            "elements": [
              {
                "name": "unknown"
              },
              {
                "name": "ReactElementType",
                "raw": "React.ElementType"
              }
            ]
          },
          "description": "Receives React Component",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M6 10.5C6 11.3284 5.32843 12 4.5 12 3.67157 12 3 11.3284 3 10.5 3 9.67157 3.67157 9 4.5 9 5.32843 9 6 9.67157 6 10.5zM11.8333 10.5C11.8333 11.3284 11.1618 12 10.3333 12 9.50492 12 8.83334 11.3284 8.83334 10.5 8.83334 9.67157 9.50492 9 10.3333 9 11.1618 9 11.8333 9.67157 11.8333 10.5zM17.6667 10.5C17.6667 11.3284 16.9951 12 16.1667 12 15.3383 12 14.6667 11.3284 14.6667 10.5 14.6667 9.67157 15.3383 9 16.1667 9 16.9951 9 17.6667 9.67157 17.6667 10.5z\"\n      fill=\"currentColor\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "MenuButtonSize"
          },
          "description": "",
          "defaultValue": {
            "value": "MenuButtonSize.SMALL",
            "computed": true
          }
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "zIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Menu\"",
            "computed": false
          }
        },
        "closeDialogOnContentClick": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated use closeMenuOnItemClick instead",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dialogClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dialogOffset": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  main?: number;\n  secondary?: number;\n}",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "main - `dialogOffset.main` - main axis offset; `dialogOffset.secondary` secondary axis offset",
          "defaultValue": {
            "value": "{ main: 8, secondary: 0 }",
            "computed": false
          }
        },
        "dialogPaddingSize": {
          "required": false,
          "tsType": {
            "name": "DialogSize"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogContentContainer.sizes.MEDIUM",
            "computed": true
          }
        },
        "dialogPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "Dialog.positions.BOTTOM_START",
            "computed": true
          }
        },
        "dialogShowTriggerIgnoreClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dialogHideTriggerIgnoreClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dialogContainerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the container selector in which to append the dialog\nfor examples: \"body\" , \".my-class\", \"#my-id\""
        },
        "startingEdge": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Dialog Alignment",
          "defaultValue": {
            "value": "\"bottom\"",
            "computed": false
          }
        },
        "onMenuShow": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onMenuHide": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Text to be displayed after the icon"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipContent": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "removeTabCloseTrigger": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Remove \"Tab\" key from the hide trigger",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipTriggers": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | HideShowEvent[]",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "HideShowEvent[]"
              }
            ]
          },
          "description": "is an array with the content of types:\n   CLICK, CLICK_OUTSIDE, ESCAPE_KEY, TAB_KEY, MOUSE_ENTER, MOUSE_LEAVE,\n   ENTER, MOUSE_DOWN, FOCUS, BLUR, CONTENT_CLICK",
          "defaultValue": {
            "value": "[MenuButton.hideTriggers.MOUSE_LEAVE]",
            "computed": false
          }
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "the disabled/tooltip position of the menu button - one of the MenuButton.dialogPositions",
          "defaultValue": {
            "value": "MenuButton.dialogPositions.RIGHT",
            "computed": true
          }
        },
        "tooltipReferenceClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Tooltip Element Wrapper ClassName"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": ""
        },
        "hideWhenReferenceHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "When the MenuButton is hidden hide the dialog and tooltip as well",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabledReason": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use tooltipContent instead"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "componentPosition": {
          "required": false,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof MenuButtonComponentPosition)[keyof typeof MenuButtonComponentPosition]"
          },
          "description": "Specifies whether to render the component before or after the text",
          "defaultValue": {
            "value": "MenuButton.componentPositions.START",
            "computed": true
          }
        },
        "triggerElement": {
          "required": false,
          "tsType": {
            "name": "ReactElementType",
            "raw": "React.ElementType"
          },
          "description": "Element to be used as the trigger element for the Menu - default is button",
          "defaultValue": {
            "value": "\"button\"",
            "computed": false
          }
        },
        "closeMenuOnItemClick": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Close the menu when an item is clicked"
        },
        "showTooltipOnlyOnTriggerElement": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether tooltip should appear only when the trigger element is hovered and not the menu dialog"
        }
      }
    }
  ],
  "src/components/MultiStepIndicator/MultiStepIndicator.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MultiStepIndicator",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "steps": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  titleText: string;\n  subtitleText: string;\n  status: StepStatus;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "titleText",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "subtitleText",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "status",
                      "value": {
                        "name": "StepStatus",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "Step[]"
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "MultiStepType"
          },
          "description": "",
          "defaultValue": {
            "value": "MultiStepType.PRIMARY",
            "computed": true
          }
        },
        "stepComponentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dividerComponentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "fulfilledStepIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M8.53033 14.2478L8 13.7175L7.46967 14.2478C7.76256 14.5407 8.23744 14.5407 8.53033 14.2478ZM8 12.6569L4.53033 9.18718C4.23744 8.89429 3.76256 8.89429 3.46967 9.18718C3.17678 9.48008 3.17678 9.95495 3.46967 10.2478L7.46967 14.2478L8 13.7175L8.53033 14.2478L16.2478 6.53033C16.5407 6.23743 16.5407 5.76256 16.2478 5.46967C15.955 5.17677 15.4801 5.17677 15.1872 5.46967L8 12.6569Z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "fulfilledStepIconType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "IconType.SVG | IconType.ICON_FONT",
            "elements": [
              {
                "name": "IconType.SVG"
              },
              {
                "name": "IconType.ICON_FONT"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "IconType.SVG",
            "computed": true
          }
        },
        "isFulfilledStepDisplayNumber": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(stepNumber: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepNumber"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "textPlacement": {
          "required": false,
          "tsType": {
            "name": "TextPlacement"
          },
          "description": "",
          "defaultValue": {
            "value": "TextPlacement.HORIZONTAL",
            "computed": true
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "Size"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/RadioButton/RadioButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "RadioButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class to be added to wrapping component"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "labelClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class to add to the  text/label"
        },
        "radioButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class to be added to the radiobutton"
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "text value",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The input control's value. When specified in the HTML, this is the initial value, and from then on it can be altered or retrieved at any time using JavaScript to access the respective HTMLInputElement object's value property. The value attribute is always optional, though should be considered mandatory for checkbox, radio, and hidden.l",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted.",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "is disabled",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabledReason": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "why the input is disabled"
        },
        "defaultChecked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "default checked value",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "onSelect": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.ChangeEvent<HTMLInputElement | null>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactChangeEvent",
                    "raw": "React.ChangeEvent<HTMLInputElement | null>",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "HTMLInputElement | null",
                        "elements": [
                          {
                            "name": "HTMLInputElement"
                          },
                          {
                            "name": "null"
                          }
                        ]
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback function when value changed"
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "controlled the radio button state"
        },
        "retainChildClick": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "react to click on children",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "childrenTabIndex": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "add tab index to the children",
          "defaultValue": {
            "value": "\"0\"",
            "computed": false
          }
        },
        "noLabelAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disabled animation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Refable/Refable.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Refable"
    }
  ],
  "src/components/LegacySearch/LegacySearch.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Search",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"search\"",
            "computed": false
          }
        },
        "secondaryIconName": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M6.53033 5.46967C6.23744 5.17678 5.76256 5.17678 5.46967 5.46967C5.17678 5.76256 5.17678 6.23744 5.46967 6.53033L8.62562 9.68628L5.47045 12.8415C5.17756 13.1343 5.17756 13.6092 5.47045 13.9021C5.76334 14.195 6.23822 14.195 6.53111 13.9021L9.68628 10.7469L12.8415 13.9021C13.1343 14.195 13.6092 14.195 13.9021 13.9021C14.195 13.6092 14.195 13.1343 13.9021 12.8415L10.7469 9.68628L13.9029 6.53033C14.1958 6.23744 14.1958 5.76256 13.9029 5.46967C13.61 5.17678 13.1351 5.17678 12.8422 5.46967L9.68628 8.62562L6.53033 5.46967Z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "iconName": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M8.65191 2.37299C6.9706 2.37299 5.35814 3.04089 4.16927 4.22976C2.9804 5.41863 2.3125 7.03108 2.3125 8.7124C2.3125 10.3937 2.9804 12.0062 4.16927 13.195C5.35814 14.3839 6.9706 15.0518 8.65191 15.0518C10.0813 15.0518 11.4609 14.5691 12.5728 13.6939L16.4086 17.5303C16.7014 17.8232 17.1763 17.8232 17.4692 17.5303C17.7621 17.2375 17.7622 16.7626 17.4693 16.4697L13.6334 12.6333C14.5086 11.5214 14.9913 10.1418 14.9913 8.7124C14.9913 7.03108 14.3234 5.41863 13.1346 4.22976C11.9457 3.04089 10.3332 2.37299 8.65191 2.37299ZM12.091 12.1172C12.9878 11.2113 13.4913 9.98783 13.4913 8.7124C13.4913 7.42891 12.9815 6.19798 12.0739 5.29042C11.1663 4.38285 9.9354 3.87299 8.65191 3.87299C7.36842 3.87299 6.1375 4.38285 5.22993 5.29042C4.32237 6.19798 3.8125 7.42891 3.8125 8.7124C3.8125 9.99589 4.32237 11.2268 5.22993 12.1344C6.1375 13.0419 7.36842 13.5518 8.65191 13.5518C9.92736 13.5518 11.1509 13.0483 12.0568 12.1514C12.0623 12.1455 12.0679 12.1397 12.0737 12.134C12.0794 12.1283 12.0851 12.1227 12.091 12.1172Z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "autoFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "debounceRate": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "200",
            "computed": false
          }
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "setRef": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "autoComplete": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"off\"",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof BASE_SIZES)[keyof typeof BASE_SIZES]"
          },
          "description": "",
          "defaultValue": {
            "value": "\"medium\"",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "SearchType"
          },
          "description": "",
          "defaultValue": {
            "value": "SearchType.SQUARE",
            "computed": true
          }
        },
        "validation": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "| {\n    status: \"error\" | \"success\";\n    text: string;\n  }\n| { text: string }",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  status: \"error\" | \"success\";\n  text: string;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "status",
                      "value": {
                        "name": "union",
                        "raw": "\"error\" | \"success\"",
                        "elements": [
                          {
                            "name": "literal",
                            "value": "\"error\""
                          },
                          {
                            "name": "literal",
                            "value": "\"success\""
                          }
                        ],
                        "required": true
                      }
                    },
                    {
                      "key": "text",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ text: string }",
                "signature": {
                  "properties": [
                    {
                      "key": "text",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "inputAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "searchResultsContainerId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "activeDescendant": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconNames": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  layout: string;\n  primary: string;\n  secondary: string;\n}",
            "signature": {
              "properties": [
                {
                  "key": "layout",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                },
                {
                  "key": "primary",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              ]
            }
          },
          "description": "",
          "defaultValue": {
            "value": "{\n  layout: \"\",\n  primary: \"Search\",\n  secondary: \"Clear Search\"\n}",
            "computed": false
          }
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "shows loading animation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/SplitButton/SplitButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SplitButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the button"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "activeButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "The button's kind"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to run when the button is clicked"
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "blurOnMouseUp": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Blur on button click"
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Name of the button - for form submit usages"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "The button's size"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ButtonInputType"
          },
          "description": "The button's type"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the button should be disabled or not"
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right"
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left"
        },
        "success": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the success props are used when you have async action and wants to display a success message"
        },
        "successIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Success icon name"
        },
        "successText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Success text"
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "loading boolean which switches the text to a loader"
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "displays the active state"
        },
        "marginRight": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the right"
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the left"
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the button accordingly"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria label to provide important when providing only Icon"
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "ReactHTMLProps[\"aria-haspopup\"]",
            "raw": "React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"]"
          },
          "description": "aria for a button popup"
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "aria to be set if the popup is open"
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria controls - receives id for the controlled region"
        },
        "aria-describedby": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-describedby\"]",
            "raw": "AriaAttributes[\"aria-describedby\"]"
          },
          "description": ""
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "aria to be used for screen reader to know if the button is hidden"
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Focus callback"
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Blur callback"
        },
        "rightFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "leftFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "preventClickAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "noSidePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "defaultTextColorOnPrimaryColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)"
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it"
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        },
        "secondaryDialogContent": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | (() => string | ReactElement)",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": ""
        },
        "onSecondaryDialogDidShow": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onSecondaryDialogDidHide": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "zIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "secondaryDialogClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "secondaryDialogPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogPosition.BOTTOM_START",
            "computed": true
          }
        },
        "dialogPaddingSize": {
          "required": false,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof DialogContentContainer.sizes)[keyof typeof DialogContentContainer.sizes]"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogContentContainer.sizes.MEDIUM",
            "computed": true
          }
        },
        "dialogContainerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the container selector in which to append the dialog\nfor examples: \"body\" , \".my-class\", \"#my-id\""
        },
        "shouldCloseOnClickInsideDialog": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Steps/Steps.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Steps",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "activeStepIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The index of the current displayed step",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "onChangeActiveStep": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent, stepIndex: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepIndex"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "A callback which called when the active step is changed",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "areNavigationButtonsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "steps": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement"
              }
            ],
            "raw": "ReactElement[]"
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "StepsType"
          },
          "description": "",
          "defaultValue": {
            "value": "StepsType.GALLERY",
            "computed": true
          }
        },
        "isOnPrimary": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - Use color instead",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": ""
        },
        "isContentOnTop": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "areButtonsIconsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "backButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "nextButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "finishButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "onFinish": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent | React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "e"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Skeleton/Skeleton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Skeleton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "SkeletonType"
          },
          "description": "",
          "defaultValue": {
            "value": "SkeletonType.RECTANGLE",
            "computed": true
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "TextSkeletonSize | typeof SKELETON_CUSTOM_SIZE",
            "elements": [
              {
                "name": "TextSkeletonSize"
              },
              {
                "name": "SKELETON_CUSTOM_SIZE"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"custom\"",
            "computed": false
          }
        },
        "width": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "height": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "fullWidth": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Is the skeleton wrapper width equal to its container",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Steps/StepsCommand.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepsCommand",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isNext": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onChangeActiveStep": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent, newStepIndex: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "newStepIndex"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "activeStepIndex": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "stepsCount": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "isIconHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "buttonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": "",
          "defaultValue": {
            "value": "StepsColor.PRIMARY",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Steps/StepsDot.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepsDot",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "ariaCurrent": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "StepsDotAriaCurrent | boolean",
            "elements": [
              {
                "name": "StepsDotAriaCurrent"
              },
              {
                "name": "boolean"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "StepsDotAriaCurrent.STEP",
            "computed": true
          }
        },
        "isActive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Steps/StepsHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepsHeader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": true,
          "tsType": {
            "name": "StepsType"
          },
          "description": ""
        },
        "activeStepIndex": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "onChangeActiveStep": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent, stepIndex: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepIndex"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "stepsCount": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "areNavigationButtonsHidden": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "backButtonProps": {
          "required": true,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "nextButtonProps": {
          "required": true,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "finishButtonProps": {
          "required": true,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "areButtonsIconsHidden": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": "",
          "defaultValue": {
            "value": "StepsColor.PRIMARY",
            "computed": true
          }
        },
        "onFinish": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Steps/StepsGalleryHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepsGalleryHeader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "activeStepIndex": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "stepsCount": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "onChangeActiveStep": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent, stepIndex: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepIndex"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "stepDescriptionFunc": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(stepIndex: number) => string",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepIndex"
                }
              ],
              "return": {
                "name": "string"
              }
            }
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/Slider.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Slider",
      "props": {
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Define a string that labels the current element (Slider)"
        },
        "ariaLabelledby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ElementId of Node that have the text needed for labeling the current element (Slider)"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom `class name` to be added to the component-root-node"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "SliderColor"
          },
          "description": "Color Mode (primary/positive/negative) of the component (Slider)"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)",
          "defaultValue": {
            "value": "\"monday-slider\"",
            "computed": false
          }
        },
        "defaultValue": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | number[]",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "number"
                  }
                ],
                "raw": "number[]"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If set to true, Component (Slider) will be disabled\n - impossible to change value of component (Slider)\n - visual changes (opacity)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Attribute `id` to be added to the component-root-node"
        },
        "max": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Max range value of the component (Slider)",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "min": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Min range value of the component (Slider)",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: number | number[]) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "number | number[]",
                    "elements": [
                      {
                        "name": "number"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "number"
                          }
                        ],
                        "raw": "number[]"
                      }
                    ]
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Optional onChange callback (for outer trigger or Controlled mode)\n- required in Controlled Mode",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "ranged": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true switch slider to RRange mode (two Thumbs)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "step": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The granularity with which the slider can step through values.\n(A \"discrete\" slider.) The min prop serves as the origin for the valid values.\nWe recommend (max - min) to be evenly divisible by the step.",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "showValue": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Always show `value` instead of Tooltip",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof Slider.sizes)[keyof typeof Slider.sizes]"
          },
          "description": "Size small/medium/large of the component (Slider)",
          "defaultValue": {
            "value": "Slider.sizes.SMALL",
            "computed": true
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | number[]",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "number"
                  }
                ],
                "raw": "number[]"
              }
            ]
          },
          "description": "Current/selected value of the range of the Component (Slider)\n  - should be used in Controlled Mode only\n  - in ranged mode should be an array of two numbers"
        },
        "valueFormatter": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: number) => string",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "string"
              }
            }
          },
          "description": "Function to format the value, e.g. add %. By default, returns `${value}%`",
          "defaultValue": {
            "value": "(value: number) => `${value}%`",
            "computed": false
          }
        },
        "valueText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Text/presentation of current/selected value\n - should be used in Controlled Mode only"
        },
        "indicateSelection": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Show selected from Slider range value",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "prefix": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "{ icon: IconType } | string | ((value: number, valueText: string) => void) | ReactElement",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{ icon: IconType }",
                "signature": {
                  "properties": [
                    {
                      "key": "icon",
                      "value": {
                        "name": "IconType",
                        "required": true
                      }
                    }
                  ]
                }
              },
              {
                "name": "string"
              },
              {
                "name": "unknown"
              },
              {
                "name": "ReactElement"
              }
            ]
          },
          "description": "Options for initial/start/prefix element, it can be one of:\n - Any Component (react component, node, text, number etc.)\n - Or it can be an object of options for Icons component (see Icon components props)\n - Or it can be an object for Label (Icon, Heading - and other components)\n - Or it can be Render Props Function witch are getting value and valueText"
        },
        "postfix": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "{ icon: IconType } | string | ((value: number, valueText: string) => void) | ReactElement",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{ icon: IconType }",
                "signature": {
                  "properties": [
                    {
                      "key": "icon",
                      "value": {
                        "name": "IconType",
                        "required": true
                      }
                    }
                  ]
                }
              },
              {
                "name": "string"
              },
              {
                "name": "unknown"
              },
              {
                "name": "ReactElement"
              }
            ]
          },
          "description": "Options for postfix/end/finishing element. Same as prefix element."
        },
        "selectionIndicatorWidth": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Width of SelectionIndicator (i.e. TextField)",
          "defaultValue": {
            "value": "\"60px\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Heading/Heading.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Heading",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "element": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The element tag of the text component"
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "The textual content"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "TypographyColor"
          },
          "description": ""
        },
        "align": {
          "required": false,
          "tsType": {
            "name": "TypographyAlign"
          },
          "description": ""
        },
        "ellipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "When the text is too long, cut the end of the text and display instead of it three dots (...)"
        },
        "maxLines": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Use this prop combined with the boolean ellipsis prop for truncate the text and add an ellipsis after a certain number of lines"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "All props are passed to the tooltip displayed when hovering over the text. By default, the tooltip will display when text contains an ellipsis and will show the full text"
        },
        "withoutTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Hide tooltip when hovering the text, by default the tooltip swill display when text contains an ellipsis"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "HeadingType"
          },
          "description": "",
          "defaultValue": {
            "value": "HeadingType.H1",
            "computed": true
          }
        },
        "weight": {
          "required": false,
          "tsType": {
            "name": "HeadingWeight"
          },
          "description": "",
          "defaultValue": {
            "value": "HeadingWeight.NORMAL",
            "computed": true
          }
        }
      },
      "composes": ["HTMLAttributes"]
    }
  ],
  "src/components/Switch/Switch.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Switch",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ariaLabelledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "inputClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "defaultChecked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactElement",
            "elements": [
              {
                "name": "MockToggleProps"
              }
            ],
            "raw": "ReactElement<MockToggleProps>"
          },
          "description": ""
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SelectionIndicator.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SelectionIndicator",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "InfixKind"
          },
          "description": "",
          "defaultValue": {
            "value": "InfixKind.PREFIX",
            "computed": true
          }
        },
        "key": {
          "required": false,
          "tsType": {
            "name": "InfixKind"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/LegacyHeading/LegacyHeading.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LegacyHeading",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "HeadingTypes"
          },
          "description": "",
          "defaultValue": {
            "value": "HeadingTypes.h1",
            "computed": true
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "ellipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "ellipsisMaxLines": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "suggestEditOnHover": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "nonEllipsisTooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Tooltip to show when no overflow",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "Sizes"
          },
          "description": "",
          "defaultValue": {
            "value": "HeadingSizes.LARGE",
            "computed": true
          }
        },
        "highlightTerm": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "customColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "CSSProperties"
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SliderInfix.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderInfix",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "InfixKind"
          },
          "description": "kind (type/mode) of Infix prefix/postfix\nInfix - additional inserted by Consumer - component/string/number etc.",
          "defaultValue": {
            "value": "SliderInfix.kinds.PREFIX",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Text/Text.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Text",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "element": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The element tag of the text component",
          "defaultValue": {
            "value": "\"div\"",
            "computed": false
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": "The textual content"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "TypographyColor"
          },
          "description": ""
        },
        "align": {
          "required": false,
          "tsType": {
            "name": "TypographyAlign"
          },
          "description": ""
        },
        "ellipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "When the text is too long, cut the end of the text and display instead of it three dots (...)"
        },
        "maxLines": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Use this prop combined with the boolean ellipsis prop for truncate the text and add an ellipsis after a certain number of lines"
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "All props are passed to the tooltip displayed when hovering over the text. By default, the tooltip will display when text contains an ellipsis and will show the full text"
        },
        "withoutTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Hide tooltip when hovering the text, by default the tooltip swill display when text contains an ellipsis"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "TextType"
          },
          "description": "",
          "defaultValue": {
            "value": "TextType.TEXT2",
            "computed": true
          }
        },
        "weight": {
          "required": false,
          "tsType": {
            "name": "TextWeight"
          },
          "description": "",
          "defaultValue": {
            "value": "TextWeight.NORMAL",
            "computed": true
          }
        }
      },
      "composes": ["HTMLAttributes"]
    }
  ],
  "src/components/TextWithHighlight/TextWithHighlight.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TextWithHighlight",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Text to wrap",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "highlightTerm": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "limit": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Number of highlighted parts"
        },
        "ignoreCase": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "useEllipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should use ellipsis",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "allowTermSplit": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Allow highlight every word as a separate term",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "linesToClamp": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "3",
            "computed": false
          }
        },
        "nonEllipsisTooltip": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Tooltip to show when there is no overflow"
        },
        "wrappingTextTag": {
          "required": false,
          "tsType": {
            "name": "JSX.IntrinsicElements"
          },
          "description": "HTML tag to wrap the selected text",
          "defaultValue": {
            "value": "\"em\"",
            "computed": false
          }
        },
        "wrappingElementClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ThemeProvider/ThemeProvider.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ThemeProvider",
      "props": {
        "theme": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  /**\n   * The name of the theme - name of css class that will be added to the children - should be unique\n   */\n  name: string;\n  colors: SystemThemeColorMap;\n}",
            "signature": {
              "properties": [
                {
                  "key": "name",
                  "value": {
                    "name": "string",
                    "required": true
                  },
                  "description": "The name of the theme - name of css class that will be added to the children - should be unique"
                },
                {
                  "key": "colors",
                  "value": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  [key in SystemTheme]?: ThemeColorTokenValueMap;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": {
                            "name": "SystemTheme",
                            "required": false
                          },
                          "value": {
                            "name": "union",
                            "raw": "ThemeColorTokenValue | ThemeCustomClassValue",
                            "elements": [
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{\n  [key in ThemeColor]?: string;\n}",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "ThemeColor",
                                        "required": false
                                      },
                                      "value": {
                                        "name": "string"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{\n  [key: string]: ThemeColorTokenValue | ThemeCustomClassValue;\n}",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "string"
                                      },
                                      "value": {
                                        "name": "union",
                                        "raw": "ThemeColorTokenValue | ThemeCustomClassValue",
                                        "elements": [
                                          {
                                            "name": "signature",
                                            "type": "object",
                                            "raw": "{\n  [key in ThemeColor]?: string;\n}",
                                            "signature": {
                                              "properties": [
                                                {
                                                  "key": {
                                                    "name": "ThemeColor",
                                                    "required": false
                                                  },
                                                  "value": {
                                                    "name": "string"
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "name": "ThemeCustomClassValue"
                                          }
                                        ],
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "required": true
                  }
                }
              ]
            }
          },
          "description": "@deprecated use themeConfig instead"
        },
        "themeConfig": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  /**\n   * The name of the theme - name of css class that will be added to the children - should be unique\n   */\n  name: string;\n  colors: SystemThemeColorMap;\n}",
            "signature": {
              "properties": [
                {
                  "key": "name",
                  "value": {
                    "name": "string",
                    "required": true
                  },
                  "description": "The name of the theme - name of css class that will be added to the children - should be unique"
                },
                {
                  "key": "colors",
                  "value": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  [key in SystemTheme]?: ThemeColorTokenValueMap;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": {
                            "name": "SystemTheme",
                            "required": false
                          },
                          "value": {
                            "name": "union",
                            "raw": "ThemeColorTokenValue | ThemeCustomClassValue",
                            "elements": [
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{\n  [key in ThemeColor]?: string;\n}",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "ThemeColor",
                                        "required": false
                                      },
                                      "value": {
                                        "name": "string"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "name": "signature",
                                "type": "object",
                                "raw": "{\n  [key: string]: ThemeColorTokenValue | ThemeCustomClassValue;\n}",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": {
                                        "name": "string"
                                      },
                                      "value": {
                                        "name": "union",
                                        "raw": "ThemeColorTokenValue | ThemeCustomClassValue",
                                        "elements": [
                                          {
                                            "name": "signature",
                                            "type": "object",
                                            "raw": "{\n  [key in ThemeColor]?: string;\n}",
                                            "signature": {
                                              "properties": [
                                                {
                                                  "key": {
                                                    "name": "ThemeColor",
                                                    "required": false
                                                  },
                                                  "value": {
                                                    "name": "string"
                                                  }
                                                }
                                              ]
                                            }
                                          },
                                          {
                                            "name": "ThemeCustomClassValue"
                                          }
                                        ],
                                        "required": true
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "required": true
                  }
                }
              ]
            }
          },
          "description": "The theme config to apply, consists of a \"name\" - the name of css class that will be added to the children, which should be unique, and the object of colors overrides for each system theme."
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": "The children to render with the theme"
        },
        "themeClassSpecifier": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "String which adds up to theme name selector to make it more specific (in case if themeConfig.name is colliding with some other class name)"
        },
        "systemTheme": {
          "required": false,
          "tsType": {
            "name": "SystemTheme"
          },
          "description": "The system theme to apply to the body element on mount, if there is no theme class name on the body element already"
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ClassName to add to the wrapping div"
        }
      }
    }
  ],
  "src/components/TextField/TextField.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TextField",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"input\"",
            "computed": false
          }
        },
        "placeholder": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "autoComplete": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete for all of the available options",
          "defaultValue": {
            "value": "\"off\"",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: string, event: Pick<React.ChangeEvent, \"target\">) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "string"
                  },
                  "name": "value"
                },
                {
                  "type": {
                    "name": "Pick",
                    "elements": [
                      {
                        "name": "ReactChangeEvent",
                        "raw": "React.ChangeEvent"
                      },
                      {
                        "name": "literal",
                        "value": "\"target\""
                      }
                    ],
                    "raw": "Pick<React.ChangeEvent, \"target\">"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onKeyDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onWheel": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.WheelEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactWheelEvent",
                    "raw": "React.WheelEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "debounceRate": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "autoFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "readonly": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "setRef": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(node: HTMLElement) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "HTMLElement"
                  },
                  "name": "node"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "iconName": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "secondaryIconName": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof BASE_SIZES)[keyof typeof BASE_SIZES] | keyof typeof OLD_TEXT_FIELD_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof BASE_SIZES)[keyof typeof BASE_SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_TEXT_FIELD_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "s"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "l"
                  }
                ]
              }
            ]
          },
          "description": "SIZES is exposed on the component itself",
          "defaultValue": {
            "value": "TextField.sizes.SMALL",
            "computed": true
          }
        },
        "validation": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{ status?: \"error\" | \"success\"; text?: string }",
            "signature": {
              "properties": [
                {
                  "key": "status",
                  "value": {
                    "name": "union",
                    "raw": "\"error\" | \"success\"",
                    "elements": [
                      {
                        "name": "literal",
                        "value": "\"error\""
                      },
                      {
                        "name": "literal",
                        "value": "\"success\""
                      }
                    ],
                    "required": false
                  }
                },
                {
                  "key": "text",
                  "value": {
                    "name": "string",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "Don't provide status for plain assistant text",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "onIconClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(icon: string | React.FunctionComponent | null) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "string | React.FunctionComponent | null",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "ReactFunctionComponent",
                        "raw": "React.FunctionComponent"
                      },
                      {
                        "name": "null"
                      }
                    ]
                  },
                  "name": "icon"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "clearOnIconClick": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "labelIconName": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent"
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "showCharCount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "inputAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "searchResultsContainerId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "activeDescendant": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconsNames": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  layout: string;\n  primary: string;\n  secondary: string;\n}",
            "signature": {
              "properties": [
                {
                  "key": "layout",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                },
                {
                  "key": "primary",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "string",
                    "required": true
                  }
                }
              ]
            }
          },
          "description": "Icon names labels for a11y",
          "defaultValue": {
            "value": "{ primary: \"\", secondary: \"\", layout: \"\" }",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "TextFieldTextType"
          },
          "description": "TEXT_TYPES is exposed on the component itself",
          "defaultValue": {
            "value": "TextFieldTextType.TEXT",
            "computed": true
          }
        },
        "maxLength": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "trim": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA role for container landmark",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "required": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds required to the input element",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "shows loading animation",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "requiredAsterisk": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "secondaryDataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "underline": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "withReadOnlyStyle": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Apply new style for read only, use along with `readonly` prop"
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenTitle.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenTitle",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenWizard.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenWizard",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "activeStepIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The index of the current displayed step"
        },
        "onChangeActiveStep": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent, stepIndex: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepIndex"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "A callback which called when the active step is changed"
        },
        "areNavigationButtonsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "steps": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement"
              }
            ],
            "raw": "ReactElement[]"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "StepsType"
          },
          "description": ""
        },
        "isOnPrimary": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - Use color instead"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": ""
        },
        "isContentOnTop": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "areButtonsIconsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "backButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "nextButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "finishButtonProps": {
          "required": false,
          "tsType": {
            "name": "ButtonProps"
          },
          "description": ""
        },
        "onFinish": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent | React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "e"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "titleClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Classname for overriding TipseenTitle styles"
        }
      }
    }
  ],
  "src/components/Tipseen/Tipseen.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Tipseen",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "titleClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Classname for overriding TipseenTitle styles"
        },
        "position": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "DialogPosition.BOTTOM",
            "computed": true
          }
        },
        "animationType": {
          "required": false,
          "tsType": {
            "name": "AnimationType"
          },
          "description": "",
          "defaultValue": {
            "value": "AnimationType.EXPAND",
            "computed": true
          }
        },
        "hideDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "showDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isCloseButtonHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use hideCloseButton instead"
        },
        "hideCloseButton": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactElement"
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "containerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "hideTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | Array<HideShowEvent>",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "Array<HideShowEvent>"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "showTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | Array<HideShowEvent>",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "Array<HideShowEvent>"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "justify": {
          "required": false,
          "tsType": {
            "name": "JustifyType"
          },
          "description": "",
          "defaultValue": {
            "value": "JustifyType.CENTER",
            "computed": true
          }
        },
        "width": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "moveBy": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  main?: number;\n  secondary?: number;\n}",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": ""
        },
        "hideWhenReferenceHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "when false, the arrow of the tooltip is hidden",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "tooltipArrowClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for a tooltip's arrow"
        },
        "modifiers": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "Modifier",
                "elements": [
                  {
                    "name": "unknown"
                  }
                ],
                "raw": "Modifier<unknown>"
              }
            ],
            "raw": "Array<Modifier<unknown>>"
          },
          "description": "PopperJS Modifiers type\nhttps://popper.js.org/docs/v2/modifiers/",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "closeAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "content": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "closeButtonTheme": {
          "required": false,
          "tsType": {
            "name": "TipseenCloseButtonTheme"
          },
          "description": "Control the color of the Tipseen close button. Dark theme can be usfull while presenting bright images under the tipseen image",
          "defaultValue": {
            "value": "TipseenCloseButtonTheme.LIGHT",
            "computed": true
          }
        },
        "floating": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "TipseenColor"
          },
          "description": "The color of the Tipseen",
          "defaultValue": {
            "value": "TipseenColor.PRIMARY",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenBasicContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenBasicContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "titleClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ElementContent | ElementContent[]",
            "elements": [
              {
                "name": "union",
                "raw": "ReactNode | ReactNode[]",
                "elements": [
                  {
                    "name": "ReactNode"
                  },
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "ReactNode"
                      }
                    ],
                    "raw": "ReactNode[]"
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ReactNode | ReactNode[]",
                    "elements": [
                      {
                        "name": "ReactNode"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "ReactNode"
                          }
                        ],
                        "raw": "ReactNode[]"
                      }
                    ]
                  }
                ],
                "raw": "ElementContent[]"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Steps/StepsNumbersHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepsNumbersHeader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "activeStepIndex": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "stepsCount": {
          "required": true,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "StepsColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenImage.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenImage",
      "props": {
        "src": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | undefined",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "undefined"
              }
            ]
          },
          "description": ""
        },
        "alt": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tipseenMediaClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Toast/ToastHelpers.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "getIcon"
    }
  ],
  "src/components/Typography/Typography.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Typography",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "getTestId(ComponentDefaultTestId.TEXT, id)",
            "computed": true
          }
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "element": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The element tag of the text component",
          "defaultValue": {
            "value": "\"span\"",
            "computed": false
          }
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "The textual content"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "TypographyColor"
          },
          "description": "",
          "defaultValue": {
            "value": "TypographyColor.PRIMARY",
            "computed": true
          }
        },
        "align": {
          "required": false,
          "tsType": {
            "name": "TypographyAlign"
          },
          "description": "",
          "defaultValue": {
            "value": "TypographyAlign.START",
            "computed": true
          }
        },
        "ellipsis": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "When the text is too long, cut the end of the text and display instead of it three dots (...)",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "maxLines": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Use this prop combined with the boolean ellipsis prop for truncate the text and add an ellipsis after a certain number of lines",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
            "elements": [
              {
                "name": "TooltipBaseProps"
              },
              {
                "name": "unknown"
              }
            ]
          },
          "description": "All props are passed to the tooltip displayed when hovering over the text. By default, the tooltip will display when text contains an ellipsis and will show the full text"
        },
        "withoutTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Hide tooltip when hovering the text, by default the tooltip swill display when text contains an ellipsis",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      },
      "composes": ["HTMLAttributes"]
    }
  ],
  "src/components/Toast/Toast.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Toast",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "actions": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  type: ToastActionType;\n  content?: string;\n  text?: string;\n  href?: string;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "type",
                      "value": {
                        "name": "ToastActionType",
                        "required": true
                      }
                    },
                    {
                      "key": "content",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "text",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "href",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "ToastAction[]"
          },
          "description": ""
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, Toast is open (visible)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ToastType"
          },
          "description": "",
          "defaultValue": {
            "value": "ToastType.NORMAL",
            "computed": true
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Possible to override the default icon"
        },
        "hideIcon": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, won't show the icon",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "action": {
          "required": false,
          "tsType": {
            "name": "JSX.Element"
          },
          "description": "The action to display"
        },
        "closeable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If false, won't show the close button",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "autoHideDuration": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The number of milliseconds to wait before\nautomatically closing the Toast\n(0 or null cancels this behaviour)",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[] | string",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        },
        "closeButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Close\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Tooltip/Tooltip.tsx": [
    {
      "description": "",
      "methods": [
        {
          "name": "getContainer",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "renderTooltipContent",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "onTooltipShow",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "onTooltipHide",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "getTimeSinceLastTooltip",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "getShowDelay",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "displayName": "Tooltip",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "content": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "CSSProperties"
          },
          "description": ""
        },
        "arrowPosition": {
          "required": false,
          "tsType": {
            "name": "TooltipArrowPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "TooltipArrowPosition.CENTER",
            "computed": true
          }
        },
        "arrowClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for a tooltip's arrow"
        },
        "paddingSize": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "keyof typeof BASE_SIZES_WITH_NONE",
            "elements": [
              {
                "name": "literal",
                "value": "NONE"
              },
              {
                "name": "literal",
                "value": "SMALL"
              },
              {
                "name": "literal",
                "value": "MEDIUM"
              },
              {
                "name": "literal",
                "value": "LARGE"
              }
            ]
          },
          "description": ""
        },
        "moveBy": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  main?: number;\n  secondary?: number;\n}",
            "signature": {
              "properties": [
                {
                  "key": "main",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                },
                {
                  "key": "secondary",
                  "value": {
                    "name": "number",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": "How much to move the dialog in relative to children\nmain is the axis in which the position is aligned to\nsecondary is the vertical axes to the position",
          "defaultValue": {
            "value": "{ main: 4, secondary: 0 }",
            "computed": false
          }
        },
        "theme": {
          "required": false,
          "tsType": {
            "name": "TooltipTheme"
          },
          "description": "",
          "defaultValue": {
            "value": "TooltipTheme.Dark",
            "computed": true
          }
        },
        "justify": {
          "required": false,
          "tsType": {
            "name": "JustifyType"
          },
          "description": "",
          "defaultValue": {
            "value": "Tooltip.justifyTypes.CENTER",
            "computed": true
          }
        },
        "getContainer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => HTMLElement",
            "signature": {
              "arguments": [],
              "return": {
                "name": "HTMLElement"
              }
            }
          },
          "description": ""
        },
        "hideDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "how much delay should the Dialog wait until it should trigger the hide in MS",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "showDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "how much delay should the Dialog wait until it should trigger the show in MS",
          "defaultValue": {
            "value": "300",
            "computed": false
          }
        },
        "disableDialogSlide": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "animationType": {
          "required": false,
          "tsType": {
            "name": "AnimationType"
          },
          "description": "",
          "defaultValue": {
            "value": "AnimationType.EXPAND",
            "computed": true
          }
        },
        "withoutDialog": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "containerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "the container selector in which to append the dialog\nfor examples: \"body\" , \".my-class\", \"#my-id\"",
          "defaultValue": {
            "value": "\"#tooltips-container\"",
            "computed": false
          }
        },
        "immediateShowDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "With which delay tooltip is going to be shown"
        },
        "tip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "when false, the arrow of the tooltip is hidden",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "shouldShowOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Show the Dialog when the children is mounting"
        },
        "hideWhenReferenceHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onTooltipHide": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onTooltipShow": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "modifiers": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "Modifier",
                "elements": [
                  {
                    "name": "unknown"
                  }
                ],
                "raw": "Modifier<unknown>"
              }
            ],
            "raw": "Array<Modifier<unknown>>"
          },
          "description": "PopperJS Modifiers type\nhttps://popper.js.org/docs/v2/modifiers/",
          "defaultValue": {
            "value": "new Array<Modifier<unknown>>()",
            "computed": false
          }
        },
        "position": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...",
          "defaultValue": {
            "value": "Tooltip.positions.TOP",
            "computed": true
          }
        },
        "showTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | Array<HideShowEvent>",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "Array<HideShowEvent>"
              }
            ]
          },
          "description": "an array of hide/show trigger - Tooltip.hideShowTriggers",
          "defaultValue": {
            "value": "Tooltip.hideShowTriggers.MOUSE_ENTER",
            "computed": true
          }
        },
        "hideTrigger": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "HideShowEvent | Array<HideShowEvent>",
            "elements": [
              {
                "name": "HideShowEvent"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "HideShowEvent"
                  }
                ],
                "raw": "Array<HideShowEvent>"
              }
            ]
          },
          "description": "an array of hide/show trigger - Tooltip.hideShowTriggers",
          "defaultValue": {
            "value": "Tooltip.hideShowTriggers.MOUSE_LEAVE",
            "computed": true
          }
        },
        "showOnDialogEnter": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If true, prevents open Tooltip from closing on mouseEnter and closes Tooltip, when mouse leaves it",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "referenceWrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "A Classname to be added to <spam> element which wraps the children",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "addKeyboardHideShowTriggersByDefault": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Treats keyboard focus/blur events as mouse-enter/mouse-leave events",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "set the state of the tooltip - open/close - controlled component",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "zIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Overwrites z-index of the tooltip"
        },
        "withMaxWidth": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Limit tooltip to 240px"
        }
      }
    }
  ],
  "src/components/Toggle/MockToggle.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MockToggle",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "areLabelsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "checked": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "offOverrideText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onOverrideText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "selectedClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Toggle/Toggle.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Toggle",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "toggleSelectedClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ClassName to override styles of selected toggle"
        },
        "isDefaultSelected": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "isSelected": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isDisabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use disabled instead"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "areLabelsHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onOverrideText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"On\"",
            "computed": false
          }
        },
        "offOverrideText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Off\"",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/VirtualizedList/VirtualizedList.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "VirtualizedList",
      "props": {
        "scrollableClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class name to add to the component scrollable container"
        },
        "layout": {
          "required": false,
          "tsType": {
            "name": "Layout"
          },
          "description": "Layout/orientation of the list.\nAcceptable values are:\n- \"vertical\" (default) - Up/down scrolling.\n- \"horizontal\" - Left/right scrolling.",
          "defaultValue": {
            "value": "\"vertical\"",
            "computed": false
          }
        },
        "items": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  value?: string | Record<string, unknown>;\n  height?: number;\n  width?: number;\n  id?: string;\n  offsetTop?: number;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "value",
                      "value": {
                        "name": "union",
                        "raw": "string | Record<string, unknown>",
                        "elements": [
                          {
                            "name": "string"
                          },
                          {
                            "name": "Record",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "unknown"
                              }
                            ],
                            "raw": "Record<string, unknown>"
                          }
                        ],
                        "required": false
                      }
                    },
                    {
                      "key": "height",
                      "value": {
                        "name": "number",
                        "required": false
                      }
                    },
                    {
                      "key": "width",
                      "value": {
                        "name": "number",
                        "required": false
                      }
                    },
                    {
                      "key": "id",
                      "value": {
                        "name": "string",
                        "required": false
                      }
                    },
                    {
                      "key": "offsetTop",
                      "value": {
                        "name": "number",
                        "required": false
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "VirtualizedListItem[]"
          },
          "description": "A list of items to be rendered",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "itemRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: VirtualizedListItem, index: number, style: CSSProperties) => ReactElement | JSX.Element",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | Record<string, unknown>;\n  height?: number;\n  width?: number;\n  id?: string;\n  offsetTop?: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | Record<string, unknown>",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "Record",
                                "elements": [
                                  {
                                    "name": "string"
                                  },
                                  {
                                    "name": "unknown"
                                  }
                                ],
                                "raw": "Record<string, unknown>"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "offsetTop",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "CSSProperties"
                  },
                  "name": "style"
                }
              ],
              "return": {
                "name": "union",
                "raw": "ReactElement | JSX.Element",
                "elements": [
                  {
                    "name": "ReactElement"
                  },
                  {
                    "name": "JSX.Element"
                  }
                ]
              }
            }
          },
          "description": "Will return the element which represent an item in the virtualized list.\nReturns `JSX.Element`\n@param item - item data\n@param _index - item index\n@param style - item style, must be injected to the item element wrapper for correct presentation of the item",
          "defaultValue": {
            "value": "(item: VirtualizedListItem, _index: number, _style: CSSProperties) => item",
            "computed": false
          }
        },
        "getItemHeight": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: VirtualizedListItem, index: number) => number",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | Record<string, unknown>;\n  height?: number;\n  width?: number;\n  id?: string;\n  offsetTop?: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | Record<string, unknown>",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "Record",
                                "elements": [
                                  {
                                    "name": "string"
                                  },
                                  {
                                    "name": "unknown"
                                  }
                                ],
                                "raw": "Record<string, unknown>"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "offsetTop",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "number"
              }
            }
          },
          "description": "Deprecated - use getItemSize\nin order to calculate the number of items to render, the component needs the height of the items\nreturn `number`",
          "defaultValue": {
            "value": "(item: VirtualizedListItem, _index: number) => item.height",
            "computed": false
          }
        },
        "getItemSize": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: VirtualizedListItem, index: number) => number",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | Record<string, unknown>;\n  height?: number;\n  width?: number;\n  id?: string;\n  offsetTop?: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | Record<string, unknown>",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "Record",
                                "elements": [
                                  {
                                    "name": "string"
                                  },
                                  {
                                    "name": "unknown"
                                  }
                                ],
                                "raw": "Record<string, unknown>"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "offsetTop",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "number"
              }
            }
          },
          "description": "in order to calculate the number of items to render, the component needs the width/height of the items (according to layout)\nreturn `number`",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "getItemId": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: VirtualizedListItem, index: number) => string",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value?: string | Record<string, unknown>;\n  height?: number;\n  width?: number;\n  id?: string;\n  offsetTop?: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "union",
                            "raw": "string | Record<string, unknown>",
                            "elements": [
                              {
                                "name": "string"
                              },
                              {
                                "name": "Record",
                                "elements": [
                                  {
                                    "name": "string"
                                  },
                                  {
                                    "name": "unknown"
                                  }
                                ],
                                "raw": "Record<string, unknown>"
                              }
                            ],
                            "required": false
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": false
                          }
                        },
                        {
                          "key": "offsetTop",
                          "value": {
                            "name": "number",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "string"
              }
            }
          },
          "description": "returns Id of an items\nreturns `string`",
          "defaultValue": {
            "value": "(item: VirtualizedListItem, _index: number) => item.id",
            "computed": false
          }
        },
        "onScrollToFinished": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when the scroll is finished",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "overscanCount": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "number of items to render (below/above the fold)",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "scrollDuration": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "the speed of the scroll (in ms)",
          "defaultValue": {
            "value": "200",
            "computed": false
          }
        },
        "onItemsRendered": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "({\n  firstItemId,\n  secondItemId,\n  lastItemId,\n  centerItemId,\n  firstItemOffsetEnd,\n  currentOffsetTop\n}: {\n  firstItemId: string;\n  secondItemId: string;\n  lastItemId: string;\n  centerItemId: string;\n  firstItemOffsetEnd: number;\n  currentOffsetTop: number;\n}) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  firstItemId: string;\n  secondItemId: string;\n  lastItemId: string;\n  centerItemId: string;\n  firstItemOffsetEnd: number;\n  currentOffsetTop: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "firstItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "secondItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "lastItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "centerItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "firstItemOffsetEnd",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "currentOffsetTop",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  "name": ""
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "a callback that is being called when the items are rendered"
        },
        "onItemsRenderedThrottleMs": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "200",
            "computed": false
          }
        },
        "onSizeUpdate": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(width: number, height: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "width"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "height"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "when the list size changes - `=> (width, height)`",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "onVerticalScrollbarVisiblityChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Deprecated - use onLayoutDirectionScrollbarVisibilityChange",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "onLayoutDirectionScrollbarVisibilityChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback - called when the vertical/horizontal (depends on layout) scrollbar visibility changed",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "CSSProperties"
          },
          "description": "Custom style to pass to the component"
        },
        "scrollToId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "index of the item to scroll to"
        },
        "virtualListRef": {
          "required": false,
          "tsType": {
            "name": "ForwardedRef",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ],
            "raw": "ForwardedRef<HTMLElement>"
          },
          "description": ""
        },
        "onScroll": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ScrollDirection"
                  },
                  "name": "horizontalScrollDirection"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "scrollTop"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "scrollUpdateWasRequested"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      },
      "composes": ["VibeComponentProps"]
    }
  ],
  "src/components/Toggle/ToggleText.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ToggleText",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ColorPicker/ColorPicker.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ColorPicker",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ColorPickerValueOnly | ColorPickerArrayValueOnly",
            "elements": [
              {
                "name": "union",
                "raw": "CONTENT_COLORS_VALUES | string",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              {
                "name": "union",
                "raw": "CONTENT_COLORS_VALUES[] | string[]",
                "elements": [
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "unknown[number]",
                        "raw": "(typeof contentColors)[number]"
                      }
                    ],
                    "raw": "CONTENT_COLORS_VALUES[]"
                  },
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "string"
                      }
                    ],
                    "raw": "string[]"
                  }
                ]
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "onSave": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: ColorPickerArrayValueOnly) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "CONTENT_COLORS_VALUES[] | string[]",
                    "elements": [
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "unknown[number]",
                            "raw": "(typeof contentColors)[number]"
                          }
                        ],
                        "raw": "CONTENT_COLORS_VALUES[]"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "string"
                          }
                        ],
                        "raw": "string[]"
                      }
                    ]
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "ColorIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "SelectedIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "NoColorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Hide color icon",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M9.99869 2.45479C10.29 2.1796 10.7462 2.18205 11.0346 2.46035 11.8801 3.27645 12.629 4.18707 13.2665 5.17427 13.4912 5.52224 13.3913 5.98648 13.0433 6.21118 12.6953 6.43589 12.2311 6.33596 12.0064 5.98799 11.5642 5.30318 11.0625 4.65922 10.5075 4.06347 8.55502 6.10494 6.79968 9.10384 6.79968 12.2306 6.79968 12.6448 6.4639 12.9806 6.04968 12.9806 5.63547 12.9806 5.29968 12.6448 5.29968 12.2306 5.29968 8.25797 7.68621 4.63918 9.99869 2.45479zM14.0817 8.2783C14.4692 8.13179 14.902 8.3271 15.0485 8.71454 15.4712 9.83227 15.7016 11.0135 15.7298 12.2081 15.7548 12.9019 15.6367 13.5934 15.3829 14.2396 15.1285 14.8874 14.7432 15.4758 14.251 15.9679 13.7589 16.4601 13.1705 16.8454 12.5227 17.0998 11.881 17.3518 11.1947 17.47 10.5059 17.4472 9.21585 17.4632 7.96422 17.0068 6.98717 16.1636 6.67359 15.893 6.63877 15.4194 6.9094 15.1058 7.18003 14.7922 7.65362 14.7574 7.9672 15.028 8.67056 15.635 9.57259 15.9622 10.5015 15.9471 10.5148 15.9469 10.5281 15.9471 10.5414 15.9476 11.0307 15.9657 11.5186 15.8826 11.9744 15.7036 12.4302 15.5246 12.8441 15.2535 13.1904 14.9073 13.5366 14.561 13.8077 14.1471 13.9867 13.6913 14.1657 13.2355 14.2487 12.7477 14.2306 12.2583L14.2303 12.248 14.2303 12.248C14.2065 11.2211 14.0088 10.2058 13.6455 9.2451 13.499 8.85766 13.6943 8.42481 14.0817 8.2783zM17.3142 3.38282C17.6071 3.67571 17.6071 4.15058 17.3142 4.44348L4.53033 17.2274C4.23744 17.5203 3.76256 17.5203 3.46967 17.2274 3.17678 16.9345 3.17678 16.4596 3.46967 16.1667L16.2536 3.38282C16.5465 3.08992 17.0214 3.08992 17.3142 3.38282z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "colorStyle": {
          "required": false,
          "tsType": {
            "name": "ColorStyle"
          },
          "description": "",
          "defaultValue": {
            "value": "ColorStyle.REGULAR",
            "computed": true
          }
        },
        "noColorText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "shouldRenderIndicatorWithoutBackground": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isBlackListMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "colorsList": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "CONTENT_COLORS_VALUES[] | string[]",
            "elements": [
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  }
                ],
                "raw": "CONTENT_COLORS_VALUES[]"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "isMultiselect": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorSize": {
          "required": false,
          "tsType": {
            "name": "BaseSizes"
          },
          "description": "",
          "defaultValue": {
            "value": "BaseSizes.MEDIUM",
            "computed": true
          }
        },
        "numberOfColorsInLine": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "5",
            "computed": false
          }
        },
        "focusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorShape": {
          "required": false,
          "tsType": {
            "name": "ColorShapes"
          },
          "description": "",
          "defaultValue": {
            "value": "ColorShapes.SQUARE",
            "computed": true
          }
        },
        "forceUseRawColorList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Used to force the component render the colorList prop as is. Usually, this flag should not be used. It's intended only for edge cases.\nUsually, only \"monday colors\" will be rendered (unless blacklist mode is used). This flag will override this behavior."
        },
        "showColorNameTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Used to enable color name tooltip on each color in the component.\nWhen \"tooltipContentByColor\" is supplied, it will override the color name tooltip."
        }
      }
    }
  ],
  "src/components/Badge/Indicator/Indicator.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Indicator",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "IndicatorColor"
          },
          "description": "",
          "defaultValue": {
            "value": "IndicatorColor.NOTIFICATION",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Accordion/AccordionItem/AccordionItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AccordionItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "Header title",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "The value of the expandable section",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "iconSize": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "number | string",
            "elements": [
              {
                "name": "number"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "The expand icon font size",
          "defaultValue": {
            "value": "24",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On click callback"
        },
        "open": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onClickAccordionCallback": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "hideBorder": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "headerClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "contentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "expandCollapseComponentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/AlertBanner/AlertBannerLink/AlertBannerLink.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AlertBannerLink",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for overriding link text styles"
        },
        "href": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Specifies the location (URL) of the external resource"
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The link text"
        },
        "rel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Defines the relationship between a linked resource and the current document"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick function - MouseEvent"
        },
        "target": {
          "required": false,
          "tsType": {
            "name": "LinkTarget"
          },
          "description": "Specifies where to open the linked document"
        },
        "ariaLabelDescription": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Aria label description"
        },
        "ariaDescribedby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Identifies the element (or elements) that describes the element on which the attribute is set."
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly"
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to add to the link element"
        },
        "iconPosition": {
          "required": false,
          "tsType": {
            "name": "IconPosition"
          },
          "description": "the position of the icon in relation to the etext"
        },
        "disableNavigation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disable navigation"
        },
        "inheritFontSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "inherit text size"
        },
        "inlineText": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "if the link is in part of other text content"
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/AlertBanner/AlertBannerButton/AlertBannerButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AlertBannerButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the button"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "activeButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "The button's kind"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to run when the button is clicked"
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "blurOnMouseUp": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Blur on button click"
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Name of the button - for form submit usages"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "The button's size"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ButtonInputType"
          },
          "description": "The button's type"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the button should be disabled or not"
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right"
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left"
        },
        "success": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the success props are used when you have async action and wants to display a success message"
        },
        "successIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Success icon name"
        },
        "successText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Success text"
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "loading boolean which switches the text to a loader"
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "displays the active state"
        },
        "marginRight": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the right"
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the left",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the button accordingly"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria label to provide important when providing only Icon"
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "ReactHTMLProps[\"aria-haspopup\"]",
            "raw": "React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"]"
          },
          "description": "aria for a button popup"
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "aria to be set if the popup is open"
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria controls - receives id for the controlled region"
        },
        "aria-describedby": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-describedby\"]",
            "raw": "AriaAttributes[\"aria-describedby\"]"
          },
          "description": ""
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "aria to be used for screen reader to know if the button is hidden"
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Focus callback"
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Blur callback"
        },
        "rightFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "leftFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "preventClickAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "noSidePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "defaultTextColorOnPrimaryColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)"
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it"
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        },
        "isDarkBackground": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AlertBannerText",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/BreadcrumbsBar/BreadcrumbItem/BreadcrumbItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BreadcrumbItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The display text.",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should item be disabled."
        },
        "isDisabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use disabled instead"
        },
        "isClickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should item be clickable - this should be recieved from the breadcrumbsBar ( Navigation/Indication bar ).",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "link": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "If the item is clickable and the type of navigation is a link, this is the link"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "If the item is clickable and the type of navigation is a function, this is the function"
        },
        "isCurrent": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should be the current Item - mainly effects the item`s style.",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "An Icon - If no icon needed then should be left empty."
        }
      }
    }
  ],
  "src/components/AttentionBox/AttentionBoxLink/AttentionBoxLink.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "AttentionBoxLink",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for overriding link text styles"
        },
        "href": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Specifies the location (URL) of the external resource"
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The link text"
        },
        "rel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Defines the relationship between a linked resource and the current document"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick function - MouseEvent"
        },
        "target": {
          "required": false,
          "tsType": {
            "name": "LinkTarget"
          },
          "description": "Specifies where to open the linked document",
          "defaultValue": {
            "value": "Link.target.SELF",
            "computed": true
          }
        },
        "ariaLabelDescription": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Aria label description"
        },
        "ariaDescribedby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Identifies the element (or elements) that describes the element on which the attribute is set."
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly"
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to add to the link element"
        },
        "iconPosition": {
          "required": false,
          "tsType": {
            "name": "IconPosition"
          },
          "description": "the position of the icon in relation to the etext"
        },
        "disableNavigation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disable navigation"
        },
        "inheritFontSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "inherit text size"
        },
        "inlineText": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "if the link is in part of other text content"
        }
      }
    }
  ],
  "src/components/VirtualizedGrid/VirtualizedGrid.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "VirtualizedGrid",
      "props": {
        "items": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "value",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    },
                    {
                      "key": "height",
                      "value": {
                        "name": "number",
                        "required": true
                      }
                    },
                    {
                      "key": "width",
                      "value": {
                        "name": "number",
                        "required": true
                      }
                    },
                    {
                      "key": "id",
                      "value": {
                        "name": "string",
                        "required": true
                      }
                    }
                  ]
                }
              }
            ],
            "raw": "ItemType[]"
          },
          "description": "A list of items to be rendered\n{\n     item: ItemType,\n    index: number,\n    style: CSSProperties\n}[]",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "itemRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  item: ItemType,\n  index: number,\n  style: CSSProperties\n) => ItemType | ComponentType<GridChildComponentProps<ItemType>>",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "CSSProperties"
                  },
                  "name": "style"
                }
              ],
              "return": {
                "name": "union",
                "raw": "ItemType | ComponentType<GridChildComponentProps<ItemType>>",
                "elements": [
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  {
                    "name": "ComponentType",
                    "elements": [
                      {
                        "name": "GridChildComponentProps",
                        "elements": [
                          {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "value",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                },
                                {
                                  "key": "height",
                                  "value": {
                                    "name": "number",
                                    "required": true
                                  }
                                },
                                {
                                  "key": "width",
                                  "value": {
                                    "name": "number",
                                    "required": true
                                  }
                                },
                                {
                                  "key": "id",
                                  "value": {
                                    "name": "string",
                                    "required": true
                                  }
                                }
                              ]
                            }
                          }
                        ],
                        "raw": "GridChildComponentProps<ItemType>"
                      }
                    ],
                    "raw": "ComponentType<GridChildComponentProps<ItemType>>"
                  }
                ]
              }
            }
          },
          "description": "item render function\nreturns `JSX.Element`",
          "defaultValue": {
            "value": "(item: ItemType, _index: number, _style: CSSProperties) => item",
            "computed": false
          }
        },
        "getRowHeight": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => number",
            "signature": {
              "arguments": [],
              "return": {
                "name": "number"
              }
            }
          },
          "description": "in order to calculate the number of rows to render in the grid, the component needs the height of the row\nreturn `number`",
          "defaultValue": {
            "value": "() => 50",
            "computed": false
          }
        },
        "getColumnWidth": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => number",
            "signature": {
              "arguments": [],
              "return": {
                "name": "number"
              }
            }
          },
          "description": "in order to calculate the number of columns to render in the grid, the component needs the width of the column\nreturn `number`",
          "defaultValue": {
            "value": "() => 100",
            "computed": false
          }
        },
        "getItemId": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: ItemType, index: number) => string",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "value",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "height",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "width",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "id",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  "name": "item"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "string"
              }
            }
          },
          "description": "returns Id of an items\nreturns `string`",
          "defaultValue": {
            "value": "(item: ItemType, _index: number) => item.id",
            "computed": false
          }
        },
        "scrollToId": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "index of the item to scroll to",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "onScroll": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ScrollDirection"
                  },
                  "name": "horizontalScrollDirection"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "scrollTop"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "scrollUpdateWasRequested"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onScrollToFinished": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "callback to be called when the scroll is finished",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onItemsRendered": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "({\n  firstItemId,\n  secondItemId,\n  lastItemId,\n  centerItemId,\n  firstItemOffsetEnd,\n  currentOffsetTop\n}: {\n  firstItemId: string;\n  secondItemId: string;\n  lastItemId: string;\n  centerItemId: string;\n  firstItemOffsetEnd: number;\n  currentOffsetTop: number;\n}) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  firstItemId: string;\n  secondItemId: string;\n  lastItemId: string;\n  centerItemId: string;\n  firstItemOffsetEnd: number;\n  currentOffsetTop: number;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "firstItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "secondItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "lastItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "centerItemId",
                          "value": {
                            "name": "string",
                            "required": true
                          }
                        },
                        {
                          "key": "firstItemOffsetEnd",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        },
                        {
                          "key": "currentOffsetTop",
                          "value": {
                            "name": "number",
                            "required": true
                          }
                        }
                      ]
                    }
                  },
                  "name": ""
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "a callback that is being called when the items are rendered",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "onItemsRenderedThrottleMs": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "200",
            "computed": false
          }
        },
        "onSizeUpdate": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(width: number, height: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "width"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "height"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "when the grid size changes",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onVerticalScrollbarVisiblityChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "scrollableClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class name to add to the component scrollable container"
        }
      },
      "composes": ["VibeComponentProps"]
    }
  ],
  "src/components/Dialog/DialogContent/DialogContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DialogContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[]",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              }
            ]
          },
          "description": ""
        },
        "position": {
          "required": false,
          "tsType": {
            "name": "PopperJS.Placement"
          },
          "description": ""
        },
        "wrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isOpen": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "startingEdge": {
          "required": false,
          "tsType": {
            "name": "any"
          },
          "description": ""
        },
        "animationType": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"expand\"",
            "computed": false
          }
        },
        "onEsc": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactKeyboardEvent",
                    "raw": "React.KeyboardEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onMouseEnter": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onMouseLeave": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onClickOutside": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, hideShowEvent: HideShowEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "HideShowEvent"
                  },
                  "name": "hideShowEvent"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "showDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "styleObject": {
          "required": false,
          "tsType": {
            "name": "CSSProperties"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "isReferenceHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "hasTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disableOnClickOutside": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "containerSelector": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disableContainerScroll": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "boolean | string",
            "elements": [
              {
                "name": "boolean"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onContextMenu": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(e: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "e"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On context menu event (right click) outside of the dialog\n@param e",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/DatePicker/DateNavigationItem/DateNavigationItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DateNavigationItem",
      "props": {
        "kind": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "keyof typeof ICONS",
            "elements": [
              {
                "name": "literal",
                "value": "prev"
              },
              {
                "name": "literal",
                "value": "next"
              }
            ]
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/DatePicker/YearPicker/YearPicker.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "YearPicker",
      "props": {
        "selectedDate": {
          "required": false,
          "tsType": {
            "name": "moment.Moment"
          },
          "description": ""
        },
        "isYearBlocked": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(year: number) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "year"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": ""
        },
        "changeCurrentDate": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(date: Moment) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "moment.Moment"
                  },
                  "name": "date"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Accordion/Accordion/Accordion.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Accordion",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc.)",
          "defaultValue": {
            "value": "\"monday-accordion\"",
            "computed": false
          }
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "Array<ReactElement> | ReactElement",
            "elements": [
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "Array<ReactElement>"
              },
              {
                "name": "ReactElement"
              }
            ]
          },
          "description": "List of AccordionItems",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "allowMultiple": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "is allowed multiple opened accordion items",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "defaultIndex": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "number"
              }
            ],
            "raw": "Array<number>"
          },
          "description": "Array of initial expanded indexes",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/DatePicker/DatePickerHeader/DatePickerHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DatePickerHeader",
      "props": {
        "currentDate": {
          "required": true,
          "tsType": {
            "name": "moment.Moment"
          },
          "description": ""
        },
        "isMonthYearSelection": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onToggleMonthYearPicker": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "hideNavigationKeys": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Icon/CustomSvgIcon/CustomSvgIcon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "CustomSvgIcon",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "src": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | object",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "object"
              }
            ]
          },
          "description": ""
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "AriaRole"
          },
          "description": ""
        },
        "ariaHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "clickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "replaceToCurrentColor": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "customColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "ref": {
          "required": false,
          "tsType": {
            "name": "Ref",
            "elements": [
              {
                "name": "SVGElement"
              }
            ],
            "raw": "Ref<SVGElement>"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Icon/FontIcon/FontIcon.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "FontIcon",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLSpanElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLSpanElement>",
                    "elements": [
                      {
                        "name": "HTMLSpanElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "aria-label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "role": {
          "required": false,
          "tsType": {
            "name": "AriaRole"
          },
          "description": "",
          "defaultValue": {
            "value": "\"img\"",
            "computed": false
          }
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/DatePicker/YearPicker/YearsList.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "YearsList",
      "props": {
        "yearsItems": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "number"
              }
            ],
            "raw": "number[]"
          },
          "description": ""
        },
        "isYearBlocked": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(year: number) => boolean",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "year"
                }
              ],
              "return": {
                "name": "boolean"
              }
            }
          },
          "description": ""
        },
        "onSelect": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(year: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "year"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "selectedYear": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/List/VirtualizedListItems/VirtualizedListItems.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "VirtualizedListItems",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "React.ReactElement<ListItemProps | ListTitleProps> | React.ReactElement<ListItemProps | ListTitleProps>[]",
            "elements": [
              {
                "name": "ReactReactElement",
                "raw": "React.ReactElement<ListItemProps | ListTitleProps>",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ListItemProps | ListTitleProps",
                    "elements": [
                      {
                        "name": "ListItemProps"
                      },
                      {
                        "name": "ListTitleProps"
                      }
                    ]
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactReactElement",
                    "raw": "React.ReactElement<ListItemProps | ListTitleProps>",
                    "elements": [
                      {
                        "name": "union",
                        "raw": "ListItemProps | ListTitleProps",
                        "elements": [
                          {
                            "name": "ListItemProps"
                          },
                          {
                            "name": "ListTitleProps"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "raw": "React.ReactElement<ListItemProps | ListTitleProps>[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Menu/Menu/Menu.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Menu",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof SIZES)[keyof typeof SIZES]"
          },
          "description": "",
          "defaultValue": {
            "value": "Menu.sizes.MEDIUM",
            "computed": true
          }
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Menu\"",
            "computed": false
          }
        },
        "ariaDescribedBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "focusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "isVisible": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "onClose": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: CloseMenuOption) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  propagate?: boolean;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "propagate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "focusItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "-1",
            "computed": false
          }
        },
        "isSubMenu": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "useDocumentEventListeners": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "focusItemIndexOnMount": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "-1",
            "computed": false
          }
        },
        "shouldScrollMenu": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Menu/MenuItem/AvatarMenuItem.tsx": [
    {
      "description": "MenuItem with Avatar instead of Icon",
      "methods": [],
      "displayName": "AvatarMenuItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "avatarProps": {
          "required": false,
          "tsType": {
            "name": "AvatarProps"
          },
          "description": ""
        },
        "menuItemProps": {
          "required": false,
          "tsType": {
            "name": "MenuItemProps"
          },
          "description": ""
        },
        "isMenuChild": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isSelectable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Menu/MenuItemButton/MenuItemButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuItemButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "",
          "defaultValue": {
            "value": "MenuItemButton.kinds.PRIMARY",
            "computed": true
          }
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "activeItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "-1",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disableReason": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "DialogPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "MenuItemButton.tooltipPositions.RIGHT",
            "computed": true
          }
        },
        "tooltipShowDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "300",
            "computed": false
          }
        },
        "resetOpenSubMenuIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "setSubMenuIsOpenByIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number, isOpen: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isOpen"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "setActiveItemIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "menuRef": {
          "required": false,
          "tsType": {
            "name": "ReactRefObject",
            "raw": "React.RefObject<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": ""
        },
        "closeMenu": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "useDocumentEventListeners": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ElementContent | ElementContent[]",
            "elements": [
              {
                "name": "union",
                "raw": "ReactNode | ReactNode[]",
                "elements": [
                  {
                    "name": "ReactNode"
                  },
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "ReactNode"
                      }
                    ],
                    "raw": "ReactNode[]"
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ReactNode | ReactNode[]",
                    "elements": [
                      {
                        "name": "ReactNode"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "ReactNode"
                          }
                        ],
                        "raw": "ReactNode[]"
                      }
                    ]
                  }
                ],
                "raw": "ElementContent[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Menu/MenuGridItem/MenuGridItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuGridItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[]",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              }
            ]
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "if true, keyboard navigation will skip on this item. Also, this prop will be passed on to the child *",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "closeMenu": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: CloseMenuOption) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  propagate?: boolean;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "propagate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "a callback to close the wrapping menu *"
        },
        "activeItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "the currently active index of the wrapping menu *",
          "defaultValue": {
            "value": "-1",
            "computed": false
          }
        },
        "setActiveItemIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "getNextSelectableIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(activeItemIndex: number) => number",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "activeItemIndex"
                }
              ],
              "return": {
                "name": "number"
              }
            }
          },
          "description": ""
        },
        "getPreviousSelectableIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(activeItemIndex: number) => number",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "activeItemIndex"
                }
              ],
              "return": {
                "name": "number"
              }
            }
          },
          "description": ""
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "the index of this item *"
        },
        "isUnderSubMenu": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "true if this item is under a submenu, and not a top-level menu *",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "setSubMenuIsOpenByIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number, isOpen: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isOpen"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "useDocumentEventListeners": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Modal/ModalHeader/ModalHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ModalHeader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for the wrapper"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "/**\nID for the title, needed for accessibility. No need to provide it, it is being provided by the modal"
        },
        "title": {
          "required": true,
          "tsType": {
            "name": "ElementContent"
          },
          "description": "Heading of the modal - using string is a recommended standard, as it provides well-defined styles. Using it with JSX content should be according to design guidelines."
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ElementContent"
          },
          "description": "Slot for the heading of the modal for maximum flexibility. Using it should be according to design and typography guidelines"
        },
        "description": {
          "required": false,
          "tsType": {
            "name": "ElementContent"
          },
          "description": "Description of the modal - pure string description is a recommended standard, use JSX ability only if there is a need to add links",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to be rendered before the title"
        },
        "titleClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for the title"
        },
        "closeModal": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "closes the Modal. No need to provide it, it is being provided by the modal",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "descriptionClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for the description"
        },
        "iconSize": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Size of the icon",
          "defaultValue": {
            "value": "24",
            "computed": false
          }
        },
        "iconClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "class name for the icon"
        },
        "closeButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Aria label for the close button",
          "defaultValue": {
            "value": "\"close\"",
            "computed": false
          }
        },
        "hideCloseButton": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Should close button be hidden or not"
        }
      }
    }
  ],
  "src/components/Menu/MenuDivider/MenuDivider.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuDivider",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        }
      }
    }
  ],
  "src/components/Modal/ModalContent/ModalContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ModalContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[] | string",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Modal/ModalFooter/ModalFooter.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ModalFooter",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[] | string",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ProgressBars/PercentageLabel/PercentageLabel.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "PercentageLabel",
      "props": {
        "forElement": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Replacement to `htmlFor` | `for` attribute.",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Determine the displayed percentage.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "LinearProgressBar",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Set external styling to the progress bar."
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "barStyle": {
          "required": false,
          "tsType": {
            "name": "ProgressBarStyle"
          },
          "description": "Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).",
          "defaultValue": {
            "value": "ProgressBarStyle.PRIMARY",
            "computed": true
          }
        },
        "min": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar starting value.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "max": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar ending value.",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar current value.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "valueSecondary": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar secondary value.",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "animated": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If set to *true*, animations are used.",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "unknown[union]",
            "raw": "(typeof SIZES)[keyof typeof SIZES]"
          },
          "description": "Determine the progress bar height (Supported options exposed through `LinearProgressBar.sizes`)",
          "defaultValue": {
            "value": "SIZES.SMALL",
            "computed": true
          }
        },
        "indicateProgress": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Show progress bar progression in percentages",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "multi": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Use multiple bars.\n***Note:*** `value`, `valueSecondary` & `barStyle` won't be used",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "multiValues": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "signature",
                "type": "object",
                "raw": "{\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The bar color in hex - #000000 ~ #ffffff\n   */\n  color?: string;\n}",
                "signature": {
                  "properties": [
                    {
                      "key": "value",
                      "value": {
                        "name": "number",
                        "required": false
                      },
                      "description": "The progress bar current value."
                    },
                    {
                      "key": "color",
                      "value": {
                        "name": "string",
                        "required": false
                      },
                      "description": "The bar color in hex - #000000 ~ #ffffff"
                    }
                  ]
                }
              }
            ],
            "raw": "{\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The bar color in hex - #000000 ~ #ffffff\n   */\n  color?: string;\n}[]"
          },
          "description": "Array of bar value objects {\n`value` - The progress value,\n`color` - hex [`#000000` ~ `#ffffff`] of the current bar\n}",
          "defaultValue": {
            "value": "[]",
            "computed": false
          }
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "ARIA description for the progress bar",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "fullWidth": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Is the progress bar spread across the entire container width (width: 100%)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Menu/MenuTitle/MenuTitle.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuTitle",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "caption": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "captionPosition": {
          "required": false,
          "tsType": {
            "name": "MenuTitleCaptionPosition"
          },
          "description": "",
          "defaultValue": {
            "value": "MenuTitle.positions.BOTTOM",
            "computed": true
          }
        }
      }
    }
  ],
  "src/components/Table/Table/Table.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Table",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "columns": {
          "required": true,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ITableColumn"
              }
            ],
            "raw": "ITableColumn[]"
          },
          "description": ""
        },
        "dataState": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "object",
            "raw": "{\n  isLoading?: boolean;\n  isError?: boolean;\n}",
            "signature": {
              "properties": [
                {
                  "key": "isLoading",
                  "value": {
                    "name": "boolean",
                    "required": false
                  }
                },
                {
                  "key": "isError",
                  "value": {
                    "name": "boolean",
                    "required": false
                  }
                }
              ]
            }
          },
          "description": ""
        },
        "errorState": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": ""
        },
        "emptyState": {
          "required": true,
          "tsType": {
            "name": "ReactElement"
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "| ReactElement<ITableHeaderProps>\n| ReactElement<ITableBodyProps>\n| Array<ReactElement<ITableHeaderProps> | ReactElement<ITableBodyProps>>",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "ITableHeaderProps"
                  }
                ],
                "raw": "ReactElement<ITableHeaderProps>"
              },
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "ITableBodyProps"
                  }
                ],
                "raw": "ReactElement<ITableBodyProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "union",
                    "raw": "ReactElement<ITableHeaderProps> | ReactElement<ITableBodyProps>",
                    "elements": [
                      {
                        "name": "ReactElement",
                        "elements": [
                          {
                            "name": "ITableHeaderProps"
                          }
                        ],
                        "raw": "ReactElement<ITableHeaderProps>"
                      },
                      {
                        "name": "ReactElement",
                        "elements": [
                          {
                            "name": "ITableBodyProps"
                          }
                        ],
                        "raw": "ReactElement<ITableBodyProps>"
                      }
                    ]
                  }
                ],
                "raw": "Array<ReactElement<ITableHeaderProps> | ReactElement<ITableBodyProps>>"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "RowSizes"
          },
          "description": "",
          "defaultValue": {
            "value": "Table.sizes.MEDIUM",
            "computed": true
          }
        },
        "withoutBorder": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableHeader/TableHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableHeader",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "React.ReactElement<ITableHeaderCellProps> | React.ReactElement<ITableHeaderCellProps>[]",
            "elements": [
              {
                "name": "ReactReactElement",
                "raw": "React.ReactElement<ITableHeaderCellProps>",
                "elements": [
                  {
                    "name": "ITableHeaderCellProps"
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactReactElement",
                    "raw": "React.ReactElement<ITableHeaderCellProps>",
                    "elements": [
                      {
                        "name": "ITableHeaderCellProps"
                      }
                    ]
                  }
                ],
                "raw": "React.ReactElement<ITableHeaderCellProps>[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableBody/TableBody.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableBody",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "| ReactElement<ITableRowProps>\n| ReactElement<ITableRowProps>[]\n| ReactElement<ComponentProps<typeof VirtualizedList>>",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "ITableRowProps"
                  }
                ],
                "raw": "ReactElement<ITableRowProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "ITableRowProps"
                      }
                    ],
                    "raw": "ReactElement<ITableRowProps>"
                  }
                ],
                "raw": "ReactElement<ITableRowProps>[]"
              },
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "ComponentProps",
                    "elements": [
                      {
                        "name": "VirtualizedList"
                      }
                    ],
                    "raw": "ComponentProps<typeof VirtualizedList>"
                  }
                ],
                "raw": "ReactElement<ComponentProps<typeof VirtualizedList>>"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableCellSkeleton/TableCellSkeleton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableCellSkeleton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "\"long-text\" | \"medium-text\" | \"circle\" | \"rectangle\"",
            "elements": [
              {
                "name": "literal",
                "value": "\"long-text\""
              },
              {
                "name": "literal",
                "value": "\"medium-text\""
              },
              {
                "name": "literal",
                "value": "\"circle\""
              },
              {
                "name": "literal",
                "value": "\"rectangle\""
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"long-text\"",
            "computed": false
          }
        },
        "short": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/SplitButton/SplitButtonMenu/SplitButtonMenu.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SplitButtonMenu"
    }
  ],
  "src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableVirtualizedBody",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "items": {
          "required": true,
          "tsType": {
            "name": "ComponentProps[\"items\"]",
            "raw": "ComponentProps<typeof VirtualizedList>[\"items\"]"
          },
          "description": ""
        },
        "rowRenderer": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(item: VirtualizedListItem[\"value\"]) => JSX.Element",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "VirtualizedListItem[\"value\"]"
                  },
                  "name": "item"
                }
              ],
              "return": {
                "name": "JSX.Element"
              }
            }
          },
          "description": ""
        },
        "onScroll": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ScrollDirection"
                  },
                  "name": "horizontalScrollDirection"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "scrollTop"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "scrollUpdateWasRequested"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableRow/TableRow.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableRow",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "highlighted": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Does the row have a highlighted style"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "React.ReactElement<ITableCellProps> | React.ReactElement<ITableCellProps>[]",
            "elements": [
              {
                "name": "ReactReactElement",
                "raw": "React.ReactElement<ITableCellProps>",
                "elements": [
                  {
                    "name": "ITableCellProps"
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactReactElement",
                    "raw": "React.ReactElement<ITableCellProps>",
                    "elements": [
                      {
                        "name": "ITableCellProps"
                      }
                    ]
                  }
                ],
                "raw": "React.ReactElement<ITableCellProps>[]"
              }
            ]
          },
          "description": ""
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SliderBase/SliderBase.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderBase",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SliderBase/SliderTrack.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderTrack",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Consumer/Custom/Extra `class names` to be added to the Component's-Root-Node"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "color": {
          "required": true,
          "tsType": {
            "name": "SliderColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableCell/TableCell.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableCell",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Table/TableHeaderCell/TableHeaderCell.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TableHeaderCell",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "title": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "infoContent": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "sortState": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "\"asc\" | \"desc\" | \"none\"",
            "elements": [
              {
                "name": "literal",
                "value": "\"asc\""
              },
              {
                "name": "literal",
                "value": "\"desc\""
              },
              {
                "name": "literal",
                "value": "\"none\""
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"none\"",
            "computed": false
          }
        },
        "onSortClicked": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(direction: \"asc\" | \"desc\" | \"none\") => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "\"asc\" | \"desc\" | \"none\"",
                    "elements": [
                      {
                        "name": "literal",
                        "value": "\"asc\""
                      },
                      {
                        "name": "literal",
                        "value": "\"desc\""
                      },
                      {
                        "name": "literal",
                        "value": "\"none\""
                      }
                    ]
                  },
                  "name": "direction"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "sortButtonAriaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Sort\"",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Slider/SliderBase/SliderRail.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderRail",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Consumer/Custom/Extra `class names` to be added to the Component's-Root-Node"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick callback function",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[]",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              }
            ]
          },
          "description": ""
        },
        "size": {
          "required": true,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof Slider.sizes)[keyof typeof Slider.sizes]"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SliderBase/SliderFilledTrack.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderFilledTrack",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Consumer/Custom/Extra `class names` to be added to the Component's-Root-Node"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dimension": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Size of filled track, according to selected value of component (Slider)",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "offset": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Offset from start of track",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "reverse": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Start Filled Track from the end of the track\n(`right` for LTR and `left` for RTL, `bottom` for vertical)",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "color": {
          "required": true,
          "tsType": {
            "name": "SliderColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tabs/TabPanel/TabPanel.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TabPanel",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement | ReactElement[] | string",
            "elements": [
              {
                "name": "ReactElement"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Slider/SliderBase/SliderThumb.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SliderThumb",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Consumer/Custom/Extra `class names` to be added to the Component's-Root-Node"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Consumer/Custom/Extra `class names` to be added to the Component's-Root-Node",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "onMove": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: PointerEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "PointerEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On SliderThumb move callback",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "position": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Position (i.e. offset) from start of track/rail, according to value",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "size": {
          "required": true,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof Slider.sizes)[keyof typeof Slider.sizes]"
          },
          "description": ""
        },
        "color": {
          "required": true,
          "tsType": {
            "name": "SliderColor"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tabs/Tab/Tab.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Tab",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tabInnerClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for tab link-name"
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Tab index",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "focus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FunctionComponent<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFunctionComponent",
                "raw": "React.FunctionComponent<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "iconType": {
          "required": false,
          "tsType": {
            "name": "IconType"
          },
          "description": ""
        },
        "iconSide": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"left\"",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function noop() {\n  // No operation performed.\n}",
            "computed": false
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | ReactElement[]",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement"
                  }
                ],
                "raw": "ReactElement[]"
              }
            ]
          },
          "description": "Tab link-name"
        }
      }
    }
  ],
  "src/components/Tabs/TabList/TabList.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TabList",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onTabChange": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(tabId: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "tabId"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "activeTabId": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "tabType": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Compact\"",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "noPadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "TabProps"
                  }
                ],
                "raw": "ReactElement<TabProps>"
              }
            ],
            "raw": "ReactElement<TabProps>[]"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tabs/TabPanels/TabPanels.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TabPanels",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "renderOnlyActiveTab": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "activeTabId": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "0",
            "computed": false
          }
        },
        "animationDirection": {
          "required": false,
          "tsType": {
            "name": "TabPanelsAnimationDirection"
          },
          "description": "",
          "defaultValue": {
            "value": "TabPanelsAnimationDirection.RTL",
            "computed": true
          }
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactElement<TabPanelProps> | ReactElement<TabPanelProps>[]",
            "elements": [
              {
                "name": "ReactElement",
                "elements": [
                  {
                    "name": "TabPanelProps"
                  }
                ],
                "raw": "ReactElement<TabPanelProps>"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactElement",
                    "elements": [
                      {
                        "name": "TabPanelProps"
                      }
                    ],
                    "raw": "ReactElement<TabPanelProps>"
                  }
                ],
                "raw": "ReactElement<TabPanelProps>[]"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenMedia/TipseenMedia.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenMedia",
      "props": {
        "children": {
          "required": true,
          "tsType": {
            "name": "ReactNode"
          },
          "description": ""
        }
      },
      "composes": ["PropsWithChildren"]
    }
  ],
  "src/components/Toast/ToastButton/ToastButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ToastButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Custom class names to pass to the component"
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "id to pass to the button"
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "ReactReactNode",
            "raw": "React.ReactNode"
          },
          "description": ""
        },
        "activeButtonClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "kind": {
          "required": false,
          "tsType": {
            "name": "ButtonType"
          },
          "description": "The button's kind"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "Callback function to run when the button is clicked"
        },
        "onMouseDown": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "blurOnMouseUp": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Blur on button click"
        },
        "name": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Name of the button - for form submit usages"
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "(typeof SIZES)[keyof typeof SIZES] | keyof typeof OLD_BUTTON_SIZES",
            "elements": [
              {
                "name": "unknown[union]",
                "raw": "(typeof SIZES)[keyof typeof SIZES]"
              },
              {
                "name": "union",
                "raw": "keyof typeof OLD_BUTTON_SIZES",
                "elements": [
                  {
                    "name": "literal",
                    "value": "sm"
                  },
                  {
                    "name": "literal",
                    "value": "md"
                  },
                  {
                    "name": "literal",
                    "value": "lg"
                  }
                ]
              }
            ]
          },
          "description": "The button's size"
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "ButtonColor"
          },
          "description": "The button's color"
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ButtonInputType"
          },
          "description": "The button's type"
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Whether the button should be disabled or not"
        },
        "rightIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the right"
        },
        "leftIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to place on the left"
        },
        "success": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "the success props are used when you have async action and wants to display a success message"
        },
        "successIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Success icon name"
        },
        "successText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Success text"
        },
        "loading": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "loading boolean which switches the text to a loader"
        },
        "style": {
          "required": false,
          "tsType": {
            "name": "ReactCSSProperties",
            "raw": "React.CSSProperties"
          },
          "description": ""
        },
        "active": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "displays the active state"
        },
        "marginRight": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the right"
        },
        "marginLeft": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "adds 8px margin to the left"
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the button accordingly"
        },
        "ariaLabel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria label to provide important when providing only Icon"
        },
        "ariaHasPopup": {
          "required": false,
          "tsType": {
            "name": "ReactHTMLProps[\"aria-haspopup\"]",
            "raw": "React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"]"
          },
          "description": "aria for a button popup"
        },
        "ariaExpanded": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "aria to be set if the popup is open"
        },
        "ariaControls": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "aria controls - receives id for the controlled region"
        },
        "aria-describedby": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-describedby\"]",
            "raw": "AriaAttributes[\"aria-describedby\"]"
          },
          "description": ""
        },
        "aria-hidden": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-hidden\"]",
            "raw": "AriaAttributes[\"aria-hidden\"]"
          },
          "description": "aria to be used for screen reader to know if the button is hidden"
        },
        "onFocus": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Focus callback"
        },
        "onBlur": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.FocusEvent<HTMLButtonElement>) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactFocusEvent",
                    "raw": "React.FocusEvent<HTMLButtonElement>",
                    "elements": [
                      {
                        "name": "HTMLButtonElement"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "On Button Blur callback"
        },
        "rightFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "leftFlat": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "preventClickAnimation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "noSidePadding": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "defaultTextColorOnPrimaryColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)"
        },
        "dataTestId": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use \"data-testid\" instead"
        },
        "insetFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Change the focus indicator from around the button to within it"
        },
        "tabIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "Specifies the tab order of an element"
        }
      }
    }
  ],
  "src/components/BreadcrumbsBar/BreadcrumbItem/BreadcrumbContent/BreadcrumbContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "BreadcrumbContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isClickable": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "link": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "isCurrent": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Toast/ToastLink/ToastLink.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ToastLink",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "componentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "textClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name for overriding link text styles"
        },
        "href": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Specifies the location (URL) of the external resource"
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "The link text"
        },
        "rel": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Defines the relationship between a linked resource and the current document"
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "onClick function - MouseEvent"
        },
        "target": {
          "required": false,
          "tsType": {
            "name": "LinkTarget"
          },
          "description": "Specifies where to open the linked document"
        },
        "ariaLabelDescription": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Aria label description"
        },
        "ariaDescribedby": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Identifies the element (or elements) that describes the element on which the attribute is set."
        },
        "ariaLabeledBy": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "element id to describe the counter accordingly"
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "Icon to add to the link element"
        },
        "iconPosition": {
          "required": false,
          "tsType": {
            "name": "IconPosition"
          },
          "description": "the position of the icon in relation to the etext"
        },
        "disableNavigation": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "disable navigation"
        },
        "inheritFontSize": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "inherit text size"
        },
        "inlineText": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "if the link is in part of other text content"
        }
      }
    }
  ],
  "src/components/ColorPicker/components/ColorPickerContent/ColorPickerClearButton.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ColorPickerClearButton",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "text": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "Icon": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ColorPicker/components/ColorPickerContent/ColorPickerColorsGrid.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ColorPickerColorsGrid",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "onColorClicked": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(color: ColorPickerValueOnly) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "CONTENT_COLORS_VALUES | string",
                    "elements": [
                      {
                        "name": "unknown[number]",
                        "raw": "(typeof contentColors)[number]"
                      },
                      {
                        "name": "string"
                      }
                    ]
                  },
                  "name": "color"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "colorsToRender": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "CONTENT_COLORS_VALUES[] | string[]",
            "elements": [
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  }
                ],
                "raw": "CONTENT_COLORS_VALUES[]"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              }
            ]
          },
          "description": ""
        },
        "ColorIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "SelectedIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "colorStyle": {
          "required": false,
          "tsType": {
            "name": "ColorStyle"
          },
          "description": ""
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | string[]",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              }
            ]
          },
          "description": ""
        },
        "shouldRenderIndicatorWithoutBackground": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorSize": {
          "required": false,
          "tsType": {
            "name": "BaseSizes"
          },
          "description": ""
        },
        "numberOfColorsInLine": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "tooltipContentByColor": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "Record<CONTENT_COLORS_VALUES, string> & Record<string, string>",
                "elements": [
                  {
                    "name": "Record",
                    "elements": [
                      {
                        "name": "unknown[number]",
                        "raw": "(typeof contentColors)[number]"
                      },
                      {
                        "name": "string"
                      }
                    ],
                    "raw": "Record<CONTENT_COLORS_VALUES, string>"
                  },
                  {
                    "name": "Record",
                    "elements": [
                      {
                        "name": "string"
                      },
                      {
                        "name": "string"
                      }
                    ],
                    "raw": "Record<string, string>"
                  }
                ]
              }
            ],
            "raw": "Partial<Record<CONTENT_COLORS_VALUES, string> & Record<string, string>>"
          },
          "description": ""
        },
        "focusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorShape": {
          "required": false,
          "tsType": {
            "name": "ColorShapes"
          },
          "description": ""
        },
        "showColorNameTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ColorPicker/components/ColorPickerContent/ColorPickerContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ColorPickerContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "value": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ColorPickerValueOnly | ColorPickerArrayValueOnly",
            "elements": [
              {
                "name": "union",
                "raw": "CONTENT_COLORS_VALUES | string",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  },
                  {
                    "name": "string"
                  }
                ]
              },
              {
                "name": "union",
                "raw": "CONTENT_COLORS_VALUES[] | string[]",
                "elements": [
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "unknown[number]",
                        "raw": "(typeof contentColors)[number]"
                      }
                    ],
                    "raw": "CONTENT_COLORS_VALUES[]"
                  },
                  {
                    "name": "Array",
                    "elements": [
                      {
                        "name": "string"
                      }
                    ],
                    "raw": "string[]"
                  }
                ]
              }
            ]
          },
          "description": ""
        },
        "onValueChange": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(value: ColorPickerArrayValueOnly) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "CONTENT_COLORS_VALUES[] | string[]",
                    "elements": [
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "unknown[number]",
                            "raw": "(typeof contentColors)[number]"
                          }
                        ],
                        "raw": "CONTENT_COLORS_VALUES[]"
                      },
                      {
                        "name": "Array",
                        "elements": [
                          {
                            "name": "string"
                          }
                        ],
                        "raw": "string[]"
                      }
                    ]
                  },
                  "name": "value"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "colorsList": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "CONTENT_COLORS_VALUES[] | string[]",
            "elements": [
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  }
                ],
                "raw": "CONTENT_COLORS_VALUES[]"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "string"
                  }
                ],
                "raw": "string[]"
              }
            ]
          },
          "description": ""
        },
        "ColorIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "SelectedIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "NoColorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M9.99869 2.45479C10.29 2.1796 10.7462 2.18205 11.0346 2.46035 11.8801 3.27645 12.629 4.18707 13.2665 5.17427 13.4912 5.52224 13.3913 5.98648 13.0433 6.21118 12.6953 6.43589 12.2311 6.33596 12.0064 5.98799 11.5642 5.30318 11.0625 4.65922 10.5075 4.06347 8.55502 6.10494 6.79968 9.10384 6.79968 12.2306 6.79968 12.6448 6.4639 12.9806 6.04968 12.9806 5.63547 12.9806 5.29968 12.6448 5.29968 12.2306 5.29968 8.25797 7.68621 4.63918 9.99869 2.45479zM14.0817 8.2783C14.4692 8.13179 14.902 8.3271 15.0485 8.71454 15.4712 9.83227 15.7016 11.0135 15.7298 12.2081 15.7548 12.9019 15.6367 13.5934 15.3829 14.2396 15.1285 14.8874 14.7432 15.4758 14.251 15.9679 13.7589 16.4601 13.1705 16.8454 12.5227 17.0998 11.881 17.3518 11.1947 17.47 10.5059 17.4472 9.21585 17.4632 7.96422 17.0068 6.98717 16.1636 6.67359 15.893 6.63877 15.4194 6.9094 15.1058 7.18003 14.7922 7.65362 14.7574 7.9672 15.028 8.67056 15.635 9.57259 15.9622 10.5015 15.9471 10.5148 15.9469 10.5281 15.9471 10.5414 15.9476 11.0307 15.9657 11.5186 15.8826 11.9744 15.7036 12.4302 15.5246 12.8441 15.2535 13.1904 14.9073 13.5366 14.561 13.8077 14.1471 13.9867 13.6913 14.1657 13.2355 14.2487 12.7477 14.2306 12.2583L14.2303 12.248 14.2303 12.248C14.2065 11.2211 14.0088 10.2058 13.6455 9.2451 13.499 8.85766 13.6943 8.42481 14.0817 8.2783zM17.3142 3.38282C17.6071 3.67571 17.6071 4.15058 17.3142 4.44348L4.53033 17.2274C4.23744 17.5203 3.76256 17.5203 3.46967 17.2274 3.17678 16.9345 3.17678 16.4596 3.46967 16.1667L16.2536 3.38282C16.5465 3.08992 17.0214 3.08992 17.3142 3.38282z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "colorStyle": {
          "required": false,
          "tsType": {
            "name": "ColorStyle"
          },
          "description": "",
          "defaultValue": {
            "value": "ColorStyle.REGULAR",
            "computed": true
          }
        },
        "colorSize": {
          "required": false,
          "tsType": {
            "name": "BaseSizes"
          },
          "description": "",
          "defaultValue": {
            "value": "BaseSizes.MEDIUM",
            "computed": true
          }
        },
        "colorShape": {
          "required": false,
          "tsType": {
            "name": "ColorShapes"
          },
          "description": "",
          "defaultValue": {
            "value": "ColorShapes.SQUARE",
            "computed": true
          }
        },
        "tooltipContentByColor": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "Record",
                "elements": [
                  {
                    "name": "unknown[number]",
                    "raw": "(typeof contentColors)[number]"
                  },
                  {
                    "name": "string"
                  }
                ],
                "raw": "Record<CONTENT_COLORS_VALUES, string>"
              }
            ],
            "raw": "Partial<Record<CONTENT_COLORS_VALUES, string>>"
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "noColorText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "shouldRenderIndicatorWithoutBackground": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isBlackListMode": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "numberOfColorsInLine": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "5",
            "computed": false
          }
        },
        "focusOnMount": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "isMultiselect": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "forceUseRawColorList": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Used to force the component render the colorList prop as is. Usually, this flag should not be used. It's intended only for edge cases.\nUsually, only \"monday colors\" will be rendered (unless blacklist mode is used). This flag will override this behavior."
        },
        "showColorNameTooltip": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Used to enable color name tooltip on each color in the component.\nWhen \"tooltipContentByColor\" is supplied, it will override the color name tooltip."
        }
      }
    }
  ],
  "src/components/Combobox/components/ComboboxCategory/ComboboxCategory.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ComboboxCategory",
      "props": {
        "category": {
          "required": true,
          "tsType": {
            "name": "IComboboxCategory"
          },
          "description": ""
        },
        "className": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Combobox/components/ComboboxItems/ComboboxItems.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ComboboxItems",
      "props": {
        "onOptionClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  event: React.MouseEvent | React.KeyboardEvent,\n  index: number,\n  option: IComboboxOption,\n  mouseTriggered: boolean\n) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionLeave": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionEnter": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionHover": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "optionClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "categories": {
          "required": false,
          "tsType": {
            "name": "IComboboxCategoryMap"
          },
          "description": ""
        },
        "options": {
          "required": false,
          "tsType": {
            "name": "Array",
            "elements": [
              {
                "name": "IComboboxItem"
              }
            ],
            "raw": "IComboboxItem[]"
          },
          "description": ""
        },
        "optionRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: IComboboxOption) => JSX.Element",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "JSX.Element"
              }
            }
          },
          "description": ""
        },
        "activeItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "visualFocusItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "optionLineHeight": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "shouldScrollToSelectedItem": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "renderOnlyVisibleOptions": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onActiveCategoryChanged": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(category: IComboboxItem) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "IComboboxItem"
                  },
                  "name": "category"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "maxOptionsWithoutScroll": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "itemsMap": {
          "required": false,
          "tsType": {
            "name": "Map",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "IComboboxItem"
              }
            ],
            "raw": "Map<string, IComboboxItem>"
          },
          "description": ""
        },
        "stickyCategories": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Combobox/components/StickyCategoryHeader/StickyCategoryHeader.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StickyCategoryHeader",
      "props": {
        "label": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ColorPicker/components/ColorPickerItemComponent/ColorPickerItemComponent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ColorPickerItemComponent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "color": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "CONTENT_COLORS_VALUES | string",
            "elements": [
              {
                "name": "unknown[number]",
                "raw": "(typeof contentColors)[number]"
              },
              {
                "name": "string"
              }
            ]
          },
          "description": ""
        },
        "onColorClicked": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(color: ColorPickerValueOnly) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "CONTENT_COLORS_VALUES | string",
                    "elements": [
                      {
                        "name": "unknown[number]",
                        "raw": "(typeof contentColors)[number]"
                      },
                      {
                        "name": "string"
                      }
                    ]
                  },
                  "name": "color"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "colorStyle": {
          "required": false,
          "tsType": {
            "name": "ColorStyle"
          },
          "description": "",
          "defaultValue": {
            "value": "ColorStyle.REGULAR",
            "computed": true
          }
        },
        "shouldRenderIndicatorWithoutBackground": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "ColorIndicatorIcon": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": ""
        },
        "SelectedIndicatorIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "ColorIndicatorIcon",
            "computed": false
          }
        },
        "isSelected": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorSize": {
          "required": true,
          "tsType": {
            "name": "BaseSizes"
          },
          "description": ""
        },
        "tooltipContent": {
          "required": true,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": ""
        },
        "isActive": {
          "required": true,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "colorShape": {
          "required": true,
          "tsType": {
            "name": "ColorShapes"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Dropdown/components/DropdownIndicator/DropdownIndicator.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "DropdownIndicator"
    }
  ],
  "src/components/Dropdown/components/MultiValue/MultiValue.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MultiValue"
    }
  ],
  "src/components/Dropdown/components/Control/Control.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Control"
    }
  ],
  "src/components/Combobox/components/ComboboxOption/ComboboxOption.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ComboboxOption",
      "props": {
        "onOptionClick": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(\n  event: React.MouseEvent | React.KeyboardEvent,\n  index: number,\n  option: IComboboxOption,\n  mouseTriggered: boolean\n) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionLeave": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionEnter": {
          "required": true,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onOptionHover": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent, index: number, option: IComboboxOption, mouseTriggered: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                },
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "mouseTriggered"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "option": {
          "required": false,
          "tsType": {
            "name": "IComboboxOption"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isActive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "visualFocus": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "scrollRef": {
          "required": false,
          "tsType": {
            "name": "RefObject",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ],
            "raw": "RefObject<HTMLElement>"
          },
          "description": ""
        },
        "scrollOffset": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "100",
            "computed": false
          }
        },
        "optionLineHeight": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "shouldScrollWhenActive": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "true",
            "computed": false
          }
        },
        "optionRenderer": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: IComboboxOption) => JSX.Element",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "IComboboxOption"
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "JSX.Element"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        }
      }
    }
  ],
  "src/components/Dropdown/components/MultiValueContainer/MultiValueContainer.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Container"
    }
  ],
  "src/components/Dropdown/components/option/option.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Option"
    }
  ],
  "src/components/Dropdown/components/singleValue/singleValue.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "SingleValue"
    }
  ],
  "src/components/Menu/MenuItem/MenuItem.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "MenuItem",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "label": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "icon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "\"\"",
            "computed": false
          }
        },
        "iconType": {
          "required": false,
          "tsType": {
            "name": "IconType"
          },
          "description": ""
        },
        "iconBackgroundColor": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disabled": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "disableReason": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "selected": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent | React.KeyboardEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "union",
                    "raw": "React.MouseEvent | React.KeyboardEvent",
                    "elements": [
                      {
                        "name": "ReactMouseEvent",
                        "raw": "React.MouseEvent"
                      },
                      {
                        "name": "ReactKeyboardEvent",
                        "raw": "React.KeyboardEvent"
                      }
                    ]
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "activeItemIndex": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "-1",
            "computed": false
          }
        },
        "setActiveItemIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "index": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": ""
        },
        "key": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isParentMenuVisible": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "resetOpenSubMenuIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "hasOpenSubMenu": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "setSubMenuIsOpenByIndex": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(index: number, isOpen: boolean) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "index"
                },
                {
                  "type": {
                    "name": "boolean"
                  },
                  "name": "isOpen"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "useDocumentEventListeners": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "tooltipContent": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "tooltipPosition": {
          "required": false,
          "tsType": {
            "name": "unknown[unknown]",
            "raw": "(typeof MenuItem.tooltipPositions)[keyof typeof MenuItem.tooltipPositions]"
          },
          "description": "",
          "defaultValue": {
            "value": "MenuItem.tooltipPositions.RIGHT",
            "computed": true
          }
        },
        "tooltipShowDelay": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "300",
            "computed": false
          }
        },
        "tooltipProps": {
          "required": false,
          "tsType": {
            "name": "Partial",
            "elements": [
              {
                "name": "intersection",
                "raw": "TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps)",
                "elements": [
                  {
                    "name": "TooltipBaseProps"
                  },
                  {
                    "name": "unknown"
                  }
                ]
              }
            ],
            "raw": "Partial<TooltipProps>"
          },
          "description": ""
        },
        "onMouseLeave": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onMouseEnter": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "classname": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "@deprecated - use className instead"
        },
        "iconWrapperClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Class name which is added to div which wraps an Icon"
        },
        "isInitialSelectedState": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "shouldScrollMenu": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "closeMenu": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(option: CloseMenuOption) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  propagate?: boolean;\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "propagate",
                          "value": {
                            "name": "boolean",
                            "required": false
                          }
                        }
                      ]
                    }
                  },
                  "name": "option"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "menuRef": {
          "required": false,
          "tsType": {
            "name": "ReactRefObject",
            "raw": "React.RefObject<HTMLElement>",
            "elements": [
              {
                "name": "HTMLElement"
              }
            ]
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "MenuChild | MenuChild[]",
            "elements": [
              {
                "name": "intersection",
                "raw": "ReactElement & {\n  type?: {\n    isSelectable?: boolean;\n    isMenuChild?: boolean;\n    isMenu?: boolean;\n    supportFocusOnMount?: boolean;\n  };\n}",
                "elements": [
                  {
                    "name": "ReactElement"
                  },
                  {
                    "name": "signature",
                    "type": "object",
                    "raw": "{\n  type?: {\n    isSelectable?: boolean;\n    isMenuChild?: boolean;\n    isMenu?: boolean;\n    supportFocusOnMount?: boolean;\n  };\n}",
                    "signature": {
                      "properties": [
                        {
                          "key": "type",
                          "value": {
                            "name": "signature",
                            "type": "object",
                            "raw": "{\n  isSelectable?: boolean;\n  isMenuChild?: boolean;\n  isMenu?: boolean;\n  supportFocusOnMount?: boolean;\n}",
                            "signature": {
                              "properties": [
                                {
                                  "key": "isSelectable",
                                  "value": {
                                    "name": "boolean",
                                    "required": false
                                  }
                                },
                                {
                                  "key": "isMenuChild",
                                  "value": {
                                    "name": "boolean",
                                    "required": false
                                  }
                                },
                                {
                                  "key": "isMenu",
                                  "value": {
                                    "name": "boolean",
                                    "required": false
                                  }
                                },
                                {
                                  "key": "supportFocusOnMount",
                                  "value": {
                                    "name": "boolean",
                                    "required": false
                                  }
                                }
                              ]
                            },
                            "required": false
                          }
                        }
                      ]
                    }
                  }
                ]
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "intersection",
                    "raw": "ReactElement & {\n  type?: {\n    isSelectable?: boolean;\n    isMenuChild?: boolean;\n    isMenu?: boolean;\n    supportFocusOnMount?: boolean;\n  };\n}",
                    "elements": [
                      {
                        "name": "ReactElement"
                      },
                      {
                        "name": "signature",
                        "type": "object",
                        "raw": "{\n  type?: {\n    isSelectable?: boolean;\n    isMenuChild?: boolean;\n    isMenu?: boolean;\n    supportFocusOnMount?: boolean;\n  };\n}",
                        "signature": {
                          "properties": [
                            {
                              "key": "type",
                              "value": {
                                "name": "signature",
                                "type": "object",
                                "raw": "{\n  isSelectable?: boolean;\n  isMenuChild?: boolean;\n  isMenu?: boolean;\n  supportFocusOnMount?: boolean;\n}",
                                "signature": {
                                  "properties": [
                                    {
                                      "key": "isSelectable",
                                      "value": {
                                        "name": "boolean",
                                        "required": false
                                      }
                                    },
                                    {
                                      "key": "isMenuChild",
                                      "value": {
                                        "name": "boolean",
                                        "required": false
                                      }
                                    },
                                    {
                                      "key": "isMenu",
                                      "value": {
                                        "name": "boolean",
                                        "required": false
                                      }
                                    },
                                    {
                                      "key": "supportFocusOnMount",
                                      "value": {
                                        "name": "boolean",
                                        "required": false
                                      }
                                    }
                                  ]
                                },
                                "required": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                ],
                "raw": "MenuChild[]"
              }
            ]
          },
          "description": ""
        },
        "splitMenuItem": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "Type of menu item with sub menu, which has two click/hover options-\n   1. click on the main menu item will trigger onClick\n   2. click/hover on icon button will open the sub menu",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "aria-label": {
          "required": false,
          "tsType": {
            "name": "AriaAttributes[\"aria-label\"]",
            "raw": "AriaAttributes[\"aria-label\"]"
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Tipseen/TipseenContent.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "TipseenContent",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "title": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "titleClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "Classname for overriding TipseenTitle styles"
        },
        "isDismissHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use hideDismiss instead"
        },
        "hideDismiss": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "children": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "ReactNode | ReactNode[]",
            "elements": [
              {
                "name": "ReactNode"
              },
              {
                "name": "Array",
                "elements": [
                  {
                    "name": "ReactNode"
                  }
                ],
                "raw": "ReactNode[]"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "null",
            "computed": false
          }
        },
        "isSubmitHidden": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "@deprecated - use hideSubmit instead"
        },
        "hideSubmit": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "submitButtonText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "submitButtonProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "ButtonProps & { content?: ElementContent }",
            "elements": [
              {
                "name": "ButtonProps"
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ content?: ElementContent }",
                "signature": {
                  "properties": [
                    {
                      "key": "content",
                      "value": {
                        "name": "union",
                        "raw": "ReactNode | ReactNode[]",
                        "elements": [
                          {
                            "name": "ReactNode"
                          },
                          {
                            "name": "Array",
                            "elements": [
                              {
                                "name": "ReactNode"
                              }
                            ],
                            "raw": "ReactNode[]"
                          }
                        ],
                        "required": false
                      }
                    }
                  ]
                }
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "onSubmit": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "dismissButtonText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "dismissButtonProps": {
          "required": false,
          "tsType": {
            "name": "intersection",
            "raw": "ButtonProps & { content?: ElementContent }",
            "elements": [
              {
                "name": "ButtonProps"
              },
              {
                "name": "signature",
                "type": "object",
                "raw": "{ content?: ElementContent }",
                "signature": {
                  "properties": [
                    {
                      "key": "content",
                      "value": {
                        "name": "union",
                        "raw": "ReactNode | ReactNode[]",
                        "elements": [
                          {
                            "name": "ReactNode"
                          },
                          {
                            "name": "Array",
                            "elements": [
                              {
                                "name": "ReactNode"
                              }
                            ],
                            "raw": "ReactNode[]"
                          }
                        ],
                        "required": false
                      }
                    }
                  ]
                }
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "{}",
            "computed": false
          }
        },
        "onDismiss": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(event: React.MouseEvent) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "ReactMouseEvent",
                    "raw": "React.MouseEvent"
                  },
                  "name": "event"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/Dropdown/components/ChildrenContent/ChildrenContent.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ChildrenContent"
    }
  ],
  "src/components/Dropdown/components/ClearIndicator/ClearIndicator.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ClearIndicator"
    }
  ],
  "src/components/Dropdown/components/menu/menu.jsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Menu"
    }
  ],
  "src/components/Modal/ModalFooter/ModalFooterButtons/ModalFooterButtons.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "ModalFooterButtons",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "primaryButtonText": {
          "required": true,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "secondaryButtonText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "disablePrimaryButton": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": ""
        },
        "onPrimaryButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        },
        "onSecondaryButtonClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "() => void",
            "signature": {
              "arguments": [],
              "return": {
                "name": "void"
              }
            }
          },
          "description": ""
        }
      }
    }
  ],
  "src/components/ProgressBars/LinearProgressBar/Bar/Bar.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "Bar",
      "props": {
        "barStyle": {
          "required": false,
          "tsType": {
            "name": "ProgressBarStyle"
          },
          "description": "Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`)."
        },
        "min": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar starting value."
        },
        "max": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar ending value."
        },
        "value": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "The progress bar current value."
        },
        "animated": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "If set to *true*, animations are used."
        },
        "baseClass": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "barLabelName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "color": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "ProgressBarType"
          },
          "description": ""
        },
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        }
      },
      "composes": ["VibeComponentProps"]
    }
  ],
  "src/components/MultiStepIndicator/components/StepIndicator/StepIndicator.tsx": [
    {
      "description": "",
      "methods": [],
      "displayName": "StepIndicator",
      "props": {
        "className": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "data-testid": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "id": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "status": {
          "required": false,
          "tsType": {
            "name": "StepStatus"
          },
          "description": "",
          "defaultValue": {
            "value": "StepStatus.PENDING",
            "computed": true
          }
        },
        "titleText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Heading text\"",
            "computed": false
          }
        },
        "subtitleText": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": "",
          "defaultValue": {
            "value": "\"Subtitle text\"",
            "computed": false
          }
        },
        "stepNumber": {
          "required": false,
          "tsType": {
            "name": "number"
          },
          "description": "",
          "defaultValue": {
            "value": "1",
            "computed": false
          }
        },
        "stepComponentClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "type": {
          "required": false,
          "tsType": {
            "name": "MultiStepType"
          },
          "description": "",
          "defaultValue": {
            "value": "MultiStepType.PRIMARY",
            "computed": true
          }
        },
        "fulfilledStepIcon": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "string | React.FC<IconSubComponentProps> | null",
            "elements": [
              {
                "name": "string"
              },
              {
                "name": "ReactFC",
                "raw": "React.FC<IconSubComponentProps>",
                "elements": [
                  {
                    "name": "IconSubComponentProps"
                  }
                ]
              },
              {
                "name": "null"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "({size, ...props}) => (\n  <svg viewBox=\"0 0 20 20\" fill=\"currentColor\" width={ size || \"20\" } height={ size || \"20\" } {...props}>\n    <path d=\"M8.53033 14.2478L8 13.7175L7.46967 14.2478C7.76256 14.5407 8.23744 14.5407 8.53033 14.2478ZM8 12.6569L4.53033 9.18718C4.23744 8.89429 3.76256 8.89429 3.46967 9.18718C3.17678 9.48008 3.17678 9.95495 3.46967 10.2478L7.46967 14.2478L8 13.7175L8.53033 14.2478L16.2478 6.53033C16.5407 6.23743 16.5407 5.76256 16.2478 5.46967C15.955 5.17677 15.4801 5.17677 15.1872 5.46967L8 12.6569Z\"\n      fill=\"currentColor\" fillRule=\"evenodd\" clipRule=\"evenodd\" />\n  </svg>\n)",
            "computed": false
          }
        },
        "fulfilledStepIconType": {
          "required": false,
          "tsType": {
            "name": "union",
            "raw": "IconType.SVG | IconType.ICON_FONT",
            "elements": [
              {
                "name": "IconType.SVG"
              },
              {
                "name": "IconType.ICON_FONT"
              }
            ]
          },
          "description": "",
          "defaultValue": {
            "value": "IconType.SVG",
            "computed": true
          }
        },
        "isFulfilledStepDisplayNumber": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "onClick": {
          "required": false,
          "tsType": {
            "name": "signature",
            "type": "function",
            "raw": "(stepNumber: number) => void",
            "signature": {
              "arguments": [
                {
                  "type": {
                    "name": "number"
                  },
                  "name": "stepNumber"
                }
              ],
              "return": {
                "name": "void"
              }
            }
          },
          "description": "",
          "defaultValue": {
            "value": "function NOOP() {}",
            "computed": false
          }
        },
        "isFollowedByDivider": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "stepDividerClassName": {
          "required": false,
          "tsType": {
            "name": "string"
          },
          "description": ""
        },
        "isVertical": {
          "required": false,
          "tsType": {
            "name": "boolean"
          },
          "description": "",
          "defaultValue": {
            "value": "false",
            "computed": false
          }
        },
        "size": {
          "required": false,
          "tsType": {
            "name": "Size"
          },
          "description": "",
          "defaultValue": {
            "value": "Size.REGULAR",
            "computed": true
          }
        }
      }
    }
  ]
}
