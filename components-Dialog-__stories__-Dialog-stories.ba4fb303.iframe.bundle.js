/*! For license information please see components-Dialog-__stories__-Dialog-stories.ba4fb303.iframe.bundle.js.LICENSE.txt */
"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[7601],{"./src/components/Dialog/__stories__/Dialog.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ControlledDialog:()=>ControlledDialog,DialogWithTooltip:()=>DialogWithTooltip,DisableScrollWhenDialogOpen:()=>DisableScrollWhenDialogOpen,HideTriggers:()=>HideTriggers,Overview:()=>Overview,Positions:()=>Positions,ShowTriggers:()=>ShowTriggers,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dialog_stories});__webpack_require__("../../node_modules/react/index.js");var createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),Dialog=__webpack_require__("./src/components/Dialog/Dialog.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),IconButton=__webpack_require__("./src/components/IconButton/IconButton.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),Skeleton=__webpack_require__("./src/components/Skeleton/Skeleton.tsx"),Info=__webpack_require__("../icons/dist/react/Info.js"),interactions_helper=__webpack_require__("./src/__tests__/interactions-helper.ts"),dist=__webpack_require__("../../node_modules/@storybook/jest/dist/index.mjs"),interactions_utils=__webpack_require__("./src/tests/interactions-utils.ts"),testing_library_dist=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function define(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==_typeof(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function value(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(_typeof(e)+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function reset(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function stop(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function dispatchException(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function abrupt(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function complete(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function finish(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function _catch(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function delegateYield(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}var _afterEach,_beforeAll,isDialogHiddenAfterClickOutside=createTestIfDialogHiddenAfterTrigger("click-outside-dialog",(function(){return testing_library_dist.Q4.click(getDialogContainer())})),isDialogHiddenAfterContextMenu=createTestIfDialogHiddenAfterTrigger("context-menu-dialog",(function(){return testing_library_dist.rC.contextMenu(getDialogContainer())})),closeTriggersInteractionSuite=(0,interactions_utils.Ld)({tests:[isDialogHiddenAfterClickOutside,isDialogHiddenAfterContextMenu],beforeAll:(_beforeAll=_asyncToGenerator(_regeneratorRuntime().mark((function _callee2(canvas){var clickOutsideButton;return _regeneratorRuntime().wrap((function _callee2$(_context2){for(;;)switch(_context2.prev=_context2.next){case 0:return _context2.next=2,(0,interactions_utils.h5)(canvas,"click-outside-button");case 2:return clickOutsideButton=_context2.sent,_context2.next=5,testing_library_dist.Q4.click(clickOutsideButton);case 5:return _context2.next=7,testing_library_dist.Q4.click(clickOutsideButton);case 7:return _context2.next=9,(0,testing_library_dist.fm)(_asyncToGenerator(_regeneratorRuntime().mark((function _callee(){var dialog;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return _context.next=2,getDialogElement(canvas,"click-outside-dialog");case 2:dialog=_context.sent,(0,dist.E)(dialog).toBeInTheDocument();case 4:case"end":return _context.stop()}}),_callee)}))),{timeout:100});case 9:case"end":return _context2.stop()}}),_callee2)}))),function beforeAll(_x){return _beforeAll.apply(this,arguments)}),afterEach:(_afterEach=_asyncToGenerator(_regeneratorRuntime().mark((function _callee3(){return _regeneratorRuntime().wrap((function _callee3$(_context3){for(;;)switch(_context3.prev=_context3.next){case 0:return _context3.next=2,(0,interactions_helper.S)();case 2:case"end":return _context3.stop()}}),_callee3)}))),function afterEach(){return _afterEach.apply(this,arguments)})});function getDialogContainer(){return document.querySelector("[data-testid=".concat("hide-triggers-container","]"))}function getDialogElement(_x2,_x3){return _getDialogElement.apply(this,arguments)}function _getDialogElement(){return(_getDialogElement=_asyncToGenerator(_regeneratorRuntime().mark((function _callee5(canvas,dataTestId){return _regeneratorRuntime().wrap((function _callee5$(_context5){for(;;)switch(_context5.prev=_context5.next){case 0:return _context5.next=2,(0,interactions_utils.h5)(canvas,dataTestId);case 2:return _context5.abrupt("return",_context5.sent);case 3:case"end":return _context5.stop()}}),_callee5)})))).apply(this,arguments)}function checkIfDialogHidden(_x4){return _checkIfDialogHidden.apply(this,arguments)}function _checkIfDialogHidden(){return(_checkIfDialogHidden=_asyncToGenerator(_regeneratorRuntime().mark((function _callee6(dialogElement){return _regeneratorRuntime().wrap((function _callee6$(_context6){for(;;)switch(_context6.prev=_context6.next){case 0:return _context6.next=2,(0,testing_library_dist.fm)((function(){return(0,dist.E)(dialogElement).not.toBeInTheDocument()}),{timeout:1e3});case 2:case"end":return _context6.stop()}}),_callee6)})))).apply(this,arguments)}function createTestIfDialogHiddenAfterTrigger(dataTestId,triggerCallback){return function(){var _ref2=_asyncToGenerator(_regeneratorRuntime().mark((function _callee4(canvas){var dialog;return _regeneratorRuntime().wrap((function _callee4$(_context4){for(;;)switch(_context4.prev=_context4.next){case 0:return _context4.next=2,getDialogElement(canvas,dataTestId);case 2:return dialog=_context4.sent,triggerCallback(canvas,dialog),_context4.next=6,checkIfDialogHidden(dialog);case 6:case"end":return _context4.stop()}}),_callee4)})));return function(_x5){return _ref2.apply(this,arguments)}}()}var useSwitch=__webpack_require__("./src/hooks/useSwitch/index.ts"),DialogConstants=__webpack_require__("./src/components/Dialog/DialogConstants.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function Dialog_stories_typeof(o){return Dialog_stories_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},Dialog_stories_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=Dialog_stories_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=Dialog_stories_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==Dialog_stories_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Dialog.A}),showHideArgTypes={options:DialogConstants.eW,control:{type:"multi-select"},table:{type:{summary:Object.values(DialogConstants.eW).join(" | ")}}};const Dialog_stories={title:"Components/Dialog",component:Dialog.A,argTypes:_objectSpread(_objectSpread({},metaSettings.argTypes),{},{hideTrigger:showHideArgTypes,showTrigger:showHideArgTypes}),decorators:metaSettings.decorators,parameters:{storySource:{source:'import React from "react";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { Button, Dialog, DialogContentContainer, Flex, IconButton } from "../../../components";\nimport { Skeleton } from "../../../components";\nimport { Info } from "@vibe/icons";\nimport { closeTriggersInteractionSuite } from "../__tests__/Dialog.interactions";\nimport {\n  CLICK_OUTSIDE_DIALOG,\n  CLICK_OUTSIDE_DIALOG_BUTTON,\n  CONTEXT_MENU_DIALOG,\n  HIDE_TRIGGERS_CONTAINER\n} from "../__tests__/DialogDataTestIds";\nimport useSwitch from "../../../hooks/useSwitch";\nimport { HideShowEvent } from "../DialogConstants";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Dialog\n});\n\nconst showHideArgTypes = {\n  options: HideShowEvent,\n  control: {\n    type: "multi-select"\n  },\n  table: {\n    type: {\n      summary: Object.values(HideShowEvent).join(" | ")\n    }\n  }\n};\n\nexport default {\n  title: "Components/Dialog",\n  component: Dialog,\n  argTypes: {\n    ...metaSettings.argTypes,\n    hideTrigger: showHideArgTypes,\n    showTrigger: showHideArgTypes\n  },\n  decorators: metaSettings.decorators,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { useSwitch }\n      }\n    }\n  }\n};\n\nexport const Overview = {\n  render: () => {\n    return (\n      <div style={{ padding: "80px var(--sb-spacing-small)" }}>\n        <Dialog\n          modifiers={[\n            {\n              name: "preventOverflow",\n              options: {\n                mainAxis: false\n              }\n            }\n          ]}\n          shouldShowOnMount\n          showTrigger={["click"]}\n          hideTrigger={["click"]}\n          position={"right"}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <IconButton icon={Info} active kind="secondary" />\n        </Dialog>\n      </div>\n    );\n  },\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: { isEnabled: false }\n    }\n  }\n};\n\nexport const Positions = {\n  render:\n    // for prevent dialog to move while scrolling\n    () => {\n      // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n      const { isChecked: checkedTop, onChange: onChangeTop } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedBottom, onChange: onChangeBottom } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedRight, onChange: onChangeRight } = useSwitch({\n        defaultChecked: false\n      });\n\n      const { isChecked: checkedLeft, onChange: onChangeLeft } = useSwitch({\n        defaultChecked: false\n      });\n\n      const modifiers = [\n        {\n          name: "preventOverflow",\n          options: {\n            mainAxis: false\n          }\n        }\n      ];\n\n      return (\n        <Flex style={{ padding: "80px var(--sb-spacing-small)" }} gap="medium">\n          <Dialog\n            modifiers={modifiers}\n            open={checkedTop}\n            position="top"\n            showTrigger={[]}\n            hideTrigger={[]}\n            content={\n              <DialogContentContainer>\n                <Flex\n                  direction="column"\n                  align="start"\n                  gap="small"\n                  style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n                >\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({ length: 3 }, (_value, index: number) => (\n                    <Flex key={index} gap="small" style={{ width: "100%" }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>\n                  ))}\n                </Flex>\n              </DialogContentContainer>\n            }\n          >\n            <Button kind="secondary" onClick={onChangeTop} active={checkedTop}>\n              Top\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            position="bottom"\n            showTrigger={[]}\n            hideTrigger={[]}\n            open={checkedBottom}\n            content={\n              <DialogContentContainer>\n                <Flex\n                  direction="column"\n                  align="start"\n                  gap="small"\n                  style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n                >\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({ length: 3 }, (_value, index: number) => (\n                    <Flex key={index} gap="small" style={{ width: "100%" }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>\n                  ))}\n                </Flex>\n              </DialogContentContainer>\n            }\n          >\n            <Button kind="secondary" onClick={onChangeBottom} active={checkedBottom}>\n              Bottom\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            showTrigger={[]}\n            hideTrigger={[]}\n            position="right"\n            open={checkedRight}\n            content={\n              <DialogContentContainer>\n                <Flex\n                  direction="column"\n                  align="start"\n                  gap="small"\n                  style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n                >\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({ length: 3 }, (_value, index: number) => (\n                    <Flex key={index} gap="small" style={{ width: "100%" }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>\n                  ))}\n                </Flex>\n              </DialogContentContainer>\n            }\n          >\n            <Button kind="secondary" onClick={onChangeRight} active={checkedRight}>\n              Right\n            </Button>\n          </Dialog>\n          <Dialog\n            modifiers={modifiers}\n            position="left"\n            showTrigger={[]}\n            hideTrigger={[]}\n            open={checkedLeft}\n            content={\n              <DialogContentContainer>\n                <Flex\n                  direction="column"\n                  align="start"\n                  gap="small"\n                  style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n                >\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({ length: 3 }, (_value, index: number) => (\n                    <Flex key={index} gap="small" style={{ width: "100%" }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>\n                  ))}\n                </Flex>\n              </DialogContentContainer>\n            }\n          >\n            <Button kind="secondary" onClick={onChangeLeft} active={checkedLeft}>\n              Left\n            </Button>\n          </Dialog>\n        </Flex>\n      );\n    },\n\n  name: "Positions"\n};\n\nexport const ShowTriggers = {\n  render: () => {\n    const { isChecked: clickButtonActive, onChange: onClickClickButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const { isChecked: hoverButtonActive, onChange: onHoverButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const { isChecked: focusButtonActive, onChange: onFocusButton } = useSwitch({\n      defaultChecked: false\n    });\n\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <Flex style={{ padding: "80px var(--sb-spacing-small)" }} gap="medium">\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={["click"]}\n          hideTrigger={["click"]}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button kind="secondary" active={clickButtonActive} onClick={onClickClickButton}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={["mouseenter"]}\n          hideTrigger={["mouseleave"]}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <div onMouseEnter={onHoverButton} onMouseLeave={onHoverButton}>\n            <Button kind="secondary" active={hoverButtonActive}>\n              On mouse enter\n            </Button>\n          </div>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          showTrigger={["focus"]}\n          hideTrigger={["blur"]}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button onFocus={onFocusButton} onBlur={onFocusButton} kind="secondary" active={focusButtonActive}>\n            On focus\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={[]}\n          hideTrigger={[]}\n          position="right"\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button kind="secondary" active>\n            On mount\n          </Button>\n        </Dialog>\n      </Flex>\n    );\n  },\n\n  name: "Show triggers",\n\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    }\n  }\n};\n\nexport const HideTriggers = {\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const { isChecked: clickButtonActive, onChange: switchClickButtonActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: clickOutsideButtonActive, onChange: switchClickOutsideActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: mouseLeaveButtonActive, onChange: switchMouseLeaveActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: blurButtonActive, onChange: switchBlurButtonActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: contentClickButtonActive, onChange: switchContentClickActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    const { isChecked: contextMenuButtonActive, onChange: switchContextMenuActive } = useSwitch({\n      defaultChecked: true\n    });\n\n    // for prevent dialog to move while scrolling\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <Flex\n        data-testid={HIDE_TRIGGERS_CONTAINER}\n        id={HIDE_TRIGGERS_CONTAINER}\n        style={{ paddingInline: "var(--sb-spacing-small)" }}\n        wrap\n        direction="column"\n        justify="start"\n        align="start"\n      >\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`}\n          onClickOutside={switchClickOutsideActive}\n          position="right"\n          showTrigger={["click"]}\n          hideTrigger={["clickoutside"]}\n          content={\n            <DialogContentContainer data-testid={CLICK_OUTSIDE_DIALOG}>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            data-testid={CLICK_OUTSIDE_DIALOG_BUTTON}\n            kind="secondary"\n            active={clickOutsideButtonActive}\n            onClick={switchClickOutsideActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On click outside\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position="right"\n          showTrigger={["click"]}\n          hideTrigger={["click"]}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind="secondary"\n            active={clickButtonActive}\n            onClick={switchClickButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position="right"\n          showTrigger={["focus", "click"]}\n          hideTrigger={["blur"]}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind="secondary"\n            active={blurButtonActive}\n            onClick={switchBlurButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On blur\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          position="right"\n          showTrigger={["click"]}\n          hideTrigger={["onContentClick"]}\n          onContentClick={switchContentClickActive}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind="secondary"\n            active={contentClickButtonActive}\n            onClick={switchContentClickActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On content click\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={["mouseenter"]}\n          hideTrigger={["mouseleave"]}\n          position="right"\n          onDialogDidHide={switchMouseLeaveActive}\n          onDialogDidShow={switchMouseLeaveActive}\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind="secondary"\n            active={mouseLeaveButtonActive}\n            onClick={switchMouseLeaveActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On mouse leave\n          </Button>\n        </Dialog>\n        <Dialog\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={["click"]}\n          hideTrigger={["contextmenu"]}\n          position="right"\n          containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`}\n          onDialogDidHide={switchContextMenuActive}\n          onDialogDidShow={switchContextMenuActive}\n          content={\n            <DialogContentContainer data-testid={CONTEXT_MENU_DIALOG}>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{ width: "100%" }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <Button\n            kind="secondary"\n            active={contextMenuButtonActive}\n            style={{\n              marginBlock: "54px"\n            }}\n          >\n            On right click\n          </Button>\n        </Dialog>\n      </Flex>\n    );\n  },\n\n  name: "Hide triggers",\n\n  play: closeTriggersInteractionSuite,\n\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    },\n    docs: {\n      liveEdit: {\n        scope: {\n          HIDE_TRIGGERS_CONTAINER,\n          CLICK_OUTSIDE_DIALOG,\n          CLICK_OUTSIDE_DIALOG_BUTTON,\n          CONTEXT_MENU_DIALOG\n        }\n      }\n    }\n  }\n};\n\nexport const ControlledDialog = {\n  render: () => {\n    const { isChecked: isOpen, onChange: setIsOpen } = useSwitch({\n      defaultChecked: false\n    });\n\n    return (\n      <Dialog\n        //disable default triggers\n        showTrigger={[]}\n        // manage the opening state in the app level\n        open={isOpen}\n        content={\n          <DialogContentContainer>\n            <DialogContentContainer>\n              <Button\n                kind="secondary"\n                // @ts-ignore\n                onClick={() => setIsOpen(false)}\n              >\n                This will close as well\n              </Button>\n            </DialogContentContainer>\n          </DialogContentContainer>\n        }\n      >\n        <Button\n          // @ts-ignore\n          onClick={() => setIsOpen(!isOpen)}\n        >\n          Click me to toggle the Dialog\n        </Button>\n      </Dialog>\n    );\n  },\n\n  name: "Controlled Dialog"\n};\n\nexport const DialogWithTooltip = {\n  // for prevent dialog to move while scrolling\n  render: () => {\n    const modifiers = [\n      {\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }\n    ];\n\n    return (\n      <div style={{ padding: "80px var(--sb-spacing-small)" }}>\n        <Dialog\n          tooltip\n          modifiers={modifiers}\n          shouldShowOnMount\n          showTrigger={["click"]}\n          hideTrigger={["click"]}\n          position="right"\n          content={\n            <DialogContentContainer>\n              <Flex\n                direction="column"\n                align="start"\n                gap="small"\n                style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n              >\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({ length: 3 }, (_value, index: number) => (\n                  <Flex key={index} gap="small" style={{ width: "100%" }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>\n                ))}\n              </Flex>\n            </DialogContentContainer>\n          }\n        >\n          <IconButton icon={Info} active kind="secondary" />\n        </Dialog>\n      </div>\n    );\n  },\n\n  name: "Dialog with tooltip",\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Info }\n      }\n    }\n  }\n};\n\nexport const DisableScrollWhenDialogOpen = {\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const { isChecked: checkedTop, onChange: onChangeTop } = useSwitch({\n      defaultChecked: false\n    });\n\n    return (\n      <Flex style={{ padding: "80px var(--sb-spacing-small)" }} gap="medium">\n        <div\n          className={"scrollable"}\n          style={{\n            height: "300px",\n            width: "400px",\n            overflow: "auto"\n          }}\n        >\n          <div\n            style={{\n              height: "800px"\n            }}\n          >\n            <Dialog\n              open={checkedTop}\n              position="left"\n              showTrigger={[]}\n              hideTrigger={[]}\n              containerSelector={".scrollable"}\n              disableContainerScroll\n              content={\n                <DialogContentContainer>\n                  <Flex\n                    direction="column"\n                    align="start"\n                    gap="small"\n                    style={{ width: "150px", padding: "var(--sb-spacing-small)" }}\n                  >\n                    <Skeleton type="text" size="h1" fullWidth />\n                    {Array.from({ length: 3 }, (_value, index: number) => (\n                      <Flex key={index} gap="small" style={{ width: "100%" }}>\n                        <Skeleton type="circle" width={20} height={20} />\n                        <Skeleton type="text" size="small" fullWidth />\n                      </Flex>\n                    ))}\n                  </Flex>\n                </DialogContentContainer>\n              }\n            >\n              <Button kind="secondary" onClick={onChangeTop} active={checkedTop}>\n                Click\n              </Button>\n            </Dialog>\n          </div>\n        </div>\n      </Flex>\n    );\n  },\n\n  name: "Disable scroll when dialog open"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:50},endLoc:{col:1,line:97},startBody:{col:24,line:50},endBody:{col:1,line:97}},positions:{startLoc:{col:25,line:99},endLoc:{col:1,line:252},startBody:{col:25,line:99},endBody:{col:1,line:252}},"show-triggers":{startLoc:{col:28,line:254},endLoc:{col:1,line:402},startBody:{col:28,line:254},endBody:{col:1,line:402}},"hide-triggers":{startLoc:{col:28,line:404},endLoc:{col:1,line:686},startBody:{col:28,line:404},endBody:{col:1,line:686}},"controlled-dialog":{startLoc:{col:32,line:688},endLoc:{col:1,line:725},startBody:{col:32,line:688},endBody:{col:1,line:725}},"dialog-with-tooltip":{startLoc:{col:33,line:727},endLoc:{col:1,line:781},startBody:{col:33,line:727},endBody:{col:1,line:781}},"disable-scroll-when-dialog-open":{startLoc:{col:43,line:783},endLoc:{col:1,line:842},startBody:{col:43,line:783},endBody:{col:1,line:842}}}},docs:{liveEdit:{scope:{useSwitch:useSwitch.A}}}}};var Overview={render:function render(){return(0,jsx_runtime.jsx)("div",{style:{padding:"80px var(--sb-spacing-small)"},children:(0,jsx_runtime.jsx)(Dialog.A,{modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],shouldShowOnMount:!0,showTrigger:["click"],hideTrigger:["click"],position:"right",content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(IconButton.A,{icon:Info.A,active:!0,kind:"secondary"})})})},name:"Overview",parameters:{docs:{liveEdit:{isEnabled:!1}}}},Positions={render:function render(){var _useSwitch=(0,useSwitch.A)({defaultChecked:!1}),checkedTop=_useSwitch.isChecked,onChangeTop=_useSwitch.onChange,_useSwitch2=(0,useSwitch.A)({defaultChecked:!1}),checkedBottom=_useSwitch2.isChecked,onChangeBottom=_useSwitch2.onChange,_useSwitch3=(0,useSwitch.A)({defaultChecked:!1}),checkedRight=_useSwitch3.isChecked,onChangeRight=_useSwitch3.onChange,_useSwitch4=(0,useSwitch.A)({defaultChecked:!1}),checkedLeft=_useSwitch4.isChecked,onChangeLeft=_useSwitch4.onChange,modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{style:{padding:"80px var(--sb-spacing-small)"},gap:"medium",children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,open:checkedTop,position:"top",showTrigger:[],hideTrigger:[],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:onChangeTop,active:checkedTop,children:"Top"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,position:"bottom",showTrigger:[],hideTrigger:[],open:checkedBottom,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:onChangeBottom,active:checkedBottom,children:"Bottom"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:[],hideTrigger:[],position:"right",open:checkedRight,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:onChangeRight,active:checkedRight,children:"Right"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,position:"left",showTrigger:[],hideTrigger:[],open:checkedLeft,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:onChangeLeft,active:checkedLeft,children:"Left"})})]})},name:"Positions"},ShowTriggers={render:function render(){var _useSwitch5=(0,useSwitch.A)({defaultChecked:!1}),clickButtonActive=_useSwitch5.isChecked,onClickClickButton=_useSwitch5.onChange,_useSwitch6=(0,useSwitch.A)({defaultChecked:!1}),hoverButtonActive=_useSwitch6.isChecked,onHoverButton=_useSwitch6.onChange,_useSwitch7=(0,useSwitch.A)({defaultChecked:!1}),focusButtonActive=_useSwitch7.isChecked,onFocusButton=_useSwitch7.onChange,modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{style:{padding:"80px var(--sb-spacing-small)"},gap:"medium",children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:["click"],hideTrigger:["click"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:clickButtonActive,onClick:onClickClickButton,children:"On click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:["mouseenter"],hideTrigger:["mouseleave"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)("div",{onMouseEnter:onHoverButton,onMouseLeave:onHoverButton,children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:hoverButtonActive,children:"On mouse enter"})})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,showTrigger:["focus"],hideTrigger:["blur"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{onFocus:onFocusButton,onBlur:onFocusButton,kind:"secondary",active:focusButtonActive,children:"On focus"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:[],hideTrigger:[],position:"right",content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:!0,children:"On mount"})})]})},name:"Show triggers",parameters:{chromatic:{pauseAnimationAtEnd:!0}}},HideTriggers={render:function render(){var _useSwitch8=(0,useSwitch.A)({defaultChecked:!0}),clickButtonActive=_useSwitch8.isChecked,switchClickButtonActive=_useSwitch8.onChange,_useSwitch9=(0,useSwitch.A)({defaultChecked:!0}),clickOutsideButtonActive=_useSwitch9.isChecked,switchClickOutsideActive=_useSwitch9.onChange,_useSwitch10=(0,useSwitch.A)({defaultChecked:!0}),mouseLeaveButtonActive=_useSwitch10.isChecked,switchMouseLeaveActive=_useSwitch10.onChange,_useSwitch11=(0,useSwitch.A)({defaultChecked:!0}),blurButtonActive=_useSwitch11.isChecked,switchBlurButtonActive=_useSwitch11.onChange,_useSwitch12=(0,useSwitch.A)({defaultChecked:!0}),contentClickButtonActive=_useSwitch12.isChecked,switchContentClickActive=_useSwitch12.onChange,_useSwitch13=(0,useSwitch.A)({defaultChecked:!0}),contextMenuButtonActive=_useSwitch13.isChecked,switchContextMenuActive=_useSwitch13.onChange,modifiers=[{name:"preventOverflow",options:{mainAxis:!1}}];return(0,jsx_runtime.jsxs)(Flex.A,{"data-testid":"hide-triggers-container",id:"hide-triggers-container",style:{paddingInline:"var(--sb-spacing-small)"},wrap:!0,direction:"column",justify:"start",align:"start",children:[(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,containerSelector:"#".concat("hide-triggers-container"),onClickOutside:switchClickOutsideActive,position:"right",showTrigger:["click"],hideTrigger:["clickoutside"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{"data-testid":"click-outside-dialog",children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{"data-testid":"click-outside-button",kind:"secondary",active:clickOutsideButtonActive,onClick:switchClickOutsideActive,style:{marginBlock:"54px"},children:"On click outside"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:"right",showTrigger:["click"],hideTrigger:["click"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:clickButtonActive,onClick:switchClickButtonActive,style:{marginBlock:"54px"},children:"On click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:"right",showTrigger:["focus","click"],hideTrigger:["blur"],content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:blurButtonActive,onClick:switchBlurButtonActive,style:{marginBlock:"54px"},children:"On blur"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,position:"right",showTrigger:["click"],hideTrigger:["onContentClick"],onContentClick:switchContentClickActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:contentClickButtonActive,onClick:switchContentClickActive,style:{marginBlock:"54px"},children:"On content click"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:["mouseenter"],hideTrigger:["mouseleave"],position:"right",onDialogDidHide:switchMouseLeaveActive,onDialogDidShow:switchMouseLeaveActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:mouseLeaveButtonActive,onClick:switchMouseLeaveActive,style:{marginBlock:"54px"},children:"On mouse leave"})}),(0,jsx_runtime.jsx)(Dialog.A,{modifiers,shouldShowOnMount:!0,showTrigger:["click"],hideTrigger:["contextmenu"],position:"right",containerSelector:"#".concat("hide-triggers-container"),onDialogDidHide:switchContextMenuActive,onDialogDidShow:switchContextMenuActive,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{"data-testid":"context-menu-dialog",children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]})]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",active:contextMenuButtonActive,style:{marginBlock:"54px"},children:"On right click"})})]})},name:"Hide triggers",play:closeTriggersInteractionSuite,parameters:{chromatic:{pauseAnimationAtEnd:!0},docs:{liveEdit:{scope:{HIDE_TRIGGERS_CONTAINER:"hide-triggers-container",CLICK_OUTSIDE_DIALOG:"click-outside-dialog",CLICK_OUTSIDE_DIALOG_BUTTON:"click-outside-button",CONTEXT_MENU_DIALOG:"context-menu-dialog"}}}}},ControlledDialog={render:function render(){var _useSwitch14=(0,useSwitch.A)({defaultChecked:!1}),isOpen=_useSwitch14.isChecked,setIsOpen=_useSwitch14.onChange;return(0,jsx_runtime.jsx)(Dialog.A,{showTrigger:[],open:isOpen,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:function onClick(){return setIsOpen(!1)},children:"This will close as well"})})}),children:(0,jsx_runtime.jsx)(Button.A,{onClick:function onClick(){return setIsOpen(!isOpen)},children:"Click me to toggle the Dialog"})})},name:"Controlled Dialog"},DialogWithTooltip={render:function render(){return(0,jsx_runtime.jsx)("div",{style:{padding:"80px var(--sb-spacing-small)"},children:(0,jsx_runtime.jsx)(Dialog.A,{tooltip:!0,modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],shouldShowOnMount:!0,showTrigger:["click"],hideTrigger:["click"],position:"right",content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(IconButton.A,{icon:Info.A,active:!0,kind:"secondary"})})})},name:"Dialog with tooltip",parameters:{docs:{liveEdit:{scope:{Info:Info.A}}}}},DisableScrollWhenDialogOpen={render:function render(){var _useSwitch15=(0,useSwitch.A)({defaultChecked:!1}),checkedTop=_useSwitch15.isChecked,onChangeTop=_useSwitch15.onChange;return(0,jsx_runtime.jsx)(Flex.A,{style:{padding:"80px var(--sb-spacing-small)"},gap:"medium",children:(0,jsx_runtime.jsx)("div",{className:"scrollable",style:{height:"300px",width:"400px",overflow:"auto"},children:(0,jsx_runtime.jsx)("div",{style:{height:"800px"},children:(0,jsx_runtime.jsx)(Dialog.A,{open:checkedTop,position:"left",showTrigger:[],hideTrigger:[],containerSelector:".scrollable",disableContainerScroll:!0,content:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"small",style:{width:"150px",padding:"var(--sb-spacing-small)"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"h1",fullWidth:!0}),Array.from({length:3},(function(_value,index){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"small",style:{width:"100%"},children:[(0,jsx_runtime.jsx)(Skeleton.A,{type:"circle",width:20,height:20}),(0,jsx_runtime.jsx)(Skeleton.A,{type:"text",size:"small",fullWidth:!0})]},index)}))]})}),children:(0,jsx_runtime.jsx)(Button.A,{kind:"secondary",onClick:onChangeTop,active:checkedTop,children:"Click"})})})})})},name:"Disable scroll when dialog open"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <div style={{\n      padding: "80px var(--sb-spacing-small)"\n    }}>\n        <Dialog modifiers={[{\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }]} shouldShowOnMount showTrigger={["click"]} hideTrigger={["click"]} position={"right"} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <IconButton icon={Info} active kind="secondary" />\n        </Dialog>\n      </div>;\n  },\n  name: "Overview",\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Positions.parameters={...Positions.parameters,docs:{...Positions.parameters?.docs,source:{originalSource:'{\n  render:\n  // for prevent dialog to move while scrolling\n  () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: checkedTop,\n      onChange: onChangeTop\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedBottom,\n      onChange: onChangeBottom\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedRight,\n      onChange: onChangeRight\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: checkedLeft,\n      onChange: onChangeLeft\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex style={{\n      padding: "80px var(--sb-spacing-small)"\n    }} gap="medium">\n          <Dialog modifiers={modifiers} open={checkedTop} position="top" showTrigger={[]} hideTrigger={[]} content={<DialogContentContainer>\n                <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>)}\n                </Flex>\n              </DialogContentContainer>}>\n            <Button kind="secondary" onClick={onChangeTop} active={checkedTop}>\n              Top\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} position="bottom" showTrigger={[]} hideTrigger={[]} open={checkedBottom} content={<DialogContentContainer>\n                <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>)}\n                </Flex>\n              </DialogContentContainer>}>\n            <Button kind="secondary" onClick={onChangeBottom} active={checkedBottom}>\n              Bottom\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} showTrigger={[]} hideTrigger={[]} position="right" open={checkedRight} content={<DialogContentContainer>\n                <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>)}\n                </Flex>\n              </DialogContentContainer>}>\n            <Button kind="secondary" onClick={onChangeRight} active={checkedRight}>\n              Right\n            </Button>\n          </Dialog>\n          <Dialog modifiers={modifiers} position="left" showTrigger={[]} hideTrigger={[]} open={checkedLeft} content={<DialogContentContainer>\n                <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                  <Skeleton type="text" size="h1" fullWidth />\n                  {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                      <Skeleton type="circle" width={20} height={20} />\n                      <Skeleton type="text" size="small" fullWidth />\n                    </Flex>)}\n                </Flex>\n              </DialogContentContainer>}>\n            <Button kind="secondary" onClick={onChangeLeft} active={checkedLeft}>\n              Left\n            </Button>\n          </Dialog>\n        </Flex>;\n  },\n  name: "Positions"\n}',...Positions.parameters?.docs?.source}}},ShowTriggers.parameters={...ShowTriggers.parameters,docs:{...ShowTriggers.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const {\n      isChecked: clickButtonActive,\n      onChange: onClickClickButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: hoverButtonActive,\n      onChange: onHoverButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const {\n      isChecked: focusButtonActive,\n      onChange: onFocusButton\n    } = useSwitch({\n      defaultChecked: false\n    });\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex style={{\n      padding: "80px var(--sb-spacing-small)"\n    }} gap="medium">\n        <Dialog modifiers={modifiers} showTrigger={["click"]} hideTrigger={["click"]} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={clickButtonActive} onClick={onClickClickButton}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} showTrigger={["mouseenter"]} hideTrigger={["mouseleave"]} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <div onMouseEnter={onHoverButton} onMouseLeave={onHoverButton}>\n            <Button kind="secondary" active={hoverButtonActive}>\n              On mouse enter\n            </Button>\n          </div>\n        </Dialog>\n        <Dialog modifiers={modifiers} showTrigger={["focus"]} hideTrigger={["blur"]} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <Button onFocus={onFocusButton} onBlur={onFocusButton} kind="secondary" active={focusButtonActive}>\n            On focus\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={[]} hideTrigger={[]} position="right" content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active>\n            On mount\n          </Button>\n        </Dialog>\n      </Flex>;\n  },\n  name: "Show triggers",\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    }\n  }\n}',...ShowTriggers.parameters?.docs?.source}}},HideTriggers.parameters={...HideTriggers.parameters,docs:{...HideTriggers.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: clickButtonActive,\n      onChange: switchClickButtonActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: clickOutsideButtonActive,\n      onChange: switchClickOutsideActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: mouseLeaveButtonActive,\n      onChange: switchMouseLeaveActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: blurButtonActive,\n      onChange: switchBlurButtonActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: contentClickButtonActive,\n      onChange: switchContentClickActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n    const {\n      isChecked: contextMenuButtonActive,\n      onChange: switchContextMenuActive\n    } = useSwitch({\n      defaultChecked: true\n    });\n\n    // for prevent dialog to move while scrolling\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <Flex data-testid={HIDE_TRIGGERS_CONTAINER} id={HIDE_TRIGGERS_CONTAINER} style={{\n      paddingInline: "var(--sb-spacing-small)"\n    }} wrap direction="column" justify="start" align="start">\n        <Dialog modifiers={modifiers} shouldShowOnMount containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`} onClickOutside={switchClickOutsideActive} position="right" showTrigger={["click"]} hideTrigger={["clickoutside"]} content={<DialogContentContainer data-testid={CLICK_OUTSIDE_DIALOG}>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button data-testid={CLICK_OUTSIDE_DIALOG_BUTTON} kind="secondary" active={clickOutsideButtonActive} onClick={switchClickOutsideActive} style={{\n          marginBlock: "54px"\n        }}>\n            On click outside\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position="right" showTrigger={["click"]} hideTrigger={["click"]} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={clickButtonActive} onClick={switchClickButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position="right" showTrigger={["focus", "click"]} hideTrigger={["blur"]} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={blurButtonActive} onClick={switchBlurButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On blur\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount position="right" showTrigger={["click"]} hideTrigger={["onContentClick"]} onContentClick={switchContentClickActive} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={contentClickButtonActive} onClick={switchContentClickActive} style={{\n          marginBlock: "54px"\n        }}>\n            On content click\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={["mouseenter"]} hideTrigger={["mouseleave"]} position="right" onDialogDidHide={switchMouseLeaveActive} onDialogDidShow={switchMouseLeaveActive} content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={mouseLeaveButtonActive} onClick={switchMouseLeaveActive} style={{\n          marginBlock: "54px"\n        }}>\n            On mouse leave\n          </Button>\n        </Dialog>\n        <Dialog modifiers={modifiers} shouldShowOnMount showTrigger={["click"]} hideTrigger={["contextmenu"]} position="right" containerSelector={`#${HIDE_TRIGGERS_CONTAINER}`} onDialogDidHide={switchContextMenuActive} onDialogDidShow={switchContextMenuActive} content={<DialogContentContainer data-testid={CONTEXT_MENU_DIALOG}>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                <Flex gap="small" style={{\n            width: "100%"\n          }}>\n                  <Skeleton type="circle" width={20} height={20} />\n                  <Skeleton type="text" size="small" fullWidth />\n                </Flex>\n              </Flex>\n            </DialogContentContainer>}>\n          <Button kind="secondary" active={contextMenuButtonActive} style={{\n          marginBlock: "54px"\n        }}>\n            On right click\n          </Button>\n        </Dialog>\n      </Flex>;\n  },\n  name: "Hide triggers",\n  play: closeTriggersInteractionSuite,\n  parameters: {\n    chromatic: {\n      pauseAnimationAtEnd: true\n    },\n    docs: {\n      liveEdit: {\n        scope: {\n          HIDE_TRIGGERS_CONTAINER,\n          CLICK_OUTSIDE_DIALOG,\n          CLICK_OUTSIDE_DIALOG_BUTTON,\n          CONTEXT_MENU_DIALOG\n        }\n      }\n    }\n  }\n}',...HideTriggers.parameters?.docs?.source}}},ControlledDialog.parameters={...ControlledDialog.parameters,docs:{...ControlledDialog.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const {\n      isChecked: isOpen,\n      onChange: setIsOpen\n    } = useSwitch({\n      defaultChecked: false\n    });\n    return <Dialog\n    //disable default triggers\n    showTrigger={[]}\n    // manage the opening state in the app level\n    open={isOpen} content={<DialogContentContainer>\n            <DialogContentContainer>\n              <Button kind="secondary"\n        // @ts-ignore\n        onClick={() => setIsOpen(false)}>\n                This will close as well\n              </Button>\n            </DialogContentContainer>\n          </DialogContentContainer>}>\n        <Button\n      // @ts-ignore\n      onClick={() => setIsOpen(!isOpen)}>\n          Click me to toggle the Dialog\n        </Button>\n      </Dialog>;\n  },\n  name: "Controlled Dialog"\n}',...ControlledDialog.parameters?.docs?.source}}},DialogWithTooltip.parameters={...DialogWithTooltip.parameters,docs:{...DialogWithTooltip.parameters?.docs,source:{originalSource:'{\n  // for prevent dialog to move while scrolling\n  render: () => {\n    const modifiers = [{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }];\n    return <div style={{\n      padding: "80px var(--sb-spacing-small)"\n    }}>\n        <Dialog tooltip modifiers={modifiers} shouldShowOnMount showTrigger={["click"]} hideTrigger={["click"]} position="right" content={<DialogContentContainer>\n              <Flex direction="column" align="start" gap="small" style={{\n          width: "150px",\n          padding: "var(--sb-spacing-small)"\n        }}>\n                <Skeleton type="text" size="h1" fullWidth />\n                {Array.from({\n            length: 3\n          }, (_value, index: number) => <Flex key={index} gap="small" style={{\n            width: "100%"\n          }}>\n                    <Skeleton type="circle" width={20} height={20} />\n                    <Skeleton type="text" size="small" fullWidth />\n                  </Flex>)}\n              </Flex>\n            </DialogContentContainer>}>\n          <IconButton icon={Info} active kind="secondary" />\n        </Dialog>\n      </div>;\n  },\n  name: "Dialog with tooltip",\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Info\n        }\n      }\n    }\n  }\n}',...DialogWithTooltip.parameters?.docs?.source}}},DisableScrollWhenDialogOpen.parameters={...DisableScrollWhenDialogOpen.parameters,docs:{...DisableScrollWhenDialogOpen.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    // For maintain active state of each button according to the dialog open state (this hooks is available for your usage)\n    const {\n      isChecked: checkedTop,\n      onChange: onChangeTop\n    } = useSwitch({\n      defaultChecked: false\n    });\n    return <Flex style={{\n      padding: "80px var(--sb-spacing-small)"\n    }} gap="medium">\n        <div className={"scrollable"} style={{\n        height: "300px",\n        width: "400px",\n        overflow: "auto"\n      }}>\n          <div style={{\n          height: "800px"\n        }}>\n            <Dialog open={checkedTop} position="left" showTrigger={[]} hideTrigger={[]} containerSelector={".scrollable"} disableContainerScroll content={<DialogContentContainer>\n                  <Flex direction="column" align="start" gap="small" style={{\n              width: "150px",\n              padding: "var(--sb-spacing-small)"\n            }}>\n                    <Skeleton type="text" size="h1" fullWidth />\n                    {Array.from({\n                length: 3\n              }, (_value, index: number) => <Flex key={index} gap="small" style={{\n                width: "100%"\n              }}>\n                        <Skeleton type="circle" width={20} height={20} />\n                        <Skeleton type="text" size="small" fullWidth />\n                      </Flex>)}\n                  </Flex>\n                </DialogContentContainer>}>\n              <Button kind="secondary" onClick={onChangeTop} active={checkedTop}>\n                Click\n              </Button>\n            </Dialog>\n          </div>\n        </div>\n      </Flex>;\n  },\n  name: "Disable scroll when dialog open"\n}',...DisableScrollWhenDialogOpen.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Positions","ShowTriggers","HideTriggers","ControlledDialog","DialogWithTooltip","DisableScrollWhenDialogOpen"]},"./src/__tests__/interactions-helper.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>resetFocus});var _storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/@storybook/testing-library/dist/index.mjs");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _regeneratorRuntime(){_regeneratorRuntime=function _regeneratorRuntime(){return e};var t,e={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(t,e,r){t[e]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function define(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{define({},"")}catch(t){define=function define(t,e,r){return t[e]=r}}function wrap(t,e,r,n){var i=e&&e.prototype instanceof Generator?e:Generator,a=Object.create(i.prototype),c=new Context(n||[]);return o(a,"_invoke",{value:makeInvokeMethod(t,r,c)}),a}function tryCatch(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}e.wrap=wrap;var h="suspendedStart",l="suspendedYield",f="executing",s="completed",y={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var p={};define(p,a,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(values([])));v&&v!==r&&n.call(v,a)&&(p=v);var g=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(p);function defineIteratorMethods(t){["next","throw","return"].forEach((function(e){define(t,e,(function(t){return this._invoke(e,t)}))}))}function AsyncIterator(t,e){function invoke(r,o,i,a){var c=tryCatch(t[r],t,o);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==_typeof(h)&&n.call(h,"__await")?e.resolve(h.__await).then((function(t){invoke("next",t,i,a)}),(function(t){invoke("throw",t,i,a)})):e.resolve(h).then((function(t){u.value=t,i(u)}),(function(t){return invoke("throw",t,i,a)}))}a(c.arg)}var r;o(this,"_invoke",{value:function value(t,n){function callInvokeWithMethodAndArg(){return new e((function(e,r){invoke(t,n,e,r)}))}return r=r?r.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(e,r,n){var o=h;return function(i,a){if(o===f)throw Error("Generator is already running");if(o===s){if("throw"===i)throw a;return{value:t,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var u=maybeInvokeDelegate(c,n);if(u){if(u===y)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===h)throw o=s,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=f;var p=tryCatch(e,r,n);if("normal"===p.type){if(o=n.done?s:l,p.arg===y)continue;return{value:p.arg,done:n.done}}"throw"===p.type&&(o=s,n.method="throw",n.arg=p.arg)}}}function maybeInvokeDelegate(e,r){var n=r.method,o=e.iterator[n];if(o===t)return r.delegate=null,"throw"===n&&e.iterator.return&&(r.method="return",r.arg=t,maybeInvokeDelegate(e,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),y;var i=tryCatch(o,e.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,y;var a=i.arg;return a?a.done?(r[e.resultName]=a.value,r.next=e.nextLoc,"return"!==r.method&&(r.method="next",r.arg=t),r.delegate=null,y):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,y)}function pushTryEntry(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function resetTryEntry(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function Context(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(pushTryEntry,this),this.reset(!0)}function values(e){if(e||""===e){var r=e[a];if(r)return r.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function next(){for(;++o<e.length;)if(n.call(e,o))return next.value=e[o],next.done=!1,next;return next.value=t,next.done=!0,next};return i.next=i}}throw new TypeError(_typeof(e)+" is not iterable")}return GeneratorFunction.prototype=GeneratorFunctionPrototype,o(g,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),o(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,u,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===GeneratorFunction||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,GeneratorFunctionPrototype):(t.__proto__=GeneratorFunctionPrototype,define(t,u,"GeneratorFunction")),t.prototype=Object.create(g),t},e.awrap=function(t){return{__await:t}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,c,(function(){return this})),e.AsyncIterator=AsyncIterator,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new AsyncIterator(wrap(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},defineIteratorMethods(g),define(g,u,"Generator"),define(g,a,(function(){return this})),define(g,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function next(){for(;r.length;){var t=r.pop();if(t in e)return next.value=t,next.done=!1,next}return next.done=!0,next}},e.values=values,Context.prototype={constructor:Context,reset:function reset(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(resetTryEntry),!e)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=t)},stop:function stop(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function dispatchException(e){if(this.done)throw e;var r=this;function handle(n,o){return a.type="throw",a.arg=e,r.next=n,o&&(r.method="next",r.arg=t),!!o}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return handle("end");if(i.tryLoc<=this.prev){var c=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(c&&u){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0);if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return handle(i.catchLoc,!0)}else{if(!u)throw Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return handle(i.finallyLoc)}}}},abrupt:function abrupt(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,y):this.complete(a)},complete:function complete(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),y},finish:function finish(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),resetTryEntry(r),y}},catch:function _catch(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;resetTryEntry(r)}return o}}throw Error("illegal catch attempt")},delegateYield:function delegateYield(e,r,n){return this.delegate={iterator:values(e),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=t),y}},e}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw)}function resetFocus(){return _resetFocus.apply(this,arguments)}function _resetFocus(){return _resetFocus=function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value)}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err)}_next(void 0)}))}}(_regeneratorRuntime().mark((function _callee(){var focusTrap;return _regeneratorRuntime().wrap((function _callee$(_context){for(;;)switch(_context.prev=_context.next){case 0:return focusTrap=document.querySelector("[data-testid=focusTrap]"),_context.next=3,_storybook_testing_library__WEBPACK_IMPORTED_MODULE_0__.Q4.click(focusTrap);case 3:case"end":return _context.stop()}}),_callee)}))),_resetFocus.apply(this,arguments)}}}]);