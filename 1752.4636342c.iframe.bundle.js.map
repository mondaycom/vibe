{"version":3,"file":"1752.4636342c.iframe.bundle.js","mappings":";;;;AAiXA","sources":["webpack://@vibe/core/../../node_modules/@storybook/testing-library/dist/index.mjs"],"sourcesContent":["// node_modules/@storybook/global/dist/index.mjs\nvar scope = (() => {\n  let win;\n  return typeof window < \"u\" ? win = window : typeof globalThis < \"u\" ? win = globalThis : typeof global < \"u\" ? win = global : typeof self < \"u\" ? win = self : win = {}, win;\n})();\n\n// node_modules/@storybook/client-logger/dist/index.mjs\nvar { LOGLEVEL } = scope, levels = { trace: 1, debug: 2, info: 3, warn: 4, error: 5, silent: 10 }, currentLogLevelString = LOGLEVEL, currentLogLevelNumber = levels[currentLogLevelString] || levels.info, logger = { trace: (message, ...rest) => {\n  currentLogLevelNumber <= levels.trace && console.trace(message, ...rest);\n}, debug: (message, ...rest) => {\n  currentLogLevelNumber <= levels.debug && console.debug(message, ...rest);\n}, info: (message, ...rest) => {\n  currentLogLevelNumber <= levels.info && console.info(message, ...rest);\n}, warn: (message, ...rest) => {\n  currentLogLevelNumber <= levels.warn && console.warn(message, ...rest);\n}, error: (message, ...rest) => {\n  currentLogLevelNumber <= levels.error && console.error(message, ...rest);\n}, log: (message, ...rest) => {\n  currentLogLevelNumber < levels.silent && console.log(message, ...rest);\n} }, logged = /* @__PURE__ */ new Set(), once = (type) => (message, ...rest) => {\n  if (!logged.has(message))\n    return logged.add(message), logger[type](message, ...rest);\n};\nonce.clear = () => logged.clear();\nonce.trace = once(\"trace\");\nonce.debug = once(\"debug\");\nonce.info = once(\"info\");\nonce.warn = once(\"warn\");\nonce.error = once(\"error\");\nonce.log = once(\"log\");\nvar deprecate = once(\"warn\"), pretty = (type) => (...args) => {\n  let argArray = [];\n  if (args.length) {\n    let startTagRe = /<span\\s+style=(['\"])([^'\"]*)\\1\\s*>/gi, endTagRe = /<\\/span>/gi, reResultArray;\n    for (argArray.push(args[0].replace(startTagRe, \"%c\").replace(endTagRe, \"%c\")); reResultArray = startTagRe.exec(args[0]); )\n      argArray.push(reResultArray[2]), argArray.push(\"\");\n    for (let j = 1; j < args.length; j++)\n      argArray.push(args[j]);\n  }\n  logger[type].apply(logger, argArray);\n};\npretty.trace = pretty(\"trace\");\npretty.debug = pretty(\"debug\");\npretty.info = pretty(\"info\");\npretty.warn = pretty(\"warn\");\npretty.error = pretty(\"error\");\n\n// node_modules/@storybook/channels/dist/chunk-NH5GSF3H.mjs\nvar isMulti = (args) => args.transports !== void 0, generateRandomId = () => Math.random().toString(16).slice(2), Channel = class {\n  constructor(input = {}) {\n    this.sender = generateRandomId(), this.events = {}, this.data = {}, this.transports = [], this.isAsync = input.async || !1, isMulti(input) ? (this.transports = input.transports || [], this.transports.forEach((t) => {\n      t.setHandler((event) => this.handleEvent(event));\n    })) : this.transports = input.transport ? [input.transport] : [], this.transports.forEach((t) => {\n      t.setHandler((event) => this.handleEvent(event));\n    });\n  }\n  get hasTransport() {\n    return this.transports.length > 0;\n  }\n  addListener(eventName, listener) {\n    this.events[eventName] = this.events[eventName] || [], this.events[eventName].push(listener);\n  }\n  emit(eventName, ...args) {\n    let event = { type: eventName, args, from: this.sender }, options = {};\n    args.length >= 1 && args[0] && args[0].options && (options = args[0].options);\n    let handler = () => {\n      this.transports.forEach((t) => {\n        t.send(event, options);\n      }), this.handleEvent(event);\n    };\n    this.isAsync ? setImmediate(handler) : handler();\n  }\n  last(eventName) {\n    return this.data[eventName];\n  }\n  eventNames() {\n    return Object.keys(this.events);\n  }\n  listenerCount(eventName) {\n    let listeners = this.listeners(eventName);\n    return listeners ? listeners.length : 0;\n  }\n  listeners(eventName) {\n    return this.events[eventName] || void 0;\n  }\n  once(eventName, listener) {\n    let onceListener = this.onceListener(eventName, listener);\n    this.addListener(eventName, onceListener);\n  }\n  removeAllListeners(eventName) {\n    eventName ? this.events[eventName] && delete this.events[eventName] : this.events = {};\n  }\n  removeListener(eventName, listener) {\n    let listeners = this.listeners(eventName);\n    listeners && (this.events[eventName] = listeners.filter((l) => l !== listener));\n  }\n  on(eventName, listener) {\n    this.addListener(eventName, listener);\n  }\n  off(eventName, listener) {\n    this.removeListener(eventName, listener);\n  }\n  handleEvent(event) {\n    let listeners = this.listeners(event.type);\n    listeners && listeners.length && listeners.forEach((fn) => {\n      fn.apply(event, event.args);\n    }), this.data[event.type] = event.args;\n  }\n  onceListener(eventName, listener) {\n    let onceListener = (...args) => (this.removeListener(eventName, onceListener), listener(...args));\n    return onceListener;\n  }\n};\n\n// node_modules/@storybook/core-events/dist/index.mjs\nvar events = ((events2) => (events2.CHANNEL_CREATED = \"channelCreated\", events2.CONFIG_ERROR = \"configError\", events2.STORY_INDEX_INVALIDATED = \"storyIndexInvalidated\", events2.STORY_SPECIFIED = \"storySpecified\", events2.SET_CONFIG = \"setConfig\", events2.SET_STORIES = \"setStories\", events2.SET_INDEX = \"setIndex\", events2.SET_CURRENT_STORY = \"setCurrentStory\", events2.CURRENT_STORY_WAS_SET = \"currentStoryWasSet\", events2.FORCE_RE_RENDER = \"forceReRender\", events2.FORCE_REMOUNT = \"forceRemount\", events2.PRELOAD_ENTRIES = \"preloadStories\", events2.STORY_PREPARED = \"storyPrepared\", events2.DOCS_PREPARED = \"docsPrepared\", events2.STORY_CHANGED = \"storyChanged\", events2.STORY_UNCHANGED = \"storyUnchanged\", events2.STORY_RENDERED = \"storyRendered\", events2.STORY_MISSING = \"storyMissing\", events2.STORY_ERRORED = \"storyErrored\", events2.STORY_THREW_EXCEPTION = \"storyThrewException\", events2.STORY_RENDER_PHASE_CHANGED = \"storyRenderPhaseChanged\", events2.PLAY_FUNCTION_THREW_EXCEPTION = \"playFunctionThrewException\", events2.UPDATE_STORY_ARGS = \"updateStoryArgs\", events2.STORY_ARGS_UPDATED = \"storyArgsUpdated\", events2.RESET_STORY_ARGS = \"resetStoryArgs\", events2.SET_GLOBALS = \"setGlobals\", events2.UPDATE_GLOBALS = \"updateGlobals\", events2.GLOBALS_UPDATED = \"globalsUpdated\", events2.REGISTER_SUBSCRIPTION = \"registerSubscription\", events2.PREVIEW_KEYDOWN = \"previewKeydown\", events2.PREVIEW_BUILDER_PROGRESS = \"preview_builder_progress\", events2.SELECT_STORY = \"selectStory\", events2.STORIES_COLLAPSE_ALL = \"storiesCollapseAll\", events2.STORIES_EXPAND_ALL = \"storiesExpandAll\", events2.DOCS_RENDERED = \"docsRendered\", events2.SHARED_STATE_CHANGED = \"sharedStateChanged\", events2.SHARED_STATE_SET = \"sharedStateSet\", events2.NAVIGATE_URL = \"navigateUrl\", events2.UPDATE_QUERY_PARAMS = \"updateQueryParams\", events2.REQUEST_WHATS_NEW_DATA = \"requestWhatsNewData\", events2.RESULT_WHATS_NEW_DATA = \"resultWhatsNewData\", events2.SET_WHATS_NEW_CACHE = \"setWhatsNewCache\", events2.TOGGLE_WHATS_NEW_NOTIFICATIONS = \"toggleWhatsNewNotifications\", events2.TELEMETRY_ERROR = \"telemetryError\", events2))(events || {});\nvar { CHANNEL_CREATED, CONFIG_ERROR, CURRENT_STORY_WAS_SET, DOCS_PREPARED, DOCS_RENDERED, FORCE_RE_RENDER, FORCE_REMOUNT, GLOBALS_UPDATED, NAVIGATE_URL, PLAY_FUNCTION_THREW_EXCEPTION, PRELOAD_ENTRIES, PREVIEW_BUILDER_PROGRESS, PREVIEW_KEYDOWN, REGISTER_SUBSCRIPTION, RESET_STORY_ARGS, SELECT_STORY, SET_CONFIG, SET_CURRENT_STORY, SET_GLOBALS, SET_INDEX, SET_STORIES, SHARED_STATE_CHANGED, SHARED_STATE_SET, STORIES_COLLAPSE_ALL, STORIES_EXPAND_ALL, STORY_ARGS_UPDATED, STORY_CHANGED, STORY_ERRORED, STORY_INDEX_INVALIDATED, STORY_MISSING, STORY_PREPARED, STORY_RENDER_PHASE_CHANGED, STORY_RENDERED, STORY_SPECIFIED, STORY_THREW_EXCEPTION, STORY_UNCHANGED, UPDATE_GLOBALS, UPDATE_QUERY_PARAMS, UPDATE_STORY_ARGS, REQUEST_WHATS_NEW_DATA, RESULT_WHATS_NEW_DATA, SET_WHATS_NEW_CACHE, TOGGLE_WHATS_NEW_NOTIFICATIONS, TELEMETRY_ERROR } = events, IGNORED_EXCEPTION = new Error(\"ignoredException\");\n\n// node_modules/@storybook/channels/dist/index.mjs\nvar { CONFIG_TYPE } = scope;\n\n// node_modules/@storybook/preview-api/dist/chunk-2WNKQWTL.mjs\nfunction mockChannel() {\n  let transport = { setHandler: () => {\n  }, send: () => {\n  } };\n  return new Channel({ transport });\n}\nvar AddonStore = class {\n  constructor() {\n    this.getChannel = () => {\n      if (!this.channel) {\n        let channel = mockChannel();\n        return this.setChannel(channel), channel;\n      }\n      return this.channel;\n    }, this.getServerChannel = () => {\n      if (!this.serverChannel)\n        throw new Error(\"Accessing non-existent serverChannel\");\n      return this.serverChannel;\n    }, this.ready = () => this.promise, this.hasChannel = () => !!this.channel, this.hasServerChannel = () => !!this.serverChannel, this.setChannel = (channel) => {\n      this.channel = channel, this.resolve();\n    }, this.setServerChannel = (channel) => {\n      this.serverChannel = channel;\n    }, this.promise = new Promise((res) => {\n      this.resolve = () => res(this.getChannel());\n    });\n  }\n}, KEY = \"__STORYBOOK_ADDONS_PREVIEW\";\nfunction getAddonsStore() {\n  return scope[KEY] || (scope[KEY] = new AddonStore()), scope[KEY];\n}\nvar addons = getAddonsStore();\n\n// node_modules/@storybook/instrumenter/dist/index.mjs\nvar CallStates = ((CallStates2) => (CallStates2.DONE = \"done\", CallStates2.ERROR = \"error\", CallStates2.ACTIVE = \"active\", CallStates2.WAITING = \"waiting\", CallStates2))(CallStates || {}), EVENTS = { CALL: \"storybook/instrumenter/call\", SYNC: \"storybook/instrumenter/sync\", START: \"storybook/instrumenter/start\", BACK: \"storybook/instrumenter/back\", GOTO: \"storybook/instrumenter/goto\", NEXT: \"storybook/instrumenter/next\", END: \"storybook/instrumenter/end\" }, controlsDisabled = { start: !1, back: !1, goto: !1, next: !1, end: !1 }, alreadyCompletedException = new Error(\"This function ran after the play function completed. Did you forget to `await` it?\"), isObject = (o) => Object.prototype.toString.call(o) === \"[object Object]\", isModule = (o) => Object.prototype.toString.call(o) === \"[object Module]\", isInstrumentable = (o) => {\n  if (!isObject(o) && !isModule(o))\n    return !1;\n  if (o.constructor === void 0)\n    return !0;\n  let proto = o.constructor.prototype;\n  return !(!isObject(proto) || Object.prototype.hasOwnProperty.call(proto, \"isPrototypeOf\") === !1);\n}, construct = (obj) => {\n  try {\n    return new obj.constructor();\n  } catch {\n    return {};\n  }\n}, getInitialState = () => ({ renderPhase: void 0, isDebugging: !1, isPlaying: !1, isLocked: !1, cursor: 0, calls: [], shadowCalls: [], callRefsByResult: /* @__PURE__ */ new Map(), chainedCallIds: /* @__PURE__ */ new Set(), ancestors: [], playUntil: void 0, resolvers: {}, syncTimeout: void 0 }), getRetainedState = (state, isDebugging = !1) => {\n  let calls = (isDebugging ? state.shadowCalls : state.calls).filter((call) => call.retain);\n  if (!calls.length)\n    return;\n  let callRefsByResult = new Map(Array.from(state.callRefsByResult.entries()).filter(([, ref]) => ref.retain));\n  return { cursor: calls.length, calls, callRefsByResult };\n}, Instrumenter = class {\n  constructor() {\n    this.initialized = !1, this.channel = addons.getChannel(), this.state = scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ || {};\n    let resetState = ({ storyId, isPlaying = !0, isDebugging = !1 }) => {\n      let state = this.getState(storyId);\n      this.setState(storyId, { ...getInitialState(), ...getRetainedState(state, isDebugging), shadowCalls: isDebugging ? state.shadowCalls : [], chainedCallIds: isDebugging ? state.chainedCallIds : /* @__PURE__ */ new Set(), playUntil: isDebugging ? state.playUntil : void 0, isPlaying, isDebugging }), this.sync(storyId);\n    };\n    this.channel.on(FORCE_REMOUNT, resetState), this.channel.on(STORY_RENDER_PHASE_CHANGED, ({ storyId, newPhase }) => {\n      let { isDebugging } = this.getState(storyId);\n      this.setState(storyId, { renderPhase: newPhase }), newPhase === \"preparing\" && isDebugging && resetState({ storyId }), newPhase === \"playing\" && resetState({ storyId, isDebugging }), newPhase === \"played\" && this.setState(storyId, { isLocked: !1, isPlaying: !1, isDebugging: !1 }), newPhase === \"errored\" && this.setState(storyId, { isLocked: !1, isPlaying: !1 });\n    }), this.channel.on(SET_CURRENT_STORY, () => {\n      this.initialized ? this.cleanup() : this.initialized = !0;\n    });\n    let start = ({ storyId, playUntil }) => {\n      this.getState(storyId).isDebugging || this.setState(storyId, ({ calls }) => ({ calls: [], shadowCalls: calls.map((call) => ({ ...call, status: \"waiting\" })), isDebugging: !0 }));\n      let log = this.getLog(storyId);\n      this.setState(storyId, ({ shadowCalls }) => {\n        if (playUntil || !log.length)\n          return { playUntil };\n        let firstRowIndex = shadowCalls.findIndex((call) => call.id === log[0].callId);\n        return { playUntil: shadowCalls.slice(0, firstRowIndex).filter((call) => call.interceptable && !call.ancestors.length).slice(-1)[0]?.id };\n      }), this.channel.emit(FORCE_REMOUNT, { storyId, isDebugging: !0 });\n    }, back = ({ storyId }) => {\n      let log = this.getLog(storyId).filter((call) => !call.ancestors.length), last = log.reduceRight((res, item, index) => res >= 0 || item.status === \"waiting\" ? res : index, -1);\n      start({ storyId, playUntil: log[last - 1]?.callId });\n    }, goto = ({ storyId, callId }) => {\n      let { calls, shadowCalls, resolvers } = this.getState(storyId), call = calls.find(({ id }) => id === callId), shadowCall = shadowCalls.find(({ id }) => id === callId);\n      if (!call && shadowCall && Object.values(resolvers).length > 0) {\n        let nextId = this.getLog(storyId).find((c) => c.status === \"waiting\")?.callId;\n        shadowCall.id !== nextId && this.setState(storyId, { playUntil: shadowCall.id }), Object.values(resolvers).forEach((resolve) => resolve());\n      } else\n        start({ storyId, playUntil: callId });\n    }, next = ({ storyId }) => {\n      let { resolvers } = this.getState(storyId);\n      if (Object.values(resolvers).length > 0)\n        Object.values(resolvers).forEach((resolve) => resolve());\n      else {\n        let nextId = this.getLog(storyId).find((c) => c.status === \"waiting\")?.callId;\n        nextId ? start({ storyId, playUntil: nextId }) : end({ storyId });\n      }\n    }, end = ({ storyId }) => {\n      this.setState(storyId, { playUntil: void 0, isDebugging: !1 }), Object.values(this.getState(storyId).resolvers).forEach((resolve) => resolve());\n    };\n    this.channel.on(EVENTS.START, start), this.channel.on(EVENTS.BACK, back), this.channel.on(EVENTS.GOTO, goto), this.channel.on(EVENTS.NEXT, next), this.channel.on(EVENTS.END, end);\n  }\n  getState(storyId) {\n    return this.state[storyId] || getInitialState();\n  }\n  setState(storyId, update) {\n    let state = this.getState(storyId), patch = typeof update == \"function\" ? update(state) : update;\n    this.state = { ...this.state, [storyId]: { ...state, ...patch } }, scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;\n  }\n  cleanup() {\n    this.state = Object.entries(this.state).reduce((acc, [storyId, state]) => {\n      let retainedState = getRetainedState(state);\n      return retainedState && (acc[storyId] = Object.assign(getInitialState(), retainedState)), acc;\n    }, {});\n    let payload = { controlStates: controlsDisabled, logItems: [] };\n    this.channel.emit(EVENTS.SYNC, payload), scope.window.parent.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER_STATE__ = this.state;\n  }\n  getLog(storyId) {\n    let { calls, shadowCalls } = this.getState(storyId), merged = [...shadowCalls];\n    calls.forEach((call, index) => {\n      merged[index] = call;\n    });\n    let seen = /* @__PURE__ */ new Set();\n    return merged.reduceRight((acc, call) => (call.args.forEach((arg) => {\n      arg?.__callId__ && seen.add(arg.__callId__);\n    }), call.path.forEach((node) => {\n      node.__callId__ && seen.add(node.__callId__);\n    }), (call.interceptable || call.exception) && !seen.has(call.id) && (acc.unshift({ callId: call.id, status: call.status, ancestors: call.ancestors }), seen.add(call.id)), acc), []);\n  }\n  instrument(obj, options) {\n    if (!isInstrumentable(obj))\n      return obj;\n    let { mutate = !1, path = [] } = options;\n    return Object.keys(obj).reduce((acc, key) => {\n      let value = obj[key];\n      return typeof value != \"function\" ? (acc[key] = this.instrument(value, { ...options, path: path.concat(key) }), acc) : typeof value.__originalFn__ == \"function\" ? (acc[key] = value, acc) : (acc[key] = (...args) => this.track(key, value, args, options), acc[key].__originalFn__ = value, Object.defineProperty(acc[key], \"name\", { value: key, writable: !1 }), Object.keys(value).length > 0 && Object.assign(acc[key], this.instrument({ ...value }, { ...options, path: path.concat(key) })), acc);\n    }, mutate ? obj : construct(obj));\n  }\n  track(method, fn, args, options) {\n    let storyId = args?.[0]?.__storyId__ || scope.__STORYBOOK_PREVIEW__?.selectionStore?.selection?.storyId, { cursor, ancestors } = this.getState(storyId);\n    this.setState(storyId, { cursor: cursor + 1 });\n    let id = `${ancestors.slice(-1)[0] || storyId} [${cursor}] ${method}`, { path = [], intercept = !1, retain = !1 } = options, interceptable = typeof intercept == \"function\" ? intercept(method, path) : intercept, call = { id, cursor, storyId, ancestors, path, method, args, interceptable, retain }, result = (interceptable && !ancestors.length ? this.intercept : this.invoke).call(this, fn, call, options);\n    return this.instrument(result, { ...options, mutate: !0, path: [{ __callId__: call.id }] });\n  }\n  intercept(fn, call, options) {\n    let { chainedCallIds, isDebugging, playUntil } = this.getState(call.storyId), isChainedUpon = chainedCallIds.has(call.id);\n    return !isDebugging || isChainedUpon || playUntil ? (playUntil === call.id && this.setState(call.storyId, { playUntil: void 0 }), this.invoke(fn, call, options)) : new Promise((resolve) => {\n      this.setState(call.storyId, ({ resolvers }) => ({ isLocked: !1, resolvers: { ...resolvers, [call.id]: resolve } }));\n    }).then(() => (this.setState(call.storyId, (state) => {\n      let { [call.id]: _, ...resolvers } = state.resolvers;\n      return { isLocked: !0, resolvers };\n    }), this.invoke(fn, call, options)));\n  }\n  invoke(fn, call, options) {\n    let { callRefsByResult, renderPhase } = this.getState(call.storyId), serializeValues = (value) => {\n      if (callRefsByResult.has(value))\n        return callRefsByResult.get(value);\n      if (value instanceof Array)\n        return value.map(serializeValues);\n      if (value instanceof Date)\n        return { __date__: { value: value.toISOString() } };\n      if (value instanceof Error) {\n        let { name, message, stack } = value;\n        return { __error__: { name, message, stack } };\n      }\n      if (value instanceof RegExp) {\n        let { flags, source } = value;\n        return { __regexp__: { flags, source } };\n      }\n      if (value instanceof scope.window.HTMLElement) {\n        let { prefix, localName, id, classList, innerText } = value, classNames = Array.from(classList);\n        return { __element__: { prefix, localName, id, classNames, innerText } };\n      }\n      return typeof value == \"function\" ? { __function__: { name: value.name } } : typeof value == \"symbol\" ? { __symbol__: { description: value.description } } : typeof value == \"object\" && value?.constructor?.name && value?.constructor?.name !== \"Object\" ? { __class__: { name: value.constructor.name } } : Object.prototype.toString.call(value) === \"[object Object]\" ? Object.fromEntries(Object.entries(value).map(([key, val]) => [key, serializeValues(val)])) : value;\n    }, info = { ...call, args: call.args.map(serializeValues) };\n    call.path.forEach((ref) => {\n      ref?.__callId__ && this.setState(call.storyId, ({ chainedCallIds }) => ({ chainedCallIds: new Set(Array.from(chainedCallIds).concat(ref.__callId__)) }));\n    });\n    let handleException = (e) => {\n      if (e instanceof Error) {\n        let { name, message, stack, callId = call.id } = e, exception = { name, message, stack, callId };\n        if (this.update({ ...info, status: \"error\", exception }), this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [e, { __callId__: call.id, retain: call.retain }]]) })), call.ancestors.length)\n          throw Object.prototype.hasOwnProperty.call(e, \"callId\") || Object.defineProperty(e, \"callId\", { value: call.id }), e;\n        if (e !== alreadyCompletedException)\n          throw logger.warn(e), IGNORED_EXCEPTION;\n      }\n      throw e;\n    };\n    try {\n      if (renderPhase === \"played\" && !call.retain)\n        throw alreadyCompletedException;\n      let finalArgs = (options.getArgs ? options.getArgs(call, this.getState(call.storyId)) : call.args).map((arg) => typeof arg != \"function\" || Object.keys(arg).length ? arg : (...args) => {\n        let { cursor, ancestors } = this.getState(call.storyId);\n        this.setState(call.storyId, { cursor: 0, ancestors: [...ancestors, call.id] });\n        let restore = () => this.setState(call.storyId, { cursor, ancestors }), willRestore = !1;\n        try {\n          let res = arg(...args);\n          return res instanceof Promise ? (willRestore = !0, res.finally(restore)) : res;\n        } finally {\n          willRestore || restore();\n        }\n      }), result = fn(...finalArgs);\n      return result && [\"object\", \"function\", \"symbol\"].includes(typeof result) && this.setState(call.storyId, (state) => ({ callRefsByResult: new Map([...Array.from(state.callRefsByResult.entries()), [result, { __callId__: call.id, retain: call.retain }]]) })), this.update({ ...info, status: result instanceof Promise ? \"active\" : \"done\" }), result instanceof Promise ? result.then((value) => (this.update({ ...info, status: \"done\" }), value), handleException) : result;\n    } catch (e) {\n      return handleException(e);\n    }\n  }\n  update(call) {\n    this.channel.emit(EVENTS.CALL, call), this.setState(call.storyId, ({ calls }) => {\n      let callsById = calls.concat(call).reduce((a, c) => Object.assign(a, { [c.id]: c }), {});\n      return { calls: Object.values(callsById).sort((a, b) => a.id.localeCompare(b.id, void 0, { numeric: !0 })) };\n    }), this.sync(call.storyId);\n  }\n  sync(storyId) {\n    let synchronize = () => {\n      let { isLocked, isPlaying } = this.getState(storyId), logItems = this.getLog(storyId), pausedAt = logItems.filter(({ ancestors }) => !ancestors.length).find((item) => item.status === \"waiting\")?.callId, hasActive = logItems.some((item) => item.status === \"active\");\n      if (isLocked || hasActive || logItems.length === 0) {\n        let payload2 = { controlStates: controlsDisabled, logItems };\n        this.channel.emit(EVENTS.SYNC, payload2);\n        return;\n      }\n      let hasPrevious = logItems.some((item) => item.status === \"done\" || item.status === \"error\"), payload = { controlStates: { start: hasPrevious, back: hasPrevious, goto: !0, next: isPlaying, end: isPlaying }, logItems, pausedAt };\n      this.channel.emit(EVENTS.SYNC, payload);\n    };\n    this.setState(storyId, ({ syncTimeout }) => (clearTimeout(syncTimeout), { syncTimeout: setTimeout(synchronize, 0) }));\n  }\n};\nfunction instrument(obj, options = {}) {\n  try {\n    let forceInstrument = !1, skipInstrument = !1;\n    return scope.window.location?.search?.includes(\"instrument=true\") ? forceInstrument = !0 : scope.window.location?.search?.includes(\"instrument=false\") && (skipInstrument = !0), scope.window.parent === scope.window && !forceInstrument || skipInstrument ? obj : (scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ || (scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__ = new Instrumenter()), scope.window.__STORYBOOK_ADDON_INTERACTIONS_INSTRUMENTER__.instrument(obj, options));\n  } catch (e) {\n    return once.warn(e), obj;\n  }\n}\n\n// src/index.ts\nimport * as domTestingLibrary from \"@testing-library/dom\";\nimport _userEventObj from \"@testing-library/user-event\";\nimport dedent from \"ts-dedent\";\nvar _userEvent = _userEventObj.default || _userEventObj, testingLibrary = instrument(\n  { ...domTestingLibrary },\n  {\n    intercept: (method, path) => path[0] === \"fireEvent\" || method.startsWith(\"findBy\") || method.startsWith(\"waitFor\")\n  }\n);\ntestingLibrary.screen = Object.entries(testingLibrary.screen).reduce(\n  (acc, [key, val]) => Object.defineProperty(acc, key, {\n    get() {\n      return once.warn(dedent`\n          You are using Testing Library's \\`screen\\` object. Use \\`within(canvasElement)\\` instead.\n          More info: https://storybook.js.org/docs/react/essentials/interactions\n        `), val;\n    }\n  }),\n  { ...testingLibrary.screen }\n);\nvar {\n  buildQueries,\n  configure,\n  createEvent,\n  findAllByAltText,\n  findAllByDisplayValue,\n  findAllByLabelText,\n  findAllByPlaceholderText,\n  findAllByRole,\n  findAllByTestId,\n  findAllByText,\n  findAllByTitle,\n  findByAltText,\n  findByDisplayValue,\n  findByLabelText,\n  findByPlaceholderText,\n  findByRole,\n  findByTestId,\n  findByText,\n  findByTitle,\n  fireEvent,\n  getAllByAltText,\n  getAllByDisplayValue,\n  getAllByLabelText,\n  getAllByPlaceholderText,\n  getAllByRole,\n  getAllByTestId,\n  getAllByText,\n  getAllByTitle,\n  getByAltText,\n  getByDisplayValue,\n  getByLabelText,\n  getByPlaceholderText,\n  getByRole,\n  getByTestId,\n  getByText,\n  getByTitle,\n  getConfig,\n  getDefaultNormalizer,\n  getElementError,\n  getNodeText,\n  getQueriesForElement,\n  getRoles,\n  getSuggestedQuery,\n  isInaccessible,\n  logDOM,\n  logRoles,\n  prettyDOM,\n  queries,\n  queryAllByAltText,\n  queryAllByAttribute,\n  queryAllByDisplayValue,\n  queryAllByLabelText,\n  queryAllByPlaceholderText,\n  queryAllByRole,\n  queryAllByTestId,\n  queryAllByText,\n  queryAllByTitle,\n  queryByAltText,\n  queryByAttribute,\n  queryByDisplayValue,\n  queryByLabelText,\n  queryByPlaceholderText,\n  queryByRole,\n  queryByTestId,\n  queryByText,\n  queryByTitle,\n  queryHelpers,\n  screen,\n  waitFor,\n  waitForElementToBeRemoved,\n  within,\n  prettyFormat\n} = testingLibrary, userEvent = instrument(\n  { userEvent: _userEvent },\n  { intercept: !0 }\n).userEvent;\nexport {\n  buildQueries,\n  configure,\n  createEvent,\n  findAllByAltText,\n  findAllByDisplayValue,\n  findAllByLabelText,\n  findAllByPlaceholderText,\n  findAllByRole,\n  findAllByTestId,\n  findAllByText,\n  findAllByTitle,\n  findByAltText,\n  findByDisplayValue,\n  findByLabelText,\n  findByPlaceholderText,\n  findByRole,\n  findByTestId,\n  findByText,\n  findByTitle,\n  fireEvent,\n  getAllByAltText,\n  getAllByDisplayValue,\n  getAllByLabelText,\n  getAllByPlaceholderText,\n  getAllByRole,\n  getAllByTestId,\n  getAllByText,\n  getAllByTitle,\n  getByAltText,\n  getByDisplayValue,\n  getByLabelText,\n  getByPlaceholderText,\n  getByRole,\n  getByTestId,\n  getByText,\n  getByTitle,\n  getConfig,\n  getDefaultNormalizer,\n  getElementError,\n  getNodeText,\n  getQueriesForElement,\n  getRoles,\n  getSuggestedQuery,\n  isInaccessible,\n  logDOM,\n  logRoles,\n  prettyDOM,\n  prettyFormat,\n  queries,\n  queryAllByAltText,\n  queryAllByAttribute,\n  queryAllByDisplayValue,\n  queryAllByLabelText,\n  queryAllByPlaceholderText,\n  queryAllByRole,\n  queryAllByTestId,\n  queryAllByText,\n  queryAllByTitle,\n  queryByAltText,\n  queryByAttribute,\n  queryByDisplayValue,\n  queryByLabelText,\n  queryByPlaceholderText,\n  queryByRole,\n  queryByTestId,\n  queryByText,\n  queryByTitle,\n  queryHelpers,\n  screen,\n  userEvent,\n  waitFor,\n  waitForElementToBeRemoved,\n  within\n};\n"],"names":[],"sourceRoot":""}