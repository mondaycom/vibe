"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[4769],{"./src/components/MultiStepIndicator/__stories__/MultiStepIndicator.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{FulfilledIcons:()=>FulfilledIcons,MultiStepWizard:()=>MultiStepWizard,Overview:()=>Overview,Placements:()=>Placements,Sizes:()=>Sizes,TransitionAnimation:()=>TransitionAnimation,Types:()=>Types,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/MultiStepIndicator/MultiStepIndicator.tsx"),vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../storybook-blocks/dist/src/functions/createComponentTemplate.js"),_vibe_icons__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../icons/dist/react/Upgrade.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:'import React from "react";\nimport { useMemo, useState, useEffect } from "react";\nimport MultiStepIndicator from "../MultiStepIndicator";\nimport { createComponentTemplate } from "vibe-storybook-components";\nimport { Upgrade } from "@vibe/icons";\nimport { Step } from "../MultiStep.types";\n\nexport default {\n  title: "Components/MultiStepIndicator",\n  component: MultiStepIndicator\n};\n\nconst multiStepIndicatorTemplate = createComponentTemplate(MultiStepIndicator);\n\nexport const Overview = {\n  render: multiStepIndicatorTemplate.bind({}),\n  name: "Overview",\n\n  args: {\n    steps: [\n      {\n        key: "FULFILLED",\n        status: "fulfilled",\n        titleText: "Everything you can do with Monday",\n        subtitleText: "Subtitle"\n      },\n      {\n        key: "PENDING",\n        status: "pending",\n        titleText: "Everything you can do with Monday",\n        subtitleText: "Subtitle"\n      },\n      {\n        key: "PENDING-2",\n        status: "pending",\n        titleText: "Everything you can do with Monday",\n        subtitleText: "Subtitle"\n      }\n    ]\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const Placements = {\n  render: () => {\n    const steps: Step[] = useMemo(\n      () => [\n        {\n          key: "FULFILLED",\n          status: "fulfilled",\n          titleText: "Fulfilled title",\n          subtitleText: "Fulfilled subtitle"\n        },\n        {\n          key: "ACTIVE",\n          status: "active",\n          titleText: "Active title",\n          subtitleText: "Active subtitle"\n        },\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "Pending title",\n          subtitleText: "Pending subtitle"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div>\n        Vertical\n        <MultiStepIndicator textPlacement="vertical" steps={steps} />\n        Horizontal\n        <MultiStepIndicator steps={steps} />\n      </div>\n    );\n  }\n};\n\nexport const Types = {\n  render: () => {\n    const steps: Step[] = useMemo(\n      () => [\n        {\n          key: "FULFILLED",\n          status: "fulfilled",\n          titleText: "Fulfilled title",\n          subtitleText: "Fulfilled subtitle"\n        },\n        {\n          key: "ACTIVE",\n          status: "active",\n          titleText: "Active title",\n          subtitleText: "Active subtitle"\n        },\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "Pending title",\n          subtitleText: "Pending subtitle"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div>\n        Primary\n        <MultiStepIndicator steps={steps} type="primary" />\n        Success\n        <MultiStepIndicator steps={steps} type="success" />\n        Danger\n        <MultiStepIndicator steps={steps} type="danger" />\n        Dark\n        <MultiStepIndicator steps={steps} type="dark" />\n      </div>\n    );\n  }\n};\n\nexport const Sizes = {\n  render: () => {\n    const steps: Step[] = useMemo(\n      () => [\n        {\n          key: "FULFILLED",\n          status: "fulfilled",\n          titleText: "Fulfilled title",\n          subtitleText: "Fulfilled subtitle"\n        },\n        {\n          key: "ACTIVE",\n          status: "active",\n          titleText: "Active title",\n          subtitleText: "Active subtitle"\n        },\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "Pending",\n          subtitleText: "Pending subtitle"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div>\n        Regular\n        <MultiStepIndicator steps={steps} size="regular" />\n        Compact\n        <MultiStepIndicator steps={steps} size="compact" />\n      </div>\n    );\n  }\n};\n\nexport const FulfilledIcons = {\n  render: () => {\n    const steps: Step[] = useMemo(\n      () => [\n        {\n          key: "FULFILLED",\n          status: "fulfilled",\n          titleText: "Fulfilled title",\n          subtitleText: "Fulfilled subtitle"\n        },\n        {\n          key: "ACTIVE",\n          status: "active",\n          titleText: "Active title",\n          subtitleText: "Active subtitle"\n        },\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "Pending title",\n          subtitleText: "Pending subtitle"\n        }\n      ],\n      []\n    );\n\n    return (\n      <div>\n        Default (check)\n        <MultiStepIndicator steps={steps} />\n        Number instead of icon\n        <MultiStepIndicator steps={steps} isFulfilledStepDisplayNumber={true} />\n        Custom\n        <MultiStepIndicator steps={steps} fulfilledStepIcon={Upgrade} />\n      </div>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Upgrade }\n      }\n    }\n  }\n};\n\nexport const TransitionAnimation = {\n  render: () => {\n    const initialSteps = useMemo<Step[]>(\n      () => [\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "First step title",\n          subtitleText: "First subtitle"\n        },\n        {\n          key: "PENDING-2",\n          status: "pending",\n          titleText: "Second step title",\n          subtitleText: "Second subtitle"\n        },\n        {\n          key: "PENDING-3",\n          status: "pending",\n          titleText: "Third step title",\n          subtitleText: "Third subtitle"\n        }\n      ],\n      []\n    );\n\n    const [steps, setSteps] = useState<Step[]>(initialSteps);\n\n    useEffect(() => {\n      const getNextStepsState = (currentSteps: Step[]): Step[] => {\n        const currentStepIndex = currentSteps.findIndex(step => step.status !== "fulfilled");\n\n        if (currentStepIndex === -1) {\n          return initialSteps;\n        }\n\n        const newSteps = [...currentSteps];\n        const stepToUpdate = newSteps[currentStepIndex];\n\n        if (stepToUpdate.status === "pending") {\n          newSteps[currentStepIndex] = { ...stepToUpdate, status: "active" };\n        } else {\n          newSteps[currentStepIndex] = { ...stepToUpdate, status: "fulfilled" };\n        }\n\n        return newSteps;\n      };\n\n      const interval = setInterval(() => {\n        setSteps(prevSteps => getNextStepsState(prevSteps));\n      }, 2000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    }, [initialSteps]);\n\n    return <MultiStepIndicator steps={steps} />;\n  }\n};\n\nexport const MultiStepWizard = {\n  render: () => {\n    const steps: Step[] = useMemo(\n      () => [\n        {\n          key: "FULFILLED",\n          status: "fulfilled",\n          titleText: "Step 1",\n          subtitleText: "Learn how to use monday CRM"\n        },\n        {\n          key: "PENDING",\n          status: "pending",\n          titleText: "Step 2",\n          subtitleText: "Integrate your email"\n        },\n        {\n          key: "PENDING-3",\n          status: "pending",\n          titleText: "Step 3",\n          subtitleText: "Import your data"\n        }\n      ],\n      []\n    );\n\n    return <MultiStepIndicator steps={steps} textPlacement="vertical" />;\n  }\n};\n',locationsMap:{overview:{startLoc:{col:24,line:15},endLoc:{col:1,line:48},startBody:{col:24,line:15},endBody:{col:1,line:48}},placements:{startLoc:{col:26,line:50},endLoc:{col:1,line:85},startBody:{col:26,line:50},endBody:{col:1,line:85}},types:{startLoc:{col:21,line:87},endLoc:{col:1,line:126},startBody:{col:21,line:87},endBody:{col:1,line:126}},sizes:{startLoc:{col:21,line:128},endLoc:{col:1,line:163},startBody:{col:21,line:128},endBody:{col:1,line:163}},"fulfilled-icons":{startLoc:{col:30,line:165},endLoc:{col:1,line:209},startBody:{col:30,line:165},endBody:{col:1,line:209}},"transition-animation":{startLoc:{col:35,line:211},endLoc:{col:1,line:270},startBody:{col:35,line:211},endBody:{col:1,line:270}},"multi-step-wizard":{startLoc:{col:31,line:272},endLoc:{col:1,line:300},startBody:{col:31,line:272},endBody:{col:1,line:300}}}}},title:"Components/MultiStepIndicator",component:_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A};var Overview={render:(0,vibe_storybook_components__WEBPACK_IMPORTED_MODULE_3__.M)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A).bind({}),name:"Overview",args:{steps:[{key:"FULFILLED",status:"fulfilled",titleText:"Everything you can do with Monday",subtitleText:"Subtitle"},{key:"PENDING",status:"pending",titleText:"Everything you can do with Monday",subtitleText:"Subtitle"},{key:"PENDING-2",status:"pending",titleText:"Everything you can do with Monday",subtitleText:"Subtitle"}]},parameters:{docs:{liveEdit:{isEnabled:!1}}}},Placements={render:function render(){var steps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"FULFILLED",status:"fulfilled",titleText:"Fulfilled title",subtitleText:"Fulfilled subtitle"},{key:"ACTIVE",status:"active",titleText:"Active title",subtitleText:"Active subtitle"},{key:"PENDING",status:"pending",titleText:"Pending title",subtitleText:"Pending subtitle"}]}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{children:["Vertical",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{textPlacement:"vertical",steps}),"Horizontal",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps})]})}},Types={render:function render(){var steps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"FULFILLED",status:"fulfilled",titleText:"Fulfilled title",subtitleText:"Fulfilled subtitle"},{key:"ACTIVE",status:"active",titleText:"Active title",subtitleText:"Active subtitle"},{key:"PENDING",status:"pending",titleText:"Pending title",subtitleText:"Pending subtitle"}]}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{children:["Primary",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,type:"primary"}),"Success",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,type:"success"}),"Danger",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,type:"danger"}),"Dark",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,type:"dark"})]})}},Sizes={render:function render(){var steps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"FULFILLED",status:"fulfilled",titleText:"Fulfilled title",subtitleText:"Fulfilled subtitle"},{key:"ACTIVE",status:"active",titleText:"Active title",subtitleText:"Active subtitle"},{key:"PENDING",status:"pending",titleText:"Pending",subtitleText:"Pending subtitle"}]}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{children:["Regular",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,size:"regular"}),"Compact",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,size:"compact"})]})}},FulfilledIcons={render:function render(){var steps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"FULFILLED",status:"fulfilled",titleText:"Fulfilled title",subtitleText:"Fulfilled subtitle"},{key:"ACTIVE",status:"active",titleText:"Active title",subtitleText:"Active subtitle"},{key:"PENDING",status:"pending",titleText:"Pending title",subtitleText:"Pending subtitle"}]}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{children:["Default (check)",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps}),"Number instead of icon",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,isFulfilledStepDisplayNumber:!0}),"Custom",(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,fulfilledStepIcon:_vibe_icons__WEBPACK_IMPORTED_MODULE_4__.A})]})},parameters:{docs:{liveEdit:{scope:{Upgrade:_vibe_icons__WEBPACK_IMPORTED_MODULE_4__.A}}}}},TransitionAnimation={render:function render(){var initialSteps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"PENDING",status:"pending",titleText:"First step title",subtitleText:"First subtitle"},{key:"PENDING-2",status:"pending",titleText:"Second step title",subtitleText:"Second subtitle"},{key:"PENDING-3",status:"pending",titleText:"Third step title",subtitleText:"Third subtitle"}]}),[]),_useState2=_slicedToArray((0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialSteps),2),steps=_useState2[0],setSteps=_useState2[1];return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((function(){var interval=setInterval((function(){setSteps((function(prevSteps){return function getNextStepsState(currentSteps){var currentStepIndex=currentSteps.findIndex((function(step){return"fulfilled"!==step.status}));if(-1===currentStepIndex)return initialSteps;var newSteps=_toConsumableArray(currentSteps),stepToUpdate=newSteps[currentStepIndex];return"pending"===stepToUpdate.status?newSteps[currentStepIndex]=_objectSpread(_objectSpread({},stepToUpdate),{},{status:"active"}):newSteps[currentStepIndex]=_objectSpread(_objectSpread({},stepToUpdate),{},{status:"fulfilled"}),newSteps}(prevSteps)}))}),2e3);return function(){clearInterval(interval)}}),[initialSteps]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps})}},MultiStepWizard={render:function render(){var steps=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((function(){return[{key:"FULFILLED",status:"fulfilled",titleText:"Step 1",subtitleText:"Learn how to use monday CRM"},{key:"PENDING",status:"pending",titleText:"Step 2",subtitleText:"Integrate your email"},{key:"PENDING-3",status:"pending",titleText:"Step 3",subtitleText:"Import your data"}]}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_MultiStepIndicator__WEBPACK_IMPORTED_MODULE_2__.A,{steps,textPlacement:"vertical"})}};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: multiStepIndicatorTemplate.bind({}),\n  name: "Overview",\n  args: {\n    steps: [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Everything you can do with Monday",\n      subtitleText: "Subtitle"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Everything you can do with Monday",\n      subtitleText: "Subtitle"\n    }, {\n      key: "PENDING-2",\n      status: "pending",\n      titleText: "Everything you can do with Monday",\n      subtitleText: "Subtitle"\n    }]\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Placements.parameters={...Placements.parameters,docs:{...Placements.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const steps: Step[] = useMemo(() => [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Fulfilled title",\n      subtitleText: "Fulfilled subtitle"\n    }, {\n      key: "ACTIVE",\n      status: "active",\n      titleText: "Active title",\n      subtitleText: "Active subtitle"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Pending title",\n      subtitleText: "Pending subtitle"\n    }], []);\n    return <div>\n        Vertical\n        <MultiStepIndicator textPlacement="vertical" steps={steps} />\n        Horizontal\n        <MultiStepIndicator steps={steps} />\n      </div>;\n  }\n}',...Placements.parameters?.docs?.source}}},Types.parameters={...Types.parameters,docs:{...Types.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const steps: Step[] = useMemo(() => [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Fulfilled title",\n      subtitleText: "Fulfilled subtitle"\n    }, {\n      key: "ACTIVE",\n      status: "active",\n      titleText: "Active title",\n      subtitleText: "Active subtitle"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Pending title",\n      subtitleText: "Pending subtitle"\n    }], []);\n    return <div>\n        Primary\n        <MultiStepIndicator steps={steps} type="primary" />\n        Success\n        <MultiStepIndicator steps={steps} type="success" />\n        Danger\n        <MultiStepIndicator steps={steps} type="danger" />\n        Dark\n        <MultiStepIndicator steps={steps} type="dark" />\n      </div>;\n  }\n}',...Types.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const steps: Step[] = useMemo(() => [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Fulfilled title",\n      subtitleText: "Fulfilled subtitle"\n    }, {\n      key: "ACTIVE",\n      status: "active",\n      titleText: "Active title",\n      subtitleText: "Active subtitle"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Pending",\n      subtitleText: "Pending subtitle"\n    }], []);\n    return <div>\n        Regular\n        <MultiStepIndicator steps={steps} size="regular" />\n        Compact\n        <MultiStepIndicator steps={steps} size="compact" />\n      </div>;\n  }\n}',...Sizes.parameters?.docs?.source}}},FulfilledIcons.parameters={...FulfilledIcons.parameters,docs:{...FulfilledIcons.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const steps: Step[] = useMemo(() => [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Fulfilled title",\n      subtitleText: "Fulfilled subtitle"\n    }, {\n      key: "ACTIVE",\n      status: "active",\n      titleText: "Active title",\n      subtitleText: "Active subtitle"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Pending title",\n      subtitleText: "Pending subtitle"\n    }], []);\n    return <div>\n        Default (check)\n        <MultiStepIndicator steps={steps} />\n        Number instead of icon\n        <MultiStepIndicator steps={steps} isFulfilledStepDisplayNumber={true} />\n        Custom\n        <MultiStepIndicator steps={steps} fulfilledStepIcon={Upgrade} />\n      </div>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Upgrade\n        }\n      }\n    }\n  }\n}',...FulfilledIcons.parameters?.docs?.source}}},TransitionAnimation.parameters={...TransitionAnimation.parameters,docs:{...TransitionAnimation.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const initialSteps = useMemo<Step[]>(() => [{\n      key: "PENDING",\n      status: "pending",\n      titleText: "First step title",\n      subtitleText: "First subtitle"\n    }, {\n      key: "PENDING-2",\n      status: "pending",\n      titleText: "Second step title",\n      subtitleText: "Second subtitle"\n    }, {\n      key: "PENDING-3",\n      status: "pending",\n      titleText: "Third step title",\n      subtitleText: "Third subtitle"\n    }], []);\n    const [steps, setSteps] = useState<Step[]>(initialSteps);\n    useEffect(() => {\n      const getNextStepsState = (currentSteps: Step[]): Step[] => {\n        const currentStepIndex = currentSteps.findIndex(step => step.status !== "fulfilled");\n        if (currentStepIndex === -1) {\n          return initialSteps;\n        }\n        const newSteps = [...currentSteps];\n        const stepToUpdate = newSteps[currentStepIndex];\n        if (stepToUpdate.status === "pending") {\n          newSteps[currentStepIndex] = {\n            ...stepToUpdate,\n            status: "active"\n          };\n        } else {\n          newSteps[currentStepIndex] = {\n            ...stepToUpdate,\n            status: "fulfilled"\n          };\n        }\n        return newSteps;\n      };\n      const interval = setInterval(() => {\n        setSteps(prevSteps => getNextStepsState(prevSteps));\n      }, 2000);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [initialSteps]);\n    return <MultiStepIndicator steps={steps} />;\n  }\n}',...TransitionAnimation.parameters?.docs?.source}}},MultiStepWizard.parameters={...MultiStepWizard.parameters,docs:{...MultiStepWizard.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const steps: Step[] = useMemo(() => [{\n      key: "FULFILLED",\n      status: "fulfilled",\n      titleText: "Step 1",\n      subtitleText: "Learn how to use monday CRM"\n    }, {\n      key: "PENDING",\n      status: "pending",\n      titleText: "Step 2",\n      subtitleText: "Integrate your email"\n    }, {\n      key: "PENDING-3",\n      status: "pending",\n      titleText: "Step 3",\n      subtitleText: "Import your data"\n    }], []);\n    return <MultiStepIndicator steps={steps} textPlacement="vertical" />;\n  }\n}',...MultiStepWizard.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Placements","Types","Sizes","FulfilledIcons","TransitionAnimation","MultiStepWizard"]},"../storybook-blocks/dist/src/functions/createComponentTemplate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>r});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");function r(r){return function(e){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(r,Object.assign({},e))}}}}]);