"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[1173,3039],{"../../node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{BN:()=>MDXContext,RP:()=>useMDXComponents,gz:()=>withMDXComponents,xA:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./src/components/Chips/__stories__/Chips.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ChipsInAPersonPickerComboBox:()=>ChipsInAPersonPickerComboBox,ChipsPalette:()=>ChipsPalette,ChipsWithAvatars:()=>ChipsWithAvatars,ChipsWithIcons:()=>ChipsWithIcons,ChipsWithReadOnlyState:()=>ChipsWithReadOnlyState,Clickable:()=>Clickable,ColorfulChipsForDifferentContent:()=>ColorfulChipsForDifferentContent,OnColor:()=>OnColor,Overview:()=>Overview,Themes:()=>Themes,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Chips_stories});__webpack_require__("../../node_modules/react/index.js");var _baseSlice=__webpack_require__("../../node_modules/lodash-es/_baseSlice.js"),_isIterateeCall=__webpack_require__("../../node_modules/lodash-es/_isIterateeCall.js"),toInteger=__webpack_require__("../../node_modules/lodash-es/toInteger.js"),nativeCeil=Math.ceil,nativeMax=Math.max;const lodash_es_chunk=function chunk(array,size,guard){size=(guard?(0,_isIterateeCall.A)(array,size,guard):void 0===size)?1:nativeMax((0,toInteger.A)(size),0);var length=null==array?0:array.length;if(!length||size<1)return[];for(var index=0,resIndex=0,result=Array(nativeCeil(length/size));index<length;)result[resIndex++]=(0,_baseSlice.A)(array,index,index+=size);return result};var Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),Chips=__webpack_require__("./src/components/Chips/Chips.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),createComponentTemplate=__webpack_require__("../storybook-blocks/dist/src/functions/createComponentTemplate.js"),Search=__webpack_require__("./src/components/Search/Search.tsx"),Avatar=__webpack_require__("./src/components/Avatar/Avatar.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Email=__webpack_require__("../icons/dist/react/Email.js");const person1_namespaceObject=__webpack_require__.p+"static/media/person1.41f4134f.png",rotem_namespaceObject=__webpack_require__.p+"static/media/rotem.3924d3b3.png";var function_utils=__webpack_require__("./src/utils/function-utils.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Chips.A,iconPropNamesArray:["rightIcon","leftIcon"],actionPropsArray:["onDelete","onMouseDown","onClick"]}),chipsTemplate=(0,createComponentTemplate.M)(Chips.A);const Chips_stories={parameters:{storySource:{source:'import React from "react";\nimport { chunk as _chunk } from "lodash-es";\nimport Flex from "../../Flex/Flex";\nimport Chips from "../Chips";\nimport Text from "../../Text/Text";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport { createComponentTemplate } from "vibe-storybook-components";\nimport Search from "../../Search/Search";\nimport Avatar from "../../Avatar/Avatar";\nimport DialogContentContainer from "../../DialogContentContainer/DialogContentContainer";\nimport { Email } from "@vibe/icons";\nimport person1 from "./assets/person1.png";\nimport rotem from "./assets/rotem.png";\nimport { NOOP } from "../../../utils/function-utils";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Chips,\n  iconPropNamesArray: ["rightIcon", "leftIcon"],\n  actionPropsArray: ["onDelete", "onMouseDown", "onClick"]\n});\n\nconst chipsTemplate = createComponentTemplate(Chips);\n\nexport default {\n  title: "Components/Chips",\n  component: Chips,\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n};\n\nexport const Overview = {\n  render: chipsTemplate.bind({}),\n  name: "Overview",\n\n  args: {\n    label: "This is a chip",\n    onMouseDown: () => {},\n    onClick: () => {}\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const ChipsWithReadOnlyState = {\n  render: () => <Chips label="Read only chip" readOnly />,\n  name: "Chips with read only state"\n};\n\nexport const ChipsWithIcons = {\n  render: () => (\n    <Flex gap="medium">\n      <Chips label="Chip with left icon" leftIcon={Email} />\n      <Chips label="Chip with right icon" rightIcon={Email} />\n    </Flex>\n  ),\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { Email }\n      }\n    }\n  },\n  name: "Chips with icons"\n};\n\nexport const ChipsWithAvatars = {\n  render: () => (\n    <Flex gap="medium">\n      <Chips label="Chip with left avatar" leftAvatar={person1} />\n      <Chips label="Chip with right avatar" rightAvatar={person1} />\n    </Flex>\n  ),\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1 }\n      }\n    }\n  },\n  name: "Chips with avatars"\n};\n\nexport const Themes = {\n  render: () => (\n    <>\n      <Chips label="This is a long chip" />\n      <Chips label="Chip positive" color="positive" />\n      <Chips label="Chip negative" color="negative" />\n      <Chips label="Chip warning" color="warning" />\n      <Chips label="Disabled" disabled />\n    </>\n  ),\n  name: "Themes"\n};\n\nexport const Clickable = {\n  render: () => {\n    return (\n      <Flex direction="row" gap="medium" align="start">\n        <Chips label="Clickable default chip" readOnly onClick={NOOP} />\n        <Chips label="Clickable removable chip" onClick={NOOP} />\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { NOOP }\n      }\n    }\n  },\n  name: "Clickable"\n};\n\nexport const ChipsPalette = {\n  render: () => {\n    const excludedColors = [Chips.colors.DARK_INDIGO, Chips.colors.BLACKISH];\n    const allowedColorsChunks = _chunk(\n      // @ts-ignore\n      Object.keys(Chips.colors).filter(k => !excludedColors.includes(Chips.colors[k])),\n      7\n    );\n    return (\n      <Flex\n        style={{\n          width: "100%",\n          height: 300\n        }}\n        align="stretch"\n      >\n        {allowedColorsChunks.map((colorChunk: any) => {\n          return (\n            <Flex direction="column" key={colorChunk} justify="space-between" align="stretch">\n              {colorChunk.map((colorName: any) => (\n                // @ts-ignore\n                <Chips label={colorName} key={colorName} color={Chips.colors[colorName]} readOnly allowTextSelection />\n              ))}\n            </Flex>\n          );\n        })}\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { _chunk }\n      }\n    }\n  },\n  name: "Chips palette"\n};\n\nexport const OnColor = {\n  render: () => (\n    <Flex\n      style={{\n        width: "100%"\n      }}\n      align="stretch"\n      justify="start"\n    >\n      <Flex\n        align="center"\n        justify="center"\n        style={{\n          background: "var(--sb-primary-selected-color)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On selected" showBorder readOnly />\n      </Flex>\n      <Flex\n        align="center"\n        justify="center"\n        style={{\n          background: "var(--positive-color-selected)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On positive" showBorder color="positive" readOnly />\n      </Flex>\n      <Flex\n        align="center"\n        justify="center"\n        style={{\n          background: "var(--sb-negative-color-selected)",\n          width: "124px",\n          height: "64px",\n          margin: "var(--sb-spacing-small)",\n          borderRadius: "var(--sb-border-radius-small)"\n        }}\n      >\n        <Chips label="On negative" showBorder color="negative" readOnly />\n      </Flex>\n    </Flex>\n  ),\n\n  name: "On color"\n};\n\nexport const ColorfulChipsForDifferentContent = {\n  render: () => (\n    <Flex>\n      <DialogContentContainer>\n        <Flex direction="column" align="start" gap="medium" style={{ padding: "var(--spacing-small)" }}>\n          <div>\n            <Chips label="January" color="positive" />\n          </div>\n          <Search />\n          <div>\n            <Chips label="August" readOnly color="lipstick" />\n          </div>\n          <div>\n            <Chips label="April" readOnly color="bubble" />\n          </div>\n          <div>\n            <Chips label="March" readOnly color="egg_yolk" />\n          </div>\n        </Flex>\n      </DialogContentContainer>\n    </Flex>\n  ),\n  name: "Colorful chips for different content"\n};\n\nexport const ChipsInAPersonPickerComboBox = {\n  render: () => (\n    <Flex>\n      <DialogContentContainer>\n        <Flex direction="column" align="start" gap="medium" style={{ padding: "var(--spacing-small)" }}>\n          <Search placeholder="Search names, positions, or a team" />\n          <Flex align="center" justify="center">\n            <Chips label="Esther Schanler" leftAvatar={person1} />\n            <Chips label="Rotem Dekel" leftAvatar={rotem} />\n          </Flex>\n          <Text style={{ paddingInlineStart: "var(--spacing-xs)", marginTop: "var(--spacing-xs)" }}>\n            Suggested people\n          </Text>\n          <Flex direction="column" align="start" gap="medium">\n            <Flex align="center" justify="center" key="cont-1" gap="small">\n              <Avatar size="small" src={person1} type="img" />\n              <Flex gap="xs">\n                <Text>May Kishon </Text>\n                <Text color="secondary">(UX/UI Product Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-2" gap="small">\n              <Avatar size="small" backgroundColor="dark_purple" text="LC" type="text" />\n              <Flex gap="xs">\n                <Text>Liron Cohen</Text>\n                <Text color="secondary">(Customer Experience)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-3" gap="small">\n              <Avatar size="small" text="AL" type="text" />\n              <Flex gap="xs">\n                <Text>Amanda Lawrence</Text>\n                <Text color="secondary">(Customer Experience Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-4" gap="small">\n              <Avatar size="small" text="DY" type="text" backgroundColor="peach" />\n              <Flex gap="xs">\n                <Text>Dor Yehuda</Text>\n                <Text color="secondary">(Customer Experience Designer)</Text>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Flex>\n      </DialogContentContainer>\n    </Flex>\n  ),\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1, rotem }\n      }\n    }\n  },\n  name: "Chips in a person picker combo box"\n};\n',locationsMap:{overview:{startLoc:{col:24,line:31},endLoc:{col:1,line:47},startBody:{col:24,line:31},endBody:{col:1,line:47}},"chips-with-read-only-state":{startLoc:{col:38,line:49},endLoc:{col:1,line:52},startBody:{col:38,line:49},endBody:{col:1,line:52}},"chips-with-icons":{startLoc:{col:30,line:54},endLoc:{col:1,line:69},startBody:{col:30,line:54},endBody:{col:1,line:69}},"chips-with-avatars":{startLoc:{col:32,line:71},endLoc:{col:1,line:86},startBody:{col:32,line:71},endBody:{col:1,line:86}},themes:{startLoc:{col:22,line:88},endLoc:{col:1,line:99},startBody:{col:22,line:88},endBody:{col:1,line:99}},clickable:{startLoc:{col:25,line:101},endLoc:{col:1,line:118},startBody:{col:25,line:101},endBody:{col:1,line:118}},"chips-palette":{startLoc:{col:28,line:120},endLoc:{col:1,line:157},startBody:{col:28,line:120},endBody:{col:1,line:157}},"on-color":{startLoc:{col:23,line:159},endLoc:{col:1,line:211},startBody:{col:23,line:159},endBody:{col:1,line:211}},"colorful-chips-for-different-content":{startLoc:{col:48,line:213},endLoc:{col:1,line:236},startBody:{col:48,line:213},endBody:{col:1,line:236}},"chips-in-a-person-picker-combo-box":{startLoc:{col:44,line:238},endLoc:{col:1,line:293},startBody:{col:44,line:238},endBody:{col:1,line:293}}}}},title:"Components/Chips",component:Chips.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators};var Overview={render:chipsTemplate.bind({}),name:"Overview",args:{label:"This is a chip",onMouseDown:function onMouseDown(){},onClick:function onClick(){}},parameters:{docs:{liveEdit:{isEnabled:!1}}}},ChipsWithReadOnlyState={render:function render(){return(0,jsx_runtime.jsx)(Chips.A,{label:"Read only chip",readOnly:!0})},name:"Chips with read only state"},ChipsWithIcons={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"medium",children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with left icon",leftIcon:Email.A}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with right icon",rightIcon:Email.A})]})},parameters:{docs:{liveEdit:{scope:{Email:Email.A}}}},name:"Chips with icons"},ChipsWithAvatars={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{gap:"medium",children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with left avatar",leftAvatar:person1_namespaceObject}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip with right avatar",rightAvatar:person1_namespaceObject})]})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject}}}},name:"Chips with avatars"},Themes={render:function render(){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Chips.A,{label:"This is a long chip"}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip positive",color:"positive"}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip negative",color:"negative"}),(0,jsx_runtime.jsx)(Chips.A,{label:"Chip warning",color:"warning"}),(0,jsx_runtime.jsx)(Chips.A,{label:"Disabled",disabled:!0})]})},name:"Themes"},Clickable={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"row",gap:"medium",align:"start",children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Clickable default chip",readOnly:!0,onClick:function_utils.tE}),(0,jsx_runtime.jsx)(Chips.A,{label:"Clickable removable chip",onClick:function_utils.tE})]})},parameters:{docs:{liveEdit:{scope:{NOOP:function_utils.tE}}}},name:"Clickable"},ChipsPalette={render:function render(){var excludedColors=[Chips.A.colors.DARK_INDIGO,Chips.A.colors.BLACKISH],allowedColorsChunks=lodash_es_chunk(Object.keys(Chips.A.colors).filter((function(k){return!excludedColors.includes(Chips.A.colors[k])})),7);return(0,jsx_runtime.jsx)(Flex.A,{style:{width:"100%",height:300},align:"stretch",children:allowedColorsChunks.map((function(colorChunk){return(0,jsx_runtime.jsx)(Flex.A,{direction:"column",justify:"space-between",align:"stretch",children:colorChunk.map((function(colorName){return(0,jsx_runtime.jsx)(Chips.A,{label:colorName,color:Chips.A.colors[colorName],readOnly:!0,allowTextSelection:!0},colorName)}))},colorChunk)}))})},parameters:{docs:{liveEdit:{scope:{_chunk:lodash_es_chunk}}}},name:"Chips palette"},OnColor={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{style:{width:"100%"},align:"stretch",justify:"start",children:[(0,jsx_runtime.jsx)(Flex.A,{align:"center",justify:"center",style:{background:"var(--sb-primary-selected-color)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On selected",showBorder:!0,readOnly:!0})}),(0,jsx_runtime.jsx)(Flex.A,{align:"center",justify:"center",style:{background:"var(--positive-color-selected)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On positive",showBorder:!0,color:"positive",readOnly:!0})}),(0,jsx_runtime.jsx)(Flex.A,{align:"center",justify:"center",style:{background:"var(--sb-negative-color-selected)",width:"124px",height:"64px",margin:"var(--sb-spacing-small)",borderRadius:"var(--sb-border-radius-small)"},children:(0,jsx_runtime.jsx)(Chips.A,{label:"On negative",showBorder:!0,color:"negative",readOnly:!0})})]})},name:"On color"},ColorfulChipsForDifferentContent={render:function render(){return(0,jsx_runtime.jsx)(Flex.A,{children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"medium",style:{padding:"var(--spacing-small)"},children:[(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Chips.A,{label:"January",color:"positive"})}),(0,jsx_runtime.jsx)(Search.A,{}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Chips.A,{label:"August",readOnly:!0,color:"lipstick"})}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Chips.A,{label:"April",readOnly:!0,color:"bubble"})}),(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(Chips.A,{label:"March",readOnly:!0,color:"egg_yolk"})})]})})})},name:"Colorful chips for different content"},ChipsInAPersonPickerComboBox={render:function render(){return(0,jsx_runtime.jsx)(Flex.A,{children:(0,jsx_runtime.jsx)(DialogContentContainer.A,{children:(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"medium",style:{padding:"var(--spacing-small)"},children:[(0,jsx_runtime.jsx)(Search.A,{placeholder:"Search names, positions, or a team"}),(0,jsx_runtime.jsxs)(Flex.A,{align:"center",justify:"center",children:[(0,jsx_runtime.jsx)(Chips.A,{label:"Esther Schanler",leftAvatar:person1_namespaceObject}),(0,jsx_runtime.jsx)(Chips.A,{label:"Rotem Dekel",leftAvatar:rotem_namespaceObject})]}),(0,jsx_runtime.jsx)(Text.A,{style:{paddingInlineStart:"var(--spacing-xs)",marginTop:"var(--spacing-xs)"},children:"Suggested people"}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",align:"start",gap:"medium",children:[(0,jsx_runtime.jsxs)(Flex.A,{align:"center",justify:"center",gap:"small",children:[(0,jsx_runtime.jsx)(Avatar.A,{size:"small",src:person1_namespaceObject,type:"img"}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"May Kishon "}),(0,jsx_runtime.jsx)(Text.A,{color:"secondary",children:"(UX/UI Product Designer)"})]})]},"cont-1"),(0,jsx_runtime.jsxs)(Flex.A,{align:"center",justify:"center",gap:"small",children:[(0,jsx_runtime.jsx)(Avatar.A,{size:"small",backgroundColor:"dark_purple",text:"LC",type:"text"}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Liron Cohen"}),(0,jsx_runtime.jsx)(Text.A,{color:"secondary",children:"(Customer Experience)"})]})]},"cont-2"),(0,jsx_runtime.jsxs)(Flex.A,{align:"center",justify:"center",gap:"small",children:[(0,jsx_runtime.jsx)(Avatar.A,{size:"small",text:"AL",type:"text"}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Amanda Lawrence"}),(0,jsx_runtime.jsx)(Text.A,{color:"secondary",children:"(Customer Experience Designer)"})]})]},"cont-3"),(0,jsx_runtime.jsxs)(Flex.A,{align:"center",justify:"center",gap:"small",children:[(0,jsx_runtime.jsx)(Avatar.A,{size:"small",text:"DY",type:"text",backgroundColor:"peach"}),(0,jsx_runtime.jsxs)(Flex.A,{gap:"xs",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Dor Yehuda"}),(0,jsx_runtime.jsx)(Text.A,{color:"secondary",children:"(Customer Experience Designer)"})]})]},"cont-4")]})]})})})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject,rotem:rotem_namespaceObject}}}},name:"Chips in a person picker combo box"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: chipsTemplate.bind({}),\n  name: "Overview",\n  args: {\n    label: "This is a chip",\n    onMouseDown: () => {},\n    onClick: () => {}\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},ChipsWithReadOnlyState.parameters={...ChipsWithReadOnlyState.parameters,docs:{...ChipsWithReadOnlyState.parameters?.docs,source:{originalSource:'{\n  render: () => <Chips label="Read only chip" readOnly />,\n  name: "Chips with read only state"\n}',...ChipsWithReadOnlyState.parameters?.docs?.source}}},ChipsWithIcons.parameters={...ChipsWithIcons.parameters,docs:{...ChipsWithIcons.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex gap="medium">\n      <Chips label="Chip with left icon" leftIcon={Email} />\n      <Chips label="Chip with right icon" rightIcon={Email} />\n    </Flex>,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          Email\n        }\n      }\n    }\n  },\n  name: "Chips with icons"\n}',...ChipsWithIcons.parameters?.docs?.source}}},ChipsWithAvatars.parameters={...ChipsWithAvatars.parameters,docs:{...ChipsWithAvatars.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex gap="medium">\n      <Chips label="Chip with left avatar" leftAvatar={person1} />\n      <Chips label="Chip with right avatar" rightAvatar={person1} />\n    </Flex>,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1\n        }\n      }\n    }\n  },\n  name: "Chips with avatars"\n}',...ChipsWithAvatars.parameters?.docs?.source}}},Themes.parameters={...Themes.parameters,docs:{...Themes.parameters?.docs,source:{originalSource:'{\n  render: () => <>\n      <Chips label="This is a long chip" />\n      <Chips label="Chip positive" color="positive" />\n      <Chips label="Chip negative" color="negative" />\n      <Chips label="Chip warning" color="warning" />\n      <Chips label="Disabled" disabled />\n    </>,\n  name: "Themes"\n}',...Themes.parameters?.docs?.source}}},Clickable.parameters={...Clickable.parameters,docs:{...Clickable.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Flex direction="row" gap="medium" align="start">\n        <Chips label="Clickable default chip" readOnly onClick={NOOP} />\n        <Chips label="Clickable removable chip" onClick={NOOP} />\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          NOOP\n        }\n      }\n    }\n  },\n  name: "Clickable"\n}',...Clickable.parameters?.docs?.source}}},ChipsPalette.parameters={...ChipsPalette.parameters,docs:{...ChipsPalette.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const excludedColors = [Chips.colors.DARK_INDIGO, Chips.colors.BLACKISH];\n    const allowedColorsChunks = _chunk(\n    // @ts-ignore\n    Object.keys(Chips.colors).filter(k => !excludedColors.includes(Chips.colors[k])), 7);\n    return <Flex style={{\n      width: "100%",\n      height: 300\n    }} align="stretch">\n        {allowedColorsChunks.map((colorChunk: any) => {\n        return <Flex direction="column" key={colorChunk} justify="space-between" align="stretch">\n              {colorChunk.map((colorName: any) =>\n          // @ts-ignore\n          <Chips label={colorName} key={colorName} color={Chips.colors[colorName]} readOnly allowTextSelection />)}\n            </Flex>;\n      })}\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          _chunk\n        }\n      }\n    }\n  },\n  name: "Chips palette"\n}',...ChipsPalette.parameters?.docs?.source}}},OnColor.parameters={...OnColor.parameters,docs:{...OnColor.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex style={{\n    width: "100%"\n  }} align="stretch" justify="start">\n      <Flex align="center" justify="center" style={{\n      background: "var(--sb-primary-selected-color)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On selected" showBorder readOnly />\n      </Flex>\n      <Flex align="center" justify="center" style={{\n      background: "var(--positive-color-selected)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On positive" showBorder color="positive" readOnly />\n      </Flex>\n      <Flex align="center" justify="center" style={{\n      background: "var(--sb-negative-color-selected)",\n      width: "124px",\n      height: "64px",\n      margin: "var(--sb-spacing-small)",\n      borderRadius: "var(--sb-border-radius-small)"\n    }}>\n        <Chips label="On negative" showBorder color="negative" readOnly />\n      </Flex>\n    </Flex>,\n  name: "On color"\n}',...OnColor.parameters?.docs?.source}}},ColorfulChipsForDifferentContent.parameters={...ColorfulChipsForDifferentContent.parameters,docs:{...ColorfulChipsForDifferentContent.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex>\n      <DialogContentContainer>\n        <Flex direction="column" align="start" gap="medium" style={{\n        padding: "var(--spacing-small)"\n      }}>\n          <div>\n            <Chips label="January" color="positive" />\n          </div>\n          <Search />\n          <div>\n            <Chips label="August" readOnly color="lipstick" />\n          </div>\n          <div>\n            <Chips label="April" readOnly color="bubble" />\n          </div>\n          <div>\n            <Chips label="March" readOnly color="egg_yolk" />\n          </div>\n        </Flex>\n      </DialogContentContainer>\n    </Flex>,\n  name: "Colorful chips for different content"\n}',...ColorfulChipsForDifferentContent.parameters?.docs?.source}}},ChipsInAPersonPickerComboBox.parameters={...ChipsInAPersonPickerComboBox.parameters,docs:{...ChipsInAPersonPickerComboBox.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex>\n      <DialogContentContainer>\n        <Flex direction="column" align="start" gap="medium" style={{\n        padding: "var(--spacing-small)"\n      }}>\n          <Search placeholder="Search names, positions, or a team" />\n          <Flex align="center" justify="center">\n            <Chips label="Esther Schanler" leftAvatar={person1} />\n            <Chips label="Rotem Dekel" leftAvatar={rotem} />\n          </Flex>\n          <Text style={{\n          paddingInlineStart: "var(--spacing-xs)",\n          marginTop: "var(--spacing-xs)"\n        }}>\n            Suggested people\n          </Text>\n          <Flex direction="column" align="start" gap="medium">\n            <Flex align="center" justify="center" key="cont-1" gap="small">\n              <Avatar size="small" src={person1} type="img" />\n              <Flex gap="xs">\n                <Text>May Kishon </Text>\n                <Text color="secondary">(UX/UI Product Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-2" gap="small">\n              <Avatar size="small" backgroundColor="dark_purple" text="LC" type="text" />\n              <Flex gap="xs">\n                <Text>Liron Cohen</Text>\n                <Text color="secondary">(Customer Experience)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-3" gap="small">\n              <Avatar size="small" text="AL" type="text" />\n              <Flex gap="xs">\n                <Text>Amanda Lawrence</Text>\n                <Text color="secondary">(Customer Experience Designer)</Text>\n              </Flex>\n            </Flex>\n            <Flex align="center" justify="center" key="cont-4" gap="small">\n              <Avatar size="small" text="DY" type="text" backgroundColor="peach" />\n              <Flex gap="xs">\n                <Text>Dor Yehuda</Text>\n                <Text color="secondary">(Customer Experience Designer)</Text>\n              </Flex>\n            </Flex>\n          </Flex>\n        </Flex>\n      </DialogContentContainer>\n    </Flex>,\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1,\n          rotem\n        }\n      }\n    }\n  },\n  name: "Chips in a person picker combo box"\n}',...ChipsInAPersonPickerComboBox.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","ChipsWithReadOnlyState","ChipsWithIcons","ChipsWithAvatars","Themes","Clickable","ChipsPalette","OnColor","ColorfulChipsForDifferentContent","ChipsInAPersonPickerComboBox"]},"./src/components/Chips/__stories__/Chips.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_stories_Chips});__webpack_require__("../../node_modules/react/index.js");var jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/@storybook/blocks/dist/index.mjs"),Chips=__webpack_require__("./src/components/Chips/Chips.tsx"),component_description_map=__webpack_require__("./src/storybook/components/related-components/component-description-map.tsx"),tip=__webpack_require__("../storybook-blocks/dist/src/components/tip/tip.js"),storybook_link=__webpack_require__("../storybook-blocks/dist/src/components/storybook-link/storybook-link.js"),TipLabel=function TipLabel(){return(0,jsx_runtime.jsxs)(tip.A,{children:["Chips will always show up in context of a field. If you just need to add information, use"," ",(0,jsx_runtime.jsx)(storybook_link.A,{page:"Components/Label",size:storybook_link.A.sizes.SMALL,children:"Label."})]})};TipLabel.displayName="TipLabel";var Chips_stories=__webpack_require__("./src/components/Chips/__stories__/Chips.stories.tsx");function _createMdxContent(props){const _components=Object.assign({h1:"h1",p:"p",h3:"h3",pre:"pre",code:"code",h2:"h2"},(0,lib.RP)(),props.components),{Canvas,PropsTable,UsageGuidelines,ComponentRules,RelatedComponents}=_components;return Canvas||_missingMdxReference("Canvas",!0),ComponentRules||_missingMdxReference("ComponentRules",!0),PropsTable||_missingMdxReference("PropsTable",!0),RelatedComponents||_missingMdxReference("RelatedComponents",!0),UsageGuidelines||_missingMdxReference("UsageGuidelines",!0),(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:Chips_stories}),"\n",(0,jsx_runtime.jsx)(_components.h1,{id:"chip",children:"Chip"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Chips are compact elements that represent an input, attribute, or action. They may display text, icons, or both."}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.Overview}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"import",children:"Import"}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-js",children:'import { Chips } from "@vibe/core";\n'})}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"props",children:"Props"}),"\n",(0,jsx_runtime.jsx)(PropsTable,{}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"usage",children:"Usage"}),"\n",(0,jsx_runtime.jsx)(UsageGuidelines,{guidelines:["Chips represent a complex piece of information in compact form, such as an entity (person, place, or thing) or text. They enable user input and verify that input by converting text into chips.","Use 8px spacing between chips.","Use chips when content is mapped to multiple categories, and the user needs a way to differentiate between them."]}),"\n",(0,jsx_runtime.jsx)(TipLabel,{}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"variants",children:"Variants"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-read-only-state",children:"With read only state"}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ChipsWithReadOnlyState}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-icons",children:"With icons"}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ChipsWithIcons}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"with-avatars",children:"With avatars"}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ChipsWithAvatars}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"themes",children:"Themes"}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.Themes}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"clickable-chips",children:"Clickable chips"}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.Clickable}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"color-coded-chips",children:"Color coded chips"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Use chips with colors to indicate different categories.\ne.g."}),"\n",(0,jsx_runtime.jsx)(_components.pre,{children:(0,jsx_runtime.jsx)(_components.code,{className:"language-jsx",children:'<Chips label="GRASS_GREEN" color="grass_green" />\n'})}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ChipsPalette}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"chips-on-colored-backgrounds",children:"Chips on colored backgrounds"}),"\n",(0,jsx_runtime.jsxs)(_components.p,{children:["When a chip appears on a background color identical to its color, use ",(0,jsx_runtime.jsx)(_components.code,{children:"showBorder"})," prop in order to add a distinctive white border."]}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.OnColor}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"dos-and-donts",children:"Do’s and Don’ts"}),"\n",(0,jsx_runtime.jsx)(ComponentRules,{rules:[{positive:{component:(0,jsx_runtime.jsx)(Chips.A,{label:"Jason Tal",readOnly:!0}),description:"When using a chip, the width will automatically size itself to fit the content."},negative:{component:(0,jsx_runtime.jsx)(Chips.A,{label:"This is a chip",className:"monday-storybook-chips_chip-padding",readOnly:!0}),description:"Don’t change the chip width."}}]}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"use-cases-and-examples",children:"Use cases and examples"}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"colorful-chips-for-different-content",children:"Colorful chips for different content"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Sometimes when needed, chips can change fill color."}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ColorfulChipsForDifferentContent}),"\n",(0,jsx_runtime.jsx)(_components.h3,{id:"chips-in-a-person-picker-combo-box",children:"Chips in a person picker combo box"}),"\n",(0,jsx_runtime.jsx)(_components.p,{children:"Chips can be removable, and can be used in a multiple options selection use cases."}),"\n",(0,jsx_runtime.jsx)(Canvas,{of:Chips_stories.ChipsInAPersonPickerComboBox}),"\n",(0,jsx_runtime.jsx)(_components.h2,{id:"related-components",children:"Related components"}),"\n",(0,jsx_runtime.jsx)(RelatedComponents,{componentsNames:[component_description_map.d_,component_description_map.UB,component_description_map.Bv]})]})}const _stories_Chips=function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.RP)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,Object.assign({},props,{children:(0,jsx_runtime.jsx)(_createMdxContent,props)})):_createMdxContent(props)};function _missingMdxReference(id,component){throw new Error("Expected "+(component?"component":"object")+" `"+id+"` to be defined: you likely forgot to import, pass, or provide it.")}},"../storybook-blocks/dist/src/functions/createComponentTemplate.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{M:()=>r});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/jsx-runtime.js");function r(r){return function(e){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(r,Object.assign({},e))}}}}]);