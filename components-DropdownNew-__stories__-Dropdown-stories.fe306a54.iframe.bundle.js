"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[4111],{"./src/components/DropdownNew/__stories__/Dropdown.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{DropdownInsidePopover:()=>DropdownInsidePopover,DropdownItemWithElements:()=>DropdownItemWithElements,DropdownShowSelectedItems:()=>DropdownShowSelectedItems,DropdownWithGroups:()=>DropdownWithGroups,DropdownWithIconOrAvatar:()=>DropdownWithIconOrAvatar,DropdownWithTooltips:()=>DropdownWithTooltips,MultiSelect:()=>MultiSelect,Overview:()=>Overview,Searchable:()=>Searchable,Sizes:()=>Sizes,States:()=>States,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Dropdown_stories});var react=__webpack_require__("../../node_modules/react/index.js"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts");const person1_namespaceObject=__webpack_require__.p+"static/media/person1.dd0cd6ea.png",person3_namespaceObject=__webpack_require__.p+"static/media/person3.93b103c5.png",person2_namespaceObject=__webpack_require__.p+"static/media/person2.796d616d.png";var Email=__webpack_require__("../icons/dist/react/Email.js"),Attach=__webpack_require__("../icons/dist/react/Attach.js"),Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),DialogContentContainer=__webpack_require__("./src/components/DialogContentContainer/DialogContentContainer.tsx"),Box=__webpack_require__("./src/components/Box/Box.tsx"),Button=__webpack_require__("./src/components/Button/Button.tsx"),LegacyModal=__webpack_require__("./src/components/LegacyModal/LegacyModal.tsx"),LegacyModalContent=__webpack_require__("./src/components/LegacyModal/LegacyModalContent/LegacyModalContent.tsx"),Dropdown=__webpack_require__("./src/components/DropdownNew/Dropdown.tsx"),ModalExampleContent=__webpack_require__("./src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx"),Text=__webpack_require__("./src/components/Text/Text.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Dropdown.A,actionPropsArray:["onMenuOpen","onMenuClose","onFocus","onBlur","onChange","openMenuOnFocus","onOptionRemove","onOptionSelect","onClear","onInputChange","onKeyDown"]});const Dropdown_stories={parameters:{storySource:{source:'import React, { useCallback, useMemo, useState } from "react";\nimport { Meta, StoryObj } from "@storybook/react";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook";\nimport person1 from "./assets/person1.png";\nimport person3 from "./assets/person3.png";\nimport person2 from "./assets/person2.png";\nimport { Attach, Email } from "@vibe/icons";\nimport { Box, Button, DialogContentContainer, Flex, Modal, ModalContent } from "../../index";\nimport { Dropdown } from "../../DropdownNew";\nimport ModalExampleContent from "../../../storybook/patterns/dropdown-in-modals/ModalExampleContent";\nimport { Text } from "../../Text";\nimport { BaseListItemData } from "../../BaseListItem/BaseListItem.types";\nimport { BaseDropdownProps } from "../../DropdownNew/Dropdown.types";\n\ntype Story = StoryObj<typeof Dropdown>;\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Dropdown,\n  actionPropsArray: [\n    "onMenuOpen",\n    "onMenuClose",\n    "onFocus",\n    "onBlur",\n    "onChange",\n    "openMenuOnFocus",\n    "onOptionRemove",\n    "onOptionSelect",\n    "onClear",\n    "onInputChange",\n    "onKeyDown"\n  ]\n});\n\nconst meta: Meta<typeof Dropdown> = {\n  title: "Components/Dropdown [Alpha]",\n  component: Dropdown,\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n};\n\nexport default meta;\n\nconst dropdownTemplate = (props: BaseDropdownProps<any>) => {\n  const options = useMemo(\n    () => [\n      { value: 1, label: "Option 1" },\n      { value: 2, label: "Option 2" },\n      { value: 3, label: "Option 3" }\n    ],\n    []\n  );\n\n  return (\n    <div style={{ height: "150px", width: "300px" }}>\n      <Dropdown options={options} label="Label" helperText="Helper text" {...props} />\n    </div>\n  );\n};\n\nexport const Overview: Story = {\n  render: dropdownTemplate.bind({}),\n  args: {\n    placeholder: "Placeholder text here"\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const Sizes: Story = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        { value: 1, label: "Option 1" },\n        { value: 2, label: "Option 2" },\n        { value: 3, label: "Option 3" }\n      ],\n      []\n    );\n    return (\n      <>\n        <div style={{ width: "300px" }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="large" />\n        </div>\n        <div style={{ width: "300px" }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="medium" />\n        </div>\n        <div style={{ width: "300px" }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="small" />\n        </div>\n      </>\n    );\n  }\n};\n\nexport const States: Story = {\n  render: () => (\n    <Flex direction="row" gap="medium">\n      <Flex direction="column" gap="medium">\n        <div style={{ width: "300px" }}>\n          <Dropdown options={[]} placeholder="Default" />\n        </div>\n        <div style={{ width: "300px" }}>\n          <Dropdown options={[]} placeholder="Disabled" disabled />\n        </div>\n      </Flex>\n      <Flex direction="column" gap="medium">\n        <div style={{ width: "300px" }}>\n          <Dropdown options={[]} placeholder="Error" error />\n        </div>\n        <div style={{ width: "300px" }}>\n          <Dropdown options={[]} placeholder="Readonly" readOnly />\n        </div>\n      </Flex>\n    </Flex>\n  )\n};\n\nexport const MultiSelect: Story = {\n  render: () => {\n    const options = useMemo(\n      () => [\n        {\n          value: "1",\n          label: "Option 1"\n        },\n        {\n          value: "2",\n          label: "Option 2"\n        },\n        {\n          value: "3",\n          label: "Option 3"\n        },\n        {\n          value: "4",\n          label: "Option 4"\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex gap="large" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Single line with hidden options</Text>\n          <div style={{ width: "350px", marginBottom: "50px" }}>\n            <Dropdown\n              placeholder="Single line multi state"\n              defaultValue={[options[0], options[1], options[2]]}\n              options={options}\n              multi\n            />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Multiple lines</Text>\n          <div style={{ width: "350px", marginBottom: "50px" }}>\n            <Dropdown\n              placeholder="Multiple line multi state"\n              defaultValue={[options[0], options[1], options[2]]}\n              options={options}\n              multi\n              multiline\n            />\n          </div>\n        </Flex>\n      </Flex>\n    );\n  }\n};\n\nexport const DropdownWithIconOrAvatar: Story = {\n  render: () => {\n    const optionsIcons: any = useMemo(\n      () => [\n        {\n          value: "email",\n          label: "Email",\n          startElement: {\n            type: "icon",\n            value: Email\n          }\n        },\n        {\n          value: "attach",\n          label: "Attach",\n          startElement: {\n            type: "icon",\n            value: Attach\n          }\n        }\n      ],\n      []\n    );\n    const optionsAvatar: any = useMemo(\n      () => [\n        {\n          value: "Julia",\n          label: "Julia Martinez",\n          startElement: {\n            type: "avatar",\n            value: person1\n          }\n        },\n        {\n          value: "Sophia",\n          label: "Sophia Johnson",\n          startElement: {\n            type: "avatar",\n            value: person2\n          }\n        },\n        {\n          value: "Marco",\n          label: "Marco DiAngelo",\n          startElement: {\n            type: "avatar",\n            value: person3\n          }\n        }\n      ],\n      []\n    );\n\n    return (\n      <Flex gap="large" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Single value</Text>\n          <div style={{ width: "350px", marginBottom: "10px" }}>\n            <Dropdown defaultValue={optionsIcons[0]} options={optionsIcons} />\n          </div>\n          <div style={{ width: "350px", marginBottom: "10px" }}>\n            <Dropdown defaultValue={optionsAvatar[0]} options={optionsAvatar} />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Multiple values</Text>\n          <div style={{ width: "350px", marginBottom: "10px" }}>\n            <Dropdown defaultValue={[optionsIcons[0]]} options={optionsIcons} multi />\n          </div>\n          <div style={{ width: "350px", marginBottom: "10px" }}>\n            <Dropdown defaultValue={[optionsAvatar[0]]} options={optionsAvatar} multi />\n          </div>\n        </Flex>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { person1, person2, person3 }\n      }\n    }\n  }\n};\n\nexport const Searchable: Story = {\n  render: () => {\n    const options = useMemo(\n      () =>\n        Array.from({ length: 10 }, (_, i) => ({\n          value: `Option ${i + 1}`,\n          label: `Option ${i + 1}`\n        })),\n      []\n    );\n\n    return (\n      <div style={{ width: "300px" }}>\n        <Dropdown placeholder={"Searchable for an item"} options={options} searchable maxMenuHeight={170} />\n      </div>\n    );\n  }\n};\n\nexport const DropdownWithGroups: Story = {\n  render: () => {\n    const options = useMemo(\n      () =>\n        Array.from({ length: 2 }, (_, groupIndex) => ({\n          label: `Group ${groupIndex + 1}`,\n          options: Array.from({ length: 3 }, (_, optionIndex) => ({\n            value: `${groupIndex * 2 + optionIndex + 1}`,\n            label: `Option ${groupIndex * 2 + optionIndex + 1}`\n          }))\n        })),\n      []\n    );\n\n    const optionsWithoutGroupLabel = useMemo(\n      () =>\n        Array.from({ length: 2 }, (_, groupIndex) => ({\n          options: Array.from({ length: 2 }, (_, optionIndex) => ({\n            value: `${groupIndex * 2 + optionIndex + 1}`,\n            label: `Option ${groupIndex * 2 + optionIndex + 1}`\n          }))\n        })),\n      []\n    );\n\n    return (\n      <Flex gap="medium" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Group by divider</Text>\n          <div style={{ width: "300px" }}>\n            <Dropdown\n              placeholder="Group by divider"\n              options={optionsWithoutGroupLabel}\n              withGroupDivider\n              maxMenuHeight={170}\n            />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Group by category title</Text>\n          <div style={{ width: "300px" }}>\n            <Dropdown placeholder="Group by category title" options={options} maxMenuHeight={170} />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Group by category title sticky</Text>\n          <div style={{ width: "300px" }}>\n            <Dropdown\n              placeholder="Group by category title sticky"\n              options={options}\n              stickyGroupTitle\n              maxMenuHeight={170}\n            />\n          </div>\n        </Flex>\n      </Flex>\n    );\n  }\n};\n\nexport const DropdownItemWithElements: Story = {\n  render: () => {\n    const options: BaseListItemData<Record<string, unknown>>[] = useMemo(\n      () => [\n        {\n          value: "icon",\n          label: "Label with icon",\n          startElement: {\n            type: "icon",\n            value: Email\n          }\n        },\n        {\n          value: "avatar",\n          label: "Label with avatar",\n          startElement: {\n            type: "avatar",\n            value: person1\n          }\n        },\n        {\n          value: "indent",\n          label: "Label with indent",\n          startElement: {\n            type: "indent"\n          }\n        },\n        {\n          value: "endIcon",\n          label: "Label with end icon",\n          endElement: {\n            type: "icon",\n            value: Email\n          }\n        },\n        {\n          value: "hintText",\n          label: "Label with hint text",\n          endElement: {\n            type: "suffix",\n            value: "Hint text"\n          }\n        }\n      ],\n      []\n    );\n\n    return (\n      <div style={{ width: "300px" }}>\n        <Dropdown placeholder={"Placeholder text here"} options={options} label="Label" required />\n      </div>\n    );\n  }\n};\n\nexport const DropdownShowSelectedItems: Story = {\n  render: () => {\n    const options = useMemo(\n      () =>\n        Array.from({ length: 10 }, (_, i) => ({\n          value: `Option ${i + 1}`,\n          label: `Option ${i + 1}`\n        })),\n      []\n    );\n\n    return (\n      <div style={{ width: "300px" }}>\n        <Dropdown\n          placeholder={"Placeholder text here"}\n          options={options}\n          defaultValue={[options[0], options[2], options[3]]}\n          label="Label"\n          required\n          multi\n          showSelectedOptions\n        />\n      </div>\n    );\n  }\n};\n\nexport const DropdownWithTooltips: Story = {\n  render: () => {\n    const optionsWithTooltips = useMemo(\n      () =>\n        Array.from({ length: 2 }, (_, i) => ({\n          value: `Option ${i + 1}`,\n          label: `Option ${i + 1}`,\n          tooltipProps: {\n            content: `Description for option ${i + 1}`\n          }\n        })),\n      []\n    );\n\n    return (\n      <div style={{ width: "300px" }}>\n        <Dropdown placeholder={"Placeholder text here"} options={optionsWithTooltips} />\n      </div>\n    );\n  }\n};\n\nexport const DropdownInsidePopover: Story = {\n  render: () => {\n    const options = useMemo(\n      () =>\n        Array.from({ length: 15 }, (_, i) => ({\n          value: `${i + 1}`,\n          label: `Option ${i + 1}`\n        })),\n      []\n    );\n\n    const [show, setShow] = useState(false);\n\n    const closeModal = useCallback(() => {\n      setShow(false);\n    }, [setShow]);\n\n    const dialogStyle = {\n      width: "350px",\n      height: "200px",\n      overflow: "auto"\n    };\n\n    return (\n      <Flex gap="large">\n        <DialogContentContainer style={dialogStyle}>\n          <ModalExampleContent />\n          <Box marginTop="medium" marginBottom="xxl">\n            <div style={{ width: "300px" }}>\n              <Dropdown placeholder="Dropdown inside DialogContentContainer" options={options} />\n            </div>\n          </Box>\n        </DialogContentContainer>\n        <div>\n          <Button onClick={() => setShow(true)}>Open Modal</Button>\n          <Modal title="Modal with dropdown" show={show} onClose={closeModal}>\n            <ModalContent>\n              <div style={{ width: "300px" }}>\n                <Dropdown placeholder="Dropdown" options={options} />\n              </div>\n            </ModalContent>\n          </Modal>\n        </div>\n      </Flex>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { ModalExampleContent }\n      }\n    }\n  },\n  name: "Dropdown inside popover"\n};\n',locationsMap:{overview:{startLoc:{col:31,line:60},endLoc:{col:1,line:72},startBody:{col:31,line:60},endBody:{col:1,line:72}},sizes:{startLoc:{col:28,line:74},endLoc:{col:1,line:98},startBody:{col:28,line:74},endBody:{col:1,line:98}},states:{startLoc:{col:29,line:100},endLoc:{col:1,line:121},startBody:{col:29,line:100},endBody:{col:1,line:121}},"multi-select":{startLoc:{col:34,line:123},endLoc:{col:1,line:175},startBody:{col:34,line:123},endBody:{col:1,line:175}},"dropdown-with-icon-or-avatar":{startLoc:{col:47,line:177},endLoc:{col:1,line:260},startBody:{col:47,line:177},endBody:{col:1,line:260}},searchable:{startLoc:{col:33,line:262},endLoc:{col:1,line:279},startBody:{col:33,line:262},endBody:{col:1,line:279}},"dropdown-with-groups":{startLoc:{col:41,line:281},endLoc:{col:1,line:339},startBody:{col:41,line:281},endBody:{col:1,line:339}},"dropdown-item-with-elements":{startLoc:{col:47,line:341},endLoc:{col:1,line:394},startBody:{col:47,line:341},endBody:{col:1,line:394}},"dropdown-show-selected-items":{startLoc:{col:48,line:396},endLoc:{col:1,line:421},startBody:{col:48,line:396},endBody:{col:1,line:421}},"dropdown-with-tooltips":{startLoc:{col:43,line:423},endLoc:{col:1,line:443},startBody:{col:43,line:423},endBody:{col:1,line:443}},"dropdown-inside-popover":{startLoc:{col:44,line:445},endLoc:{col:1,line:499},startBody:{col:44,line:445},endBody:{col:1,line:499}}}}},title:"Components/Dropdown [Alpha]",component:Dropdown.A,argTypes:metaSettings.argTypes,decorators:metaSettings.decorators};var dropdownTemplate=function dropdownTemplate(props){var options=(0,react.useMemo)((function(){return[{value:1,label:"Option 1"},{value:2,label:"Option 2"},{value:3,label:"Option 3"}]}),[]);return(0,jsx_runtime.jsx)("div",{style:{height:"150px",width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,_objectSpread({options,label:"Label",helperText:"Helper text"},props))})};dropdownTemplate.displayName="dropdownTemplate";var Overview={render:dropdownTemplate.bind({}),args:{placeholder:"Placeholder text here"},parameters:{docs:{liveEdit:{isEnabled:!1}}}},Sizes={render:function render(){var options=(0,react.useMemo)((function(){return[{value:1,label:"Option 1"},{value:2,label:"Option 2"},{value:3,label:"Option 3"}]}),[]);return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options,placeholder:"Placeholder text here",size:"large"})}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options,placeholder:"Placeholder text here",size:"medium"})}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options,placeholder:"Placeholder text here",size:"small"})})]})}},States={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"row",gap:"medium",children:[(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options:[],placeholder:"Default"})}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options:[],placeholder:"Disabled",disabled:!0})})]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options:[],placeholder:"Error",error:!0})}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{options:[],placeholder:"Readonly",readOnly:!0})})]})]})}},MultiSelect={render:function render(){var options=(0,react.useMemo)((function(){return[{value:"1",label:"Option 1"},{value:"2",label:"Option 2"},{value:"3",label:"Option 3"},{value:"4",label:"Option 4"}]}),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:"large",align:"start",justify:"start",children:[(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Single line with hidden options"}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"50px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Single line multi state",defaultValue:[options[0],options[1],options[2]],options,multi:!0})})]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Multiple lines"}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"50px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Multiple line multi state",defaultValue:[options[0],options[1],options[2]],options,multi:!0,multiline:!0})})]})]})}},DropdownWithIconOrAvatar={render:function render(){var optionsIcons=(0,react.useMemo)((function(){return[{value:"email",label:"Email",startElement:{type:"icon",value:Email.A}},{value:"attach",label:"Attach",startElement:{type:"icon",value:Attach.A}}]}),[]),optionsAvatar=(0,react.useMemo)((function(){return[{value:"Julia",label:"Julia Martinez",startElement:{type:"avatar",value:person1_namespaceObject}},{value:"Sophia",label:"Sophia Johnson",startElement:{type:"avatar",value:person2_namespaceObject}},{value:"Marco",label:"Marco DiAngelo",startElement:{type:"avatar",value:person3_namespaceObject}}]}),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:"large",align:"start",justify:"start",children:[(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Single value"}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"10px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:optionsIcons[0],options:optionsIcons})}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"10px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:optionsAvatar[0],options:optionsAvatar})})]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Multiple values"}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"10px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsIcons[0]],options:optionsIcons,multi:!0})}),(0,jsx_runtime.jsx)("div",{style:{width:"350px",marginBottom:"10px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{defaultValue:[optionsAvatar[0]],options:optionsAvatar,multi:!0})})]})]})},parameters:{docs:{liveEdit:{scope:{person1:person1_namespaceObject,person2:person2_namespaceObject,person3:person3_namespaceObject}}}}},Searchable={render:function render(){var options=(0,react.useMemo)((function(){return Array.from({length:10},(function(_,i){return{value:"Option ".concat(i+1),label:"Option ".concat(i+1)}}))}),[]);return(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Searchable for an item",options,searchable:!0,maxMenuHeight:170})})}},DropdownWithGroups={render:function render(){var options=(0,react.useMemo)((function(){return Array.from({length:2},(function(_,groupIndex){return{label:"Group ".concat(groupIndex+1),options:Array.from({length:3},(function(_,optionIndex){return{value:"".concat(2*groupIndex+optionIndex+1),label:"Option ".concat(2*groupIndex+optionIndex+1)}}))}}))}),[]),optionsWithoutGroupLabel=(0,react.useMemo)((function(){return Array.from({length:2},(function(_,groupIndex){return{options:Array.from({length:2},(function(_,optionIndex){return{value:"".concat(2*groupIndex+optionIndex+1),label:"Option ".concat(2*groupIndex+optionIndex+1)}}))}}))}),[]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:"medium",align:"start",justify:"start",children:[(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Group by divider"}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Group by divider",options:optionsWithoutGroupLabel,withGroupDivider:!0,maxMenuHeight:170})})]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Group by category title"}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Group by category title",options,maxMenuHeight:170})})]}),(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",gap:"medium",children:[(0,jsx_runtime.jsx)(Text.A,{children:"Group by category title sticky"}),(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Group by category title sticky",options,stickyGroupTitle:!0,maxMenuHeight:170})})]})]})}},DropdownItemWithElements={render:function render(){var options=(0,react.useMemo)((function(){return[{value:"icon",label:"Label with icon",startElement:{type:"icon",value:Email.A}},{value:"avatar",label:"Label with avatar",startElement:{type:"avatar",value:person1_namespaceObject}},{value:"indent",label:"Label with indent",startElement:{type:"indent"}},{value:"endIcon",label:"Label with end icon",endElement:{type:"icon",value:Email.A}},{value:"hintText",label:"Label with hint text",endElement:{type:"suffix",value:"Hint text"}}]}),[]);return(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options,label:"Label",required:!0})})}},DropdownShowSelectedItems={render:function render(){var options=(0,react.useMemo)((function(){return Array.from({length:10},(function(_,i){return{value:"Option ".concat(i+1),label:"Option ".concat(i+1)}}))}),[]);return(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options,defaultValue:[options[0],options[2],options[3]],label:"Label",required:!0,multi:!0,showSelectedOptions:!0})})}},DropdownWithTooltips={render:function render(){var optionsWithTooltips=(0,react.useMemo)((function(){return Array.from({length:2},(function(_,i){return{value:"Option ".concat(i+1),label:"Option ".concat(i+1),tooltipProps:{content:"Description for option ".concat(i+1)}}}))}),[]);return(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Placeholder text here",options:optionsWithTooltips})})}},DropdownInsidePopover={render:function render(){var options=(0,react.useMemo)((function(){return Array.from({length:15},(function(_,i){return{value:"".concat(i+1),label:"Option ".concat(i+1)}}))}),[]),_useState2=_slicedToArray((0,react.useState)(!1),2),show=_useState2[0],setShow=_useState2[1],closeModal=(0,react.useCallback)((function(){setShow(!1)}),[setShow]);return(0,jsx_runtime.jsxs)(Flex.A,{gap:"large",children:[(0,jsx_runtime.jsxs)(DialogContentContainer.A,{style:{width:"350px",height:"200px",overflow:"auto"},children:[(0,jsx_runtime.jsx)(ModalExampleContent.A,{}),(0,jsx_runtime.jsx)(Box.A,{marginTop:"medium",marginBottom:"xxl",children:(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Dropdown inside DialogContentContainer",options})})})]}),(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsx)(Button.A,{onClick:function onClick(){return setShow(!0)},children:"Open Modal"}),(0,jsx_runtime.jsx)(LegacyModal.A,{title:"Modal with dropdown",show,onClose:closeModal,children:(0,jsx_runtime.jsx)(LegacyModalContent.A,{children:(0,jsx_runtime.jsx)("div",{style:{width:"300px"},children:(0,jsx_runtime.jsx)(Dropdown.A,{placeholder:"Dropdown",options})})})})]})]})},parameters:{docs:{liveEdit:{scope:{ModalExampleContent:ModalExampleContent.A}}}},name:"Dropdown inside popover"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: dropdownTemplate.bind({}),\n  args: {\n    placeholder: "Placeholder text here"\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Sizes.parameters={...Sizes.parameters,docs:{...Sizes.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: 1,\n      label: "Option 1"\n    }, {\n      value: 2,\n      label: "Option 2"\n    }, {\n      value: 3,\n      label: "Option 3"\n    }], []);\n    return <>\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="large" />\n        </div>\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="medium" />\n        </div>\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={options} placeholder="Placeholder text here" size="small" />\n        </div>\n      </>;\n  }\n}',...Sizes.parameters?.docs?.source}}},States.parameters={...States.parameters,docs:{...States.parameters?.docs,source:{originalSource:'{\n  render: () => <Flex direction="row" gap="medium">\n      <Flex direction="column" gap="medium">\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={[]} placeholder="Default" />\n        </div>\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={[]} placeholder="Disabled" disabled />\n        </div>\n      </Flex>\n      <Flex direction="column" gap="medium">\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={[]} placeholder="Error" error />\n        </div>\n        <div style={{\n        width: "300px"\n      }}>\n          <Dropdown options={[]} placeholder="Readonly" readOnly />\n        </div>\n      </Flex>\n    </Flex>\n}',...States.parameters?.docs?.source}}},MultiSelect.parameters={...MultiSelect.parameters,docs:{...MultiSelect.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => [{\n      value: "1",\n      label: "Option 1"\n    }, {\n      value: "2",\n      label: "Option 2"\n    }, {\n      value: "3",\n      label: "Option 3"\n    }, {\n      value: "4",\n      label: "Option 4"\n    }], []);\n    return <Flex gap="large" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Single line with hidden options</Text>\n          <div style={{\n          width: "350px",\n          marginBottom: "50px"\n        }}>\n            <Dropdown placeholder="Single line multi state" defaultValue={[options[0], options[1], options[2]]} options={options} multi />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Multiple lines</Text>\n          <div style={{\n          width: "350px",\n          marginBottom: "50px"\n        }}>\n            <Dropdown placeholder="Multiple line multi state" defaultValue={[options[0], options[1], options[2]]} options={options} multi multiline />\n          </div>\n        </Flex>\n      </Flex>;\n  }\n}',...MultiSelect.parameters?.docs?.source}}},DropdownWithIconOrAvatar.parameters={...DropdownWithIconOrAvatar.parameters,docs:{...DropdownWithIconOrAvatar.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsIcons: any = useMemo(() => [{\n      value: "email",\n      label: "Email",\n      startElement: {\n        type: "icon",\n        value: Email\n      }\n    }, {\n      value: "attach",\n      label: "Attach",\n      startElement: {\n        type: "icon",\n        value: Attach\n      }\n    }], []);\n    const optionsAvatar: any = useMemo(() => [{\n      value: "Julia",\n      label: "Julia Martinez",\n      startElement: {\n        type: "avatar",\n        value: person1\n      }\n    }, {\n      value: "Sophia",\n      label: "Sophia Johnson",\n      startElement: {\n        type: "avatar",\n        value: person2\n      }\n    }, {\n      value: "Marco",\n      label: "Marco DiAngelo",\n      startElement: {\n        type: "avatar",\n        value: person3\n      }\n    }], []);\n    return <Flex gap="large" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Single value</Text>\n          <div style={{\n          width: "350px",\n          marginBottom: "10px"\n        }}>\n            <Dropdown defaultValue={optionsIcons[0]} options={optionsIcons} />\n          </div>\n          <div style={{\n          width: "350px",\n          marginBottom: "10px"\n        }}>\n            <Dropdown defaultValue={optionsAvatar[0]} options={optionsAvatar} />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Multiple values</Text>\n          <div style={{\n          width: "350px",\n          marginBottom: "10px"\n        }}>\n            <Dropdown defaultValue={[optionsIcons[0]]} options={optionsIcons} multi />\n          </div>\n          <div style={{\n          width: "350px",\n          marginBottom: "10px"\n        }}>\n            <Dropdown defaultValue={[optionsAvatar[0]]} options={optionsAvatar} multi />\n          </div>\n        </Flex>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          person1,\n          person2,\n          person3\n        }\n      }\n    }\n  }\n}',...DropdownWithIconOrAvatar.parameters?.docs?.source}}},Searchable.parameters={...Searchable.parameters,docs:{...Searchable.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => Array.from({\n      length: 10\n    }, (_, i) => ({\n      value: `Option ${i + 1}`,\n      label: `Option ${i + 1}`\n    })), []);\n    return <div style={{\n      width: "300px"\n    }}>\n        <Dropdown placeholder={"Searchable for an item"} options={options} searchable maxMenuHeight={170} />\n      </div>;\n  }\n}',...Searchable.parameters?.docs?.source}}},DropdownWithGroups.parameters={...DropdownWithGroups.parameters,docs:{...DropdownWithGroups.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => Array.from({\n      length: 2\n    }, (_, groupIndex) => ({\n      label: `Group ${groupIndex + 1}`,\n      options: Array.from({\n        length: 3\n      }, (_, optionIndex) => ({\n        value: `${groupIndex * 2 + optionIndex + 1}`,\n        label: `Option ${groupIndex * 2 + optionIndex + 1}`\n      }))\n    })), []);\n    const optionsWithoutGroupLabel = useMemo(() => Array.from({\n      length: 2\n    }, (_, groupIndex) => ({\n      options: Array.from({\n        length: 2\n      }, (_, optionIndex) => ({\n        value: `${groupIndex * 2 + optionIndex + 1}`,\n        label: `Option ${groupIndex * 2 + optionIndex + 1}`\n      }))\n    })), []);\n    return <Flex gap="medium" align="start" justify="start">\n        <Flex direction="column" gap="medium">\n          <Text>Group by divider</Text>\n          <div style={{\n          width: "300px"\n        }}>\n            <Dropdown placeholder="Group by divider" options={optionsWithoutGroupLabel} withGroupDivider maxMenuHeight={170} />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Group by category title</Text>\n          <div style={{\n          width: "300px"\n        }}>\n            <Dropdown placeholder="Group by category title" options={options} maxMenuHeight={170} />\n          </div>\n        </Flex>\n        <Flex direction="column" gap="medium">\n          <Text>Group by category title sticky</Text>\n          <div style={{\n          width: "300px"\n        }}>\n            <Dropdown placeholder="Group by category title sticky" options={options} stickyGroupTitle maxMenuHeight={170} />\n          </div>\n        </Flex>\n      </Flex>;\n  }\n}',...DropdownWithGroups.parameters?.docs?.source}}},DropdownItemWithElements.parameters={...DropdownItemWithElements.parameters,docs:{...DropdownItemWithElements.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options: BaseListItemData<Record<string, unknown>>[] = useMemo(() => [{\n      value: "icon",\n      label: "Label with icon",\n      startElement: {\n        type: "icon",\n        value: Email\n      }\n    }, {\n      value: "avatar",\n      label: "Label with avatar",\n      startElement: {\n        type: "avatar",\n        value: person1\n      }\n    }, {\n      value: "indent",\n      label: "Label with indent",\n      startElement: {\n        type: "indent"\n      }\n    }, {\n      value: "endIcon",\n      label: "Label with end icon",\n      endElement: {\n        type: "icon",\n        value: Email\n      }\n    }, {\n      value: "hintText",\n      label: "Label with hint text",\n      endElement: {\n        type: "suffix",\n        value: "Hint text"\n      }\n    }], []);\n    return <div style={{\n      width: "300px"\n    }}>\n        <Dropdown placeholder={"Placeholder text here"} options={options} label="Label" required />\n      </div>;\n  }\n}',...DropdownItemWithElements.parameters?.docs?.source}}},DropdownShowSelectedItems.parameters={...DropdownShowSelectedItems.parameters,docs:{...DropdownShowSelectedItems.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => Array.from({\n      length: 10\n    }, (_, i) => ({\n      value: `Option ${i + 1}`,\n      label: `Option ${i + 1}`\n    })), []);\n    return <div style={{\n      width: "300px"\n    }}>\n        <Dropdown placeholder={"Placeholder text here"} options={options} defaultValue={[options[0], options[2], options[3]]} label="Label" required multi showSelectedOptions />\n      </div>;\n  }\n}',...DropdownShowSelectedItems.parameters?.docs?.source}}},DropdownWithTooltips.parameters={...DropdownWithTooltips.parameters,docs:{...DropdownWithTooltips.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const optionsWithTooltips = useMemo(() => Array.from({\n      length: 2\n    }, (_, i) => ({\n      value: `Option ${i + 1}`,\n      label: `Option ${i + 1}`,\n      tooltipProps: {\n        content: `Description for option ${i + 1}`\n      }\n    })), []);\n    return <div style={{\n      width: "300px"\n    }}>\n        <Dropdown placeholder={"Placeholder text here"} options={optionsWithTooltips} />\n      </div>;\n  }\n}',...DropdownWithTooltips.parameters?.docs?.source}}},DropdownInsidePopover.parameters={...DropdownInsidePopover.parameters,docs:{...DropdownInsidePopover.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const options = useMemo(() => Array.from({\n      length: 15\n    }, (_, i) => ({\n      value: `${i + 1}`,\n      label: `Option ${i + 1}`\n    })), []);\n    const [show, setShow] = useState(false);\n    const closeModal = useCallback(() => {\n      setShow(false);\n    }, [setShow]);\n    const dialogStyle = {\n      width: "350px",\n      height: "200px",\n      overflow: "auto"\n    };\n    return <Flex gap="large">\n        <DialogContentContainer style={dialogStyle}>\n          <ModalExampleContent />\n          <Box marginTop="medium" marginBottom="xxl">\n            <div style={{\n            width: "300px"\n          }}>\n              <Dropdown placeholder="Dropdown inside DialogContentContainer" options={options} />\n            </div>\n          </Box>\n        </DialogContentContainer>\n        <div>\n          <Button onClick={() => setShow(true)}>Open Modal</Button>\n          <Modal title="Modal with dropdown" show={show} onClose={closeModal}>\n            <ModalContent>\n              <div style={{\n              width: "300px"\n            }}>\n                <Dropdown placeholder="Dropdown" options={options} />\n              </div>\n            </ModalContent>\n          </Modal>\n        </div>\n      </Flex>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          ModalExampleContent\n        }\n      }\n    }\n  },\n  name: "Dropdown inside popover"\n}',...DropdownInsidePopover.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Sizes","States","MultiSelect","DropdownWithIconOrAvatar","Searchable","DropdownWithGroups","DropdownItemWithElements","DropdownShowSelectedItems","DropdownWithTooltips","DropdownInsidePopover"]},"./src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});__webpack_require__("../../node_modules/react/index.js");var _components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Flex/Flex.tsx"),_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Skeleton/Skeleton.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js"),ModalExampleContent=function ModalExampleContent(){var children=Array.from({length:2},(function(_value,index){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components__WEBPACK_IMPORTED_MODULE_2__.A,{gap:"small",style:{width:"100%"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.CIRCLE,width:30,height:30}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.TEXT,fullWidth:!0})]},index)}));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_components__WEBPACK_IMPORTED_MODULE_2__.A,{direction:"column",align:"start",gap:"small",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_components__WEBPACK_IMPORTED_MODULE_3__.A,{type:_components__WEBPACK_IMPORTED_MODULE_3__.A.types.TEXT,size:_components__WEBPACK_IMPORTED_MODULE_3__.A.sizes.TEXT.H1,fullWidth:!0}),children]})};ModalExampleContent.displayName="ModalExampleContent";const __WEBPACK_DEFAULT_EXPORT__=ModalExampleContent;try{ModalExampleContent.displayName="ModalExampleContent",ModalExampleContent.__docgenInfo={description:"",displayName:"ModalExampleContent",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx#ModalExampleContent"]={docgenInfo:ModalExampleContent.__docgenInfo,name:"ModalExampleContent",path:"src/storybook/patterns/dropdown-in-modals/ModalExampleContent.tsx#ModalExampleContent"})}catch(__react_docgen_typescript_loader_error){}}}]);