import{j as c}from"./jsx-runtime-lwGtIXvq.js";import{r}from"./index-CTZeEbLr.js";import{c as f}from"./index-BpvXyOxN.js";import{u as Q}from"./useMergeRef-C008K4k9.js";import{a as U}from"./useClickableProps-DFA_eb5O.js";import{u as X}from"./index-BWKJv4Cj.js";import{u as Y}from"./useIsomorphicLayoutEffect-CtfxbExD.js";import{k as D}from"./function-utils-CSFuT5hl.js";const Z="_editableTypography_1ea3h_1",ee="_input_1ea3h_9",te="_textarea_1ea3h_10",ae="_typography_1ea3h_32",ne="_disabled_1ea3h_37",le="_hidden_1ea3h_40",oe="_placeholder_1ea3h_47",re="_multiline_1ea3h_50",s={editableTypography:Z,input:ee,textarea:te,typography:ae,disabled:ne,hidden:le,placeholder:oe,multiline:re},ie=2,R=r.forwardRef(({id:T,className:K,"data-testid":M,value:o,onChange:m,onClick:h,readOnly:V=!1,ariaLabel:y="",placeholder:u,clearable:j,typographyClassName:g,component:A,isEditMode:b,autoSelectTextOnEditMode:w,onEditModeChange:_,tooltipProps:B,type:F,weight:H,multiline:d=!1},L)=>{const O=r.useRef(null),W=Q(L,O),[a,q]=r.useState(b||!1),[n,p]=r.useState(o),P=X(o),t=r.useRef(null),E=r.useRef(null);r.useEffect(()=>{!a&&o!==P&&o!==n&&p(o)},[P,a,o,n]),r.useEffect(()=>{q(b)},[b]);function $(e){h==null||h(e),I(e)}function I(e){V||a||(e.preventDefault(),x(!0))}function x(e){_==null||_(e),q(e)}function v(){if(x(!1),o===n)return;if(!n&&!(j&&u)){p(o);return}p(n),m==null||m(n)}function C(){v()}function N(e){if(!e.nativeEvent.isComposing){if(e.key===D.ENTER){if(d&&e.shiftKey)return;e.preventDefault(),e.stopPropagation(),v()}e.key===D.ESCAPE&&(e.preventDefault(),e.stopPropagation(),x(!1),p(o))}}function S(e){p(e.target.value)}const z=U(I);function G(){var e,i;if((i=(e=t.current)==null?void 0:e.focus)==null||i.call(e),t.current){const l=t.current,k=l.value.length;l.setSelectionRange(k,k)}}function J(){var e,i;(i=(e=t.current)==null?void 0:e.select)==null||i.call(e)}return r.useEffect(()=>{a&&(G(),w&&J())},[w,a]),Y(()=>{var i;if(!E.current)return;const{width:e}=E.current.getBoundingClientRect();if((i=t==null?void 0:t.current)==null||i.style.setProperty("--input-width",`${e}px`),d){const l=t==null?void 0:t.current;l==null||l.style.setProperty("--input-height","auto"),l==null||l.style.setProperty("--input-height",`${l.scrollHeight+ie}px`)}},[n,a]),c.jsxs("div",{ref:W,id:T,"aria-label":y,"data-testid":M,className:f(s.editableTypography,K),role:a?null:"button",onClick:$,onKeyDown:z,children:[a&&(d?c.jsx("textarea",{ref:t,className:f(s.textarea,g),value:n,onChange:S,onKeyDown:N,onBlur:C,"aria-label":y,placeholder:u,role:"textbox",rows:1}):c.jsx("input",{ref:t,className:f(s.input,g),value:n,onChange:S,onKeyDown:N,onBlur:C,"aria-label":y,placeholder:u,role:"input"})),c.jsx(A,{ref:E,"aria-hidden":a,className:f(s.typography,g,{[s.hidden]:a,[s.disabled]:V,[s.placeholder]:!n&&u,[s.multiline]:!a&&d}),tabIndex:0,tooltipProps:B,weight:H,type:F,ellipsis:!d,children:n||u})]})});try{R.displayName="EditableTypography",R.__docgenInfo={description:"",displayName:"EditableTypography",props:{component:{defaultValue:null,description:"The typography component used in view mode.",name:"component",required:!0,type:{name:"ElementType<any, keyof IntrinsicElements>"}},typographyClassName:{defaultValue:null,description:"Class name applied to the typography component.",name:"typographyClassName",required:!0,type:{name:"string"}},clearable:{defaultValue:null,description:"If true, shows the placeholder when empty.",name:"clearable",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"The text or heading type.",name:"type",required:!1,type:{name:"HeadingType | TextType"}},weight:{defaultValue:null,description:"The text or heading weight.",name:"weight",required:!1,type:{name:'"medium" | "light" | "bold" | "normal"'}},multiline:{defaultValue:{value:"false"},description:"If true, enables multi-line editing.",name:"multiline",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The current value of the text.",name:"value",required:!0,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.",name:"onChange",required:!1,type:{name:"(value: string) => void"}},onClick:{defaultValue:null,description:"Callback fired when the component is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},readOnly:{defaultValue:{value:"false"},description:"If true, the text is read-only and cannot be edited.",name:"readOnly",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"Placeholder text displayed when the value is empty.",name:"placeholder",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:{value:""},description:"The label of the component for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},isEditMode:{defaultValue:null,description:"Controls whether the component is in edit mode.",name:"isEditMode",required:!1,type:{name:"boolean"}},autoSelectTextOnEditMode:{defaultValue:null,description:"If true, automatically selects all text when entering edit mode.",name:"autoSelectTextOnEditMode",required:!1,type:{name:"boolean"}},onEditModeChange:{defaultValue:null,description:"Callback fired when the edit mode changes.",name:"onEditModeChange",required:!1,type:{name:"(isEditMode: boolean) => void"}},tooltipProps:{defaultValue:null,description:"Props to customize the tooltip.",name:"tooltipProps",required:!1,type:{name:"Partial<TooltipProps>"}}}}}catch{}export{R as E};
