import{j as i}from"./jsx-runtime-lwGtIXvq.js";import{r as u,R as L}from"./index-CTZeEbLr.js";import{c as ae,u as se,a as le,T as oe}from"./Tooltip-BrDhcDk7.js";import{I as W}from"./Icon-B1P6-uxB.js";import{u as ue}from"./useIsOverflowing-CDKfAaU8.js";import{a as G}from"./Label-D0neWjK8.js";import{T as re}from"./Text-CYK--k2a.js";import{g as de,C as ce}from"./test-ids-utils-CSfXomCJ.js";import{c as S}from"./index-BpvXyOxN.js";import{D as me}from"./Divider-DKlLqHdh.js";import{F as J}from"./Flex-D6jv3OvD.js";import{I as pe}from"./IconButton-BtXl5no_.js";import{t as U}from"./DropdownChevronRight-CtJWrCfY.js";import{D as fe}from"./DialogContentContainer-CyLYKep7.js";import{u as X}from"./useIsomorphicLayoutEffect-CtfxbExD.js";import{c as K,u as he,a as be}from"./useMenuItemKeyboardEvents-fL9CsK7e.js";import{u as ye}from"./useMergeRef-C008K4k9.js";import{w as ve}from"./withStaticProps-DfSG2La2.js";const Ie="_title_n6jon_1",Me={title:Ie},_e=-1,ge="_subMenuIconWrapper_10j8x_1",qe="_divider_10j8x_4",Ve="_splitSubMenuIcon_10j8x_7",Te="_subMenuIcon_10j8x_1",Se="_disabled_10j8x_15",Ce="_splitMenuItemIconButton_10j8x_20",v={subMenuIconWrapper:ge,divider:qe,splitSubMenuIcon:Ve,subMenuIcon:Te,disabled:Se,splitMenuItemIconButton:Ce},B=u.forwardRef((e,n)=>i.jsx(J,{justify:"center",className:v.subMenuIconWrapper,children:e.isSplit===!0?i.jsxs(i.Fragment,{children:[i.jsx(me,{direction:"vertical",className:v.divider}),i.jsx(pe,{icon:U,className:v.splitMenuItemIconButton,kind:"tertiary",size:null,iconClassName:S(v.splitSubMenuIcon,{[v.disabled]:e.disabled}),tabIndex:-1,ref:n,active:e.active,disabled:e.disabled})]}):i.jsx(W,{icon:U,iconLabel:e.label,className:S(v.subMenuIcon,{[v.disabled]:e.disabled}),ignoreFocusStyle:!0,iconSize:18})}));try{B.displayName="MenuItemSubMenuIcon",B.__docgenInfo={description:"",displayName:"MenuItemSubMenuIcon",props:{isSplit:{defaultValue:null,description:`Determines whether the submenu icon is part of the main menu item.
When false, the submenu is accessed by interacting with the main menu item itself.
Determines whether the submenu icon is split from the main menu item.
When true, clicking the main menu item and the submenu icon trigger different actions.`,name:"isSplit",required:!1,type:{name:"boolean"}},label:{defaultValue:null,description:"Label for the submenu icon, used for accessibility.",name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:`Whether the submenu icon is disabled.
Whether the split submenu icon is disabled.`,name:"disabled",required:!1,type:{name:"boolean"}},active:{defaultValue:null,description:"Indicates if the split submenu is currently active.",name:"active",required:!1,type:{name:"boolean"}}}}}catch{}var H=(e=>(e.RIGHT="right",e.RIGHT_START="right-start",e.RIGHT_END="right-end",e.LEFT="left",e.LEFT_START="left-start",e.LEFT_END="left-end",e))(H||{});const we=()=>({});function xe(){return u.useReducer(we,{})[1]}const P=(e=!1)=>({name:"observeReferenceResize",enabled:e,phase:"beforeWrite",fn(){},effect({state:n,instance:l}){if(!n.elements.reference)return;const t=new ResizeObserver(()=>{l.update()}),r=n.elements.reference;return t.observe(r),()=>{t.disconnect()}}});try{P.displayName="createObserveReferenceResizeModifier",P.__docgenInfo={description:"",displayName:"createObserveReferenceResizeModifier",props:{}}}catch{}const{RIGHT_START:Ee,RIGHT_END:Re,LEFT_START:Ne,LEFT_END:je}=H,Oe=[Re,Ne,je];function ke(e,n,{isOpen:l,placement:t=Ee,observeContentResize:r,observeReferenceResize:c,offset:m,fallbackPlacements:o=Oe}){const s=xe();X(()=>{s()},[e,n,s]);const h=u.useMemo(()=>({placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:o}},{name:"displayNone",enabled:!0,phase:"write",fn:({state:a})=>(a.styles.popper.visibility=l?"visible":"hidden",a)},ae(r),P(c),m!==void 0&&{name:"offset",options:{offset:m}}]}),[t,r,m,l]),{styles:b,attributes:y}=se(e,n,h);return{styles:b,attributes:y}}const F=({anchorRef:e,open:n,autoFocusOnMount:l,onClose:t,children:r,submenuPosition:c,autoAdjustOnSubMenuContentResize:m})=>{var p;const o=u.useRef(null),s=u.useRef(null);X(()=>{!l||!n||!(o!=null&&o.current)||requestAnimationFrame(()=>{o.current.focus()})},[l,n]);const h=u.useMemo(()=>c==="left"?H.LEFT_START:void 0,[c]),{styles:b,attributes:y}=ke(e==null?void 0:e.current,s==null?void 0:s.current,{isOpen:n,placement:h,observeContentResize:m}),a=r&&L.Children.only(r);return(p=a==null?void 0:a.type)!=null&&p.isMenu?i.jsx("div",{style:{...b.popper,visibility:n?"visible":"hidden"},...y.popper,ref:s,children:a&&n&&i.jsx(fe,{children:L.cloneElement(a,{...a==null?void 0:a.props,isVisible:n,isSubMenu:!0,onClose:t,ref:o,useDocumentEventListeners:!l})})}):(console.error("MenuItem can accept only Menu element as first level child, this element is not valid: ",a),null)};try{F.displayName="MenuItemSubMenu",F.__docgenInfo={description:"",displayName:"MenuItemSubMenu",props:{anchorRef:{defaultValue:null,description:`Reference to the anchor element that the submenu is related to.
This is used to position the submenu correctly relative to the parent menu item.`,name:"anchorRef",required:!0,type:{name:"MutableRefObject<HTMLElement>"}},open:{defaultValue:null,description:"Controls the visibility of the submenu. If true, the submenu is shown; otherwise, it is hidden.",name:"open",required:!1,type:{name:"boolean"}},autoFocusOnMount:{defaultValue:null,description:"If true, the submenu will automatically receive focus when it mounts.",name:"autoFocusOnMount",required:!1,type:{name:"boolean"}},onClose:{defaultValue:null,description:"Function to call when the submenu is requested to close.\nThis can be triggered by user interaction or programmatically.\nThe function may accept an optional object with a `propagate` property, which can be used to control whether the close event should also propagate up to parent menus.",name:"onClose",required:!1,type:{name:"(option?: CloseMenuOption) => void"}},children:{defaultValue:null,description:"The submenu content, which should be a `Menu` component.",name:"children",required:!0,type:{name:"MenuChild | MenuChild[]"}},submenuPosition:{defaultValue:null,description:"The position of the submenu relative to its parent menu item.",name:"submenuPosition",required:!1,type:{name:"SubmenuPosition"}},autoAdjustOnSubMenuContentResize:{defaultValue:null,description:"If true, automatically repositions the submenu when its content changes.",name:"autoAdjustOnSubMenuContentResize",required:!1,type:{name:"boolean"}}}}}catch{}const Ae="_item_qr94d_2",Le="_splitMenuItem_qr94d_15",Be="_disabled_qr94d_18",Pe="_focused_qr94d_22",Fe="_initialSelected_qr94d_26",De="_selected_qr94d_32",_={item:Ae,splitMenuItem:Le,disabled:Be,focused:Pe,initialSelected:Fe,selected:De},D=u.forwardRef(({subMenu:e,className:n,menuRef:l,disabled:t=!1,selected:r=!1,onClick:c,activeItemIndex:m=-1,setActiveItemIndex:o,index:s,id:h,isParentMenuVisible:b=!1,resetOpenSubMenuIndex:y,hasOpenSubMenu:a=!1,setSubMenuIsOpenByIndex:p,closeMenu:g,useDocumentEventListeners:I=!1,isInitialSelectedState:x,onMouseEnter:E,onMouseLeave:R,shouldScrollMenu:q,"data-testid":N,splitMenuItem:V=!1,children:j,submenuPosition:O="right",autoAdjustOnSubMenuContentResize:k},Y)=>{const f=m===s,C=!t&&!!e&&b&&(f&&a),M=u.useRef(null),A=u.useRef(null),Q=ye(Y,M),Z=K({ref:M}),ee=K({ref:A});u.useEffect(()=>{var $;const d=M.current;if(!(!f||!q||!d)){if(d.scrollIntoViewIfNeeded){d.scrollIntoViewIfNeeded({behaviour:"smooth"});return}($=d.scrollIntoView)==null||$.call(d,{behavior:"smooth",block:"center"})}},[f,q]),u.useEffect(()=>{const d=M.current;I||f&&(d==null||d.focus())},[f,I]);const te=he({ref:M,splitMenuItemIconButtonRef:A,resetOpenSubMenuIndex:y,setSubMenuIsOpenByIndex:p,isActive:f,setActiveItemIndex:o,index:s,hasChildren:!!e,splitMenuItem:V}),{onClickCallback:ne}=be({onClick:c,disabled:t,isActive:f,index:s,setActiveItemIndex:o,hasChildren:!!e,shouldShowSubMenu:C,setSubMenuIsOpenByIndex:p,menuRef:l,isMouseEnter:te,closeMenu:g,useDocumentEventListeners:I,splitMenuItem:V,isMouseEnterMenuItem:Z,isMouseEnterIconButton:ee}),ie=u.useCallback((d={})=>{p(s,!1),d.propagate&&g(d)},[p,s,g]);return i.jsxs(re,{id:h,element:"li",type:"text2","aria-haspopup":e?!0:void 0,"aria-expanded":e?C:void 0,"data-testid":N||de(ce.MENU_ITEM,s),className:S(_.item,n,{[_.disabled]:t,[_.focused]:f,[_.selected]:r,[_.initialSelected]:x,[_.splitMenuItem]:V}),ref:Q,onClick:ne,role:"menuitem","aria-selected":f,onMouseLeave:R,onMouseEnter:E,tabIndex:_e,withoutTooltip:!0,children:[j,!!e&&i.jsxs(i.Fragment,{children:[i.jsx(B,{ref:A,isSplit:V,active:C,disabled:t}),i.jsx(F,{anchorRef:M,open:C,onClose:ie,autoFocusOnMount:!I,submenuPosition:O,autoAdjustOnSubMenuContentResize:k,children:e})]})]})});try{D.displayName="BaseMenuItem",D.__docgenInfo={description:"",displayName:"BaseMenuItem",props:{subMenu:{defaultValue:null,description:"The submenu items associated with this menu item.\n**Note:** Only `Menu` elements are allowed as first-level children, even though `MenuChild[]` is currently accepted.",name:"subMenu",required:!1,type:{name:"MenuChild | MenuChild[]"}},children:{defaultValue:null,description:"The content of the menu item.",name:"children",required:!0,type:{name:"ReactNode"}},disabled:{defaultValue:{value:"false"},description:"If true, the menu item is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},selected:{defaultValue:{value:"false"},description:"If true, the menu item is selected.",name:"selected",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Callback fired when the menu item is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},disableReason:{defaultValue:null,description:"The reason for disabling the item, shown in a tooltip.",name:"disableReason",required:!1,type:{name:"string"}},activeItemIndex:{defaultValue:{value:"-1"},description:"The active item index in the menu.",name:"activeItemIndex",required:!1,type:{name:"number"}},setActiveItemIndex:{defaultValue:null,description:"Callback to set the active item index.",name:"setActiveItemIndex",required:!1,type:{name:"(index: number) => void"}},index:{defaultValue:null,description:"The index of the menu item.",name:"index",required:!1,type:{name:"number"}},isParentMenuVisible:{defaultValue:{value:"false"},description:"If true, the parent menu is visible.",name:"isParentMenuVisible",required:!1,type:{name:"boolean"}},resetOpenSubMenuIndex:{defaultValue:null,description:"Callback to reset the open submenu index.",name:"resetOpenSubMenuIndex",required:!1,type:{name:"() => void"}},hasOpenSubMenu:{defaultValue:{value:"false"},description:"If true, a submenu is open.",name:"hasOpenSubMenu",required:!1,type:{name:"boolean"}},setSubMenuIsOpenByIndex:{defaultValue:null,description:"Callback to open or close a submenu by index.",name:"setSubMenuIsOpenByIndex",required:!1,type:{name:"(index: number, isOpen: boolean) => void"}},useDocumentEventListeners:{defaultValue:{value:"false"},description:"If true, document event listeners are used for handling interactions.",name:"useDocumentEventListeners",required:!1,type:{name:"boolean"}},onMouseLeave:{defaultValue:null,description:"Callback fired when the mouse leaves the item.",name:"onMouseLeave",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},onMouseEnter:{defaultValue:null,description:"Callback fired when the mouse enters the item.",name:"onMouseEnter",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},isInitialSelectedState:{defaultValue:null,description:"If true, the menu item starts as selected.",name:"isInitialSelectedState",required:!1,type:{name:"boolean"}},shouldScrollMenu:{defaultValue:null,description:"If true, the menu scrolls to ensure visibility.",name:"shouldScrollMenu",required:!1,type:{name:"boolean"}},closeMenu:{defaultValue:null,description:"Function to close the menu with a given option.",name:"closeMenu",required:!1,type:{name:"(option: CloseMenuOption) => void"}},menuRef:{defaultValue:null,description:"Reference to the menu container.",name:"menuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},splitMenuItem:{defaultValue:{value:"false"},description:`If true, enables a split menu item interaction where the main area triggers an action,
while the icon button opens the submenu.`,name:"splitMenuItem",required:!1,type:{name:"boolean"}},submenuPosition:{defaultValue:{value:"right"},description:"The position of a submenu relative to the menu item.",name:"submenuPosition",required:!1,type:{name:"SubmenuPosition"}},autoAdjustOnSubMenuContentResize:{defaultValue:null,description:"If true, automatically repositions the submenu when its content changes.",name:"autoAdjustOnSubMenuContentResize",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}}}}}catch{}const ze="_iconWrapper_1b58v_1",We="_withBackgroundColor_1b58v_4",He="_disabled_1b58v_7",$e="_icon_1b58v_1",Ge="_selected_1b58v_20",T={iconWrapper:ze,withBackgroundColor:We,disabled:He,icon:$e,selected:Ge},z=({icon:e,type:n,label:l,disabled:t,selected:r,backgroundColor:c,wrapperClassName:m})=>i.jsx(J,{justify:"center",className:S(T.iconWrapper,{[T.disabled]:t,[T.withBackgroundColor]:!!c},m),style:{...c&&{backgroundColor:c}},children:i.jsx(W,{iconType:n||(typeof e=="function"?"svg":"font"),icon:e,className:S(T.icon,{[T.selected]:!t&&r}),ignoreFocusStyle:!0,iconSize:18})});try{z.displayName="MenuItemIcon",z.__docgenInfo={description:"",displayName:"MenuItemIcon",props:{icon:{defaultValue:null,description:"The icon to be displayed. Can be a string or an icon component.",name:"icon",required:!1,type:{name:"SubIcon"}},type:{defaultValue:null,description:"The type of icon to be used.",name:"type",required:!1,type:{name:"IconType"}},label:{defaultValue:null,description:`Label for the icon, used for accessibility.
@deprecated This property will be removed in the next major version.`,name:"label",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If true, the icon appears disabled.",name:"disabled",required:!1,type:{name:"boolean"}},selected:{defaultValue:null,description:"If true, the icon appears selected.",name:"selected",required:!1,type:{name:"boolean"}},backgroundColor:{defaultValue:null,description:"The background color of the icon wrapper.",name:"backgroundColor",required:!1,type:{name:"string"}},wrapperClassName:{defaultValue:null,description:"Additional class name for styling the icon wrapper.",name:"wrapperClassName",required:!1,type:{name:"string"}}}}}catch{}const w=u.forwardRef(({className:e,iconWrapperClassName:n,title:l="",label:t="",icon:r="",iconType:c,iconBackgroundColor:m,disabled:o=!1,disableReason:s,selected:h=!1,key:b,children:y,tooltipContent:a,tooltipPosition:p="right",tooltipShowDelay:g=300,tooltipProps:I,"aria-label":x,...E},R)=>{const q=u.useRef(),N=x??l,j=ue({ref:q})||o||a,O=u.useMemo(()=>o?s:a||l,[s,o,l,a]),k=u.useMemo(()=>{if(t){if(typeof t=="string")return i.jsx(G,{kind:"line",text:t});if(L.isValidElement(t)&&t.type===G)return t}},[t]);return i.jsx(oe,{content:j?O:null,position:p,showDelay:g,...I,children:i.jsxs(D,{ref:R,subMenu:y,className:e,disabled:o,selected:h,...E,children:[!!r&&i.jsx(z,{icon:r,type:c,label:N,disabled:o,selected:h,backgroundColor:m,wrapperClassName:n}),i.jsx("div",{ref:q,className:Me.title,children:l}),k]},b)})});Object.assign(w,{isSelectable:!0,isMenuChild:!0});const mt=ve(w,{iconType:W.type,tooltipPositions:le});try{w.displayName="MenuItem",w.__docgenInfo={description:"",displayName:"MenuItem",props:{title:{defaultValue:{value:""},description:"The title of the menu item.",name:"title",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>>"}},label:{defaultValue:{value:""},description:"The label displayed alongside the title.",name:"label",required:!1,type:{name:"string | ReactElement<ForwardRefExoticComponent<LabelProps & RefAttributes<HTMLElement>> & Required<LabelStaticProps>, string | JSXElementConstructor<...>>"}},icon:{defaultValue:{value:""},description:"The icon displayed in the menu item.",name:"icon",required:!1,type:{name:"SubIcon"}},iconType:{defaultValue:null,description:"The type of icon.",name:"iconType",required:!1,type:{name:"IconType"}},iconBackgroundColor:{defaultValue:null,description:"The background color of the icon.",name:"iconBackgroundColor",required:!1,type:{name:"string"}},disabled:{defaultValue:{value:"false"},description:"If true, the menu item is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},disableReason:{defaultValue:null,description:"The reason for disabling the item, shown in a tooltip.",name:"disableReason",required:!1,type:{name:"string"}},selected:{defaultValue:{value:"false"},description:"If true, the menu item is selected.",name:"selected",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Callback fired when the menu item is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},activeItemIndex:{defaultValue:null,description:"The active item index in the menu.",name:"activeItemIndex",required:!1,type:{name:"number"}},setActiveItemIndex:{defaultValue:null,description:"Callback to set the active item index.",name:"setActiveItemIndex",required:!1,type:{name:"(index: number) => void"}},index:{defaultValue:null,description:"The index of the menu item.",name:"index",required:!1,type:{name:"number"}},key:{defaultValue:null,description:"The key of the menu item.",name:"key",required:!1,type:{name:"string"}},isParentMenuVisible:{defaultValue:null,description:"If true, the parent menu is visible.",name:"isParentMenuVisible",required:!1,type:{name:"boolean"}},resetOpenSubMenuIndex:{defaultValue:null,description:"Callback to reset the open submenu index.",name:"resetOpenSubMenuIndex",required:!1,type:{name:"() => void"}},hasOpenSubMenu:{defaultValue:null,description:"If true, a submenu is open.",name:"hasOpenSubMenu",required:!1,type:{name:"boolean"}},setSubMenuIsOpenByIndex:{defaultValue:null,description:"Callback to open or close a submenu by index.",name:"setSubMenuIsOpenByIndex",required:!1,type:{name:"(index: number, isOpen: boolean) => void"}},useDocumentEventListeners:{defaultValue:null,description:"If true, document event listeners are used for handling interactions.",name:"useDocumentEventListeners",required:!1,type:{name:"boolean"}},tooltipContent:{defaultValue:null,description:"The tooltip content for the menu item.",name:"tooltipContent",required:!1,type:{name:"string"}},tooltipPosition:{defaultValue:{value:"right"},description:"The position of the tooltip.",name:"tooltipPosition",required:!1,type:{name:"TooltipPositions"}},tooltipShowDelay:{defaultValue:{value:"300"},description:"The delay in milliseconds before the tooltip shows.",name:"tooltipShowDelay",required:!1,type:{name:"number"}},tooltipProps:{defaultValue:null,description:"Additional props for customizing the tooltip.",name:"tooltipProps",required:!1,type:{name:"Partial<TooltipProps>"}},onMouseLeave:{defaultValue:null,description:"Callback fired when the mouse leaves the item.",name:"onMouseLeave",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},onMouseEnter:{defaultValue:null,description:"Callback fired when the mouse enters the item.",name:"onMouseEnter",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},iconWrapperClassName:{defaultValue:null,description:"Class name applied to the icon wrapper.",name:"iconWrapperClassName",required:!1,type:{name:"string"}},isInitialSelectedState:{defaultValue:null,description:"If true, the menu item starts as selected.",name:"isInitialSelectedState",required:!1,type:{name:"boolean"}},shouldScrollMenu:{defaultValue:null,description:"If true, the menu scrolls to ensure visibility.",name:"shouldScrollMenu",required:!1,type:{name:"boolean"}},closeMenu:{defaultValue:null,description:"Function to close the menu with a given option.",name:"closeMenu",required:!1,type:{name:"(option: CloseMenuOption) => void"}},menuRef:{defaultValue:null,description:"Reference to the menu container.",name:"menuRef",required:!1,type:{name:"RefObject<HTMLElement>"}},children:{defaultValue:null,description:"The submenu items, if applicable.",name:"children",required:!1,type:{name:"MenuChild | MenuChild[]"}},splitMenuItem:{defaultValue:null,description:`If true, enables a split menu item interaction where the main area triggers an action,
while the icon button opens the submenu.`,name:"splitMenuItem",required:!1,type:{name:"boolean"}},"aria-label":{defaultValue:null,description:"The label of the menu item for accessibility.",name:"aria-label",required:!1,type:{name:"string"}},submenuPosition:{defaultValue:null,description:"The position of a submenu relative to the menu item.",name:"submenuPosition",required:!1,type:{name:"SubmenuPosition"}},autoAdjustOnSubMenuContentResize:{defaultValue:null,description:"If true, automatically repositions the submenu when its content changes.",name:"autoAdjustOnSubMenuContentResize",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{mt as M};
