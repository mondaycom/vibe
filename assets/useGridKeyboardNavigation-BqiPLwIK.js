import{j as e}from"./jsx-runtime-lwGtIXvq.js";import{useMDXComponents as c}from"./index-BfNsOeqz.js";import{M as m,C as p}from"./index-Z--dVy_r.js";import{a as l}from"./index-B-lxVbXh.js";import{U as u,O as h}from"./useGridKeyboardNavigation.stories-CTXzjC4N.js";import"./index-CTZeEbLr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-CrOs9Jmf.js";import"./index-C_BMBL_j.js";import"./index-BrqHMYbN.js";import"./index-BedKbVpA.js";import"./index-DrFu-skq.js";import"./v4-CtRu48qb.js";import"./index-BpvXyOxN.js";import"./useGridKeyboardNavigation-z8aN9zIc.js";import"./index-CkU0kzyk.js";import"./useFullKeyboardListeners-Bm0-g7hh.js";import"./index-gB5zY9qh.js";import"./ssr-utils-Do6V6AqB.js";import"./noop-DX6rZLP_.js";import"./range-D3V44zw2.js";import"./Button-ov_yT1Pd.js";import"./camelCase-CO1PkVrH.js";import"./Icon-BxXV8fvZ.js";import"./withStaticProps-DoUMAG04.js";import"./Loader-XtPXB_TQ.js";const K=72,S=24,P=l("item selected");function d(i){const n={b:"b",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...c(),...i.components},{FunctionArgument:t,FunctionArguments:o,Link:s,UsageGuidelines:a}=n;return t||r("FunctionArgument"),o||r("FunctionArguments"),s||r("Link"),a||r("UsageGuidelines"),e.jsxs(e.Fragment,{children:[e.jsx(m,{of:u}),`
`,e.jsx(n.h1,{id:"usegridkeyboardnavigation",children:"useGridKeyboardNavigation"}),`
`,e.jsx(n.p,{children:"Used for accessible keyboard navigation. Useful for components rendering items that can be navigated and selected with a keyboard."}),`
`,`
`,`
`,e.jsx(p,{of:h}),`
`,e.jsx(n.h3,{id:"import",children:"Import"}),`
`,e.jsx(n.pre,{children:e.jsx(n.code,{className:"language-js",children:`import { useGridKeyboardNavigation } from "@vibe/core";
`})}),`
`,e.jsx(n.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(a,{guidelines:["Use this hook when you want to add keyboard navigation to a grid-like component."]}),`
`,e.jsx(n.h2,{id:"arguments",children:"Arguments"}),`
`,e.jsx(o,{children:e.jsxs(t,{name:"options",type:"Object",children:[e.jsx(t,{name:"ref",type:"React.MutableRefObject<HTMLElement>",description:e.jsxs(e.Fragment,{children:["A React",e.jsx(s,{href:"https://react.dev/reference/react/useRef",children:"ref"}),"object. The reference for the component that listens to keyboard. ",e.jsx(n.br,{}),e.jsx(n.b,{children:"Important:"})," the referred element must have a ",e.jsxs(n.code,{children:["tabIndex=",-1]})," for the focus to work properly."]}),required:!0}),e.jsx(t,{name:"itemsCount",type:"Number",description:"The number of items.",required:!0}),e.jsx(t,{name:"numberOfItemsInLine",type:"Number",description:"The number of items on each line of the grid.",required:!0}),e.jsx(t,{name:"onItemClicked",type:"(item, index) => void",description:"The callback for selecting an item. It will be called when an active item is selected, for example with 'Enter'.",required:!0}),e.jsx(t,{name:"getItemByIndex",type:"(index) => item",description:"A function which gets an index as a param, and returns the item on that index."}),e.jsx(t,{name:"focusOnMount",type:"boolean",description:"If true, the referenced element will be focused when mounted."}),e.jsx(t,{name:"focusItemIndexOnMount",type:"number",description:e.jsxs(e.Fragment,{children:["Optional item index to focus when mounted. Only works with ",e.jsx(n.code,{children:"options.focusOnMount"}),"."]})}),e.jsx(t,{name:"disabledIndexes",type:"number[]",description:"Optional array of disabled indices, which will be skipped while navigating."})]})}),`
`,e.jsx(n.h2,{id:"returns",children:"Returns"}),`
`,e.jsx(o,{children:e.jsxs(t,{name:"result",type:"Object",children:[e.jsx(t,{name:"activeIndex",type:"number",description:"The index of the currently active item."}),e.jsx(t,{name:"onSelectionAction",type:"(itemIndex) => void",description:e.jsxs(e.Fragment,{children:["A wrapper around the passed ",e.jsx(n.code,{children:"onItemClicked"})," function. Use it as the handler for selecting items (e.g. ",e.jsx(n.code,{children:"onClick"}),")"]})}),e.jsx(t,{name:"isInitialActiveState",type:"boolean",description:e.jsxs(e.Fragment,{children:["If true, the currently active element was due to an initial mounting index option. See"," ",e.jsx(n.code,{children:"options.focusItemIndexOnMount"}),"."]})})]})})]})}function H(i={}){const{wrapper:n}={...c(),...i.components};return n?e.jsx(n,{...i,children:e.jsx(d,{...i})}):d(i)}function r(i,n){throw new Error("Expected component `"+i+"` to be defined: you likely forgot to import, pass, or provide it.")}export{K as ELEMENT_WIDTH_PX,P as ON_CLICK,S as PADDING_PX,H as default};
