import{j as n}from"./jsx-runtime-lwGtIXvq.js";import{g as R}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{c as s}from"./index-BpvXyOxN.js";import{R as f,r as i}from"./index-CTZeEbLr.js";import{I as E}from"./IconButton-IfQjL2NK.js";import{N as V}from"./function-utils-C5K4iOy1.js";import{a as q,g as A,b as k,C as j}from"./test-ids-utils-B1IbFLmr.js";import{T as w}from"./Text-CbsTmGAO.js";import{a as M}from"./CloseSmall-DUYWL2FE.js";import{w as P}from"./withStaticProps-DfSG2La2.js";import{T as S}from"./Tooltip-DK9PaNS7.js";import{u as D}from"./useIsOverflowing-CqkoFCDi.js";var v=(e=>(e.PRIMARY="primary",e.POSITIVE="positive",e.NEGATIVE="negative",e.DARK="dark",e.WARNING="warning",e))(v||{});const O="_alertBanner_1ppa4_1",H="_primary_1ppa4_9",W="_positive_1ppa4_13",$="_negative_1ppa4_17",G="_dark_1ppa4_21",X="_warning_1ppa4_25",z="_closeBtn_1ppa4_29",F="_content_1ppa4_33",K="_closeButtonWrapper_1ppa4_43",Y="_ellipsis_1ppa4_56",J="_contentItem_1ppa4_60",Q="_contentItemText_1ppa4_65",a={alertBanner:O,primary:H,positive:W,negative:$,dark:G,warning:X,closeBtn:z,content:F,closeButtonWrapper:K,ellipsis:Y,contentItem:J,contentItemText:Q},U=f.createContext({textColor:"onPrimary"}),_=i.forwardRef(({children:e,className:l,backgroundColor:r="primary",onClose:d=V,ariaLabel:p="",closeButtonAriaLabel:m="Close",isCloseHidden:u=!1,id:x,"data-testid":B},I)=>{const N=i.useMemo(()=>s(l,a.alertBanner,R(a,r)),[l,r]),o=r==="dark",T=r==="warning",g=i.useMemo(()=>T?"fixedDark":o?"onInverted":"onPrimary",[o,T]),C=i.useMemo(()=>f.Children.toArray(e).filter(t=>t.type.isAlertBannerItem||t.type.displayName==="MDXCreateElement"?!0:(console.error("Alert banner child is not supported. Please use AlertBannerText, AlertBannerLink or AlertBannerButton.",t),!1)).map((t,L)=>f.cloneElement(t,{...t==null?void 0:t.props,marginLeft:L>0,isDarkBackground:o})),[e,o]);return n.jsxs(w,{type:"text2",color:g,ref:I,className:N,role:"banner","aria-label":p||"banner",id:x,"data-testid":B||A(k.ALERT_BANNER,x),"data-vibe":q.ALERT_BANNER,children:[n.jsx(U.Provider,{value:{textColor:g},children:n.jsx("div",{className:s(a.content),children:C.map((c,b)=>{const t=c.type.isAlertBannerText;return n.jsx("div",{className:s(a.contentItem,{[a.contentItemText]:t}),children:t?n.jsx("div",{className:s(a.ellipsis),children:c}):c},b)})})}),n.jsx("div",{className:s(a.closeButtonWrapper),children:u?null:n.jsx(E,{"data-testid":"alert-banner-close-button",icon:M,className:s(a.closeBtn),hideTooltip:!0,onClick:d,size:"small",kind:"tertiary",color:o?"on-inverted-background":"on-primary-color",ariaLabel:m})})]})}),ue=P(_,{backgroundColors:v});try{_.displayName="AlertBanner",_.__docgenInfo={description:"",displayName:"AlertBanner",props:{backgroundColor:{defaultValue:{value:"primary"},description:"The background color of the alert banner.",name:"backgroundColor",required:!1,type:{name:"AlertBannerBackgroundColor"}},isCloseHidden:{defaultValue:{value:"false"},description:"If true, the close button is hidden.",name:"isCloseHidden",required:!1,type:{name:"boolean"}},ariaLabel:{defaultValue:{value:""},description:"The ARIA label of the alert banner for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},closeButtonAriaLabel:{defaultValue:{value:"Close"},description:"The ARIA label of the close button for accessibility.",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:"Callback fired when the close button is clicked.",name:"onClose",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},children:{defaultValue:null,description:"The content of the alert banner.",name:"children",required:!1,type:{name:"ChildrenType | ChildrenType[]"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Z="_bannerText_11xrk_1",ee="_marginLeft_11xrk_7",h={bannerText:Z,marginLeft:ee},y=({text:e,marginLeft:l=!1,id:r,"data-testid":d})=>{const p=i.useRef(null),m=s(h.bannerText,{[h.marginLeft]:l}),u=D({ref:p});return n.jsx(S,{position:"bottom",content:u&&e,showTrigger:["mouseenter"],hideTrigger:["mouseleave"],children:n.jsx("div",{ref:p,className:m,id:r,"data-testid":d||A(j.ALERT_BANNER_TEXT,r),children:n.jsx("span",{children:e})})})};Object.assign(y,{isAlertBannerItem:!0,isAlertBannerText:!0});try{y.displayName="AlertBannerText",y.__docgenInfo={description:"",displayName:"AlertBannerText",props:{text:{defaultValue:null,description:"The text content displayed within the alert banner.",name:"text",required:!0,type:{name:"string"}},marginLeft:{defaultValue:{value:"false"},description:"If true, a left margin is applied to the alert banner text.",name:"marginLeft",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{y as A,ue as a,U as b};
