import{j as e}from"./jsx-runtime-lwGtIXvq.js";import{useMDXComponents as x}from"./index-BfNsOeqz.js";import{M as b}from"./index-DlZLbhKV.js";import{I as i}from"./IconButton-IfQjL2NK.js";import{D as j}from"./DialogContentContainer-vYpEsTib.js";import{l as p}from"./tip-CK87uV3P.js";import{m as r}from"./storybook-link-DSe3SpEa.js";import{I as f,O as g,K as y,S as w,A as v,D as I,a as C,b as L}from"./IconButton.stories-Cp1jm0Zw.js";import{i as U,L as k,k as B,q as F,s as M}from"./index-CkcRWdy2.js";import{l as m}from"./Workspace-DtDO7RvQ.js";import"./index-CTZeEbLr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-jjRrs652.js";import"./index-BLd0DK07.js";import"./index-BrqHMYbN.js";import"./index-BedKbVpA.js";import"./index-DrFu-skq.js";import"./index-BpvXyOxN.js";import"./useMergeRef-Do2VYePL.js";import"./useIsomorphicLayoutEffect-BBiFUoiz.js";import"./ssr-utils-Do6V6AqB.js";import"./Tooltip-DK9PaNS7.js";import"./function-utils-C5K4iOy1.js";import"./index-Bt5DuqPA.js";import"./index-CkU0kzyk.js";import"./index-gB5zY9qh.js";import"./typesciptCssModulesHelper-Ji7rRrZn.js";import"./index-BGSF-Nm4.js";import"./useClickableProps-BJf5EuJX.js";import"./test-ids-utils-B1IbFLmr.js";import"./CSSTransition-CWtXmFMf.js";import"./extends-B6xKY8K9.js";import"./camelCase-CO1PkVrH.js";import"./DialogConstants-DkeX1sw_.js";import"./Flex-DYzKCQWz.js";import"./Clickable-B9_U6rsC.js";import"./noop-DX6rZLP_.js";import"./withStaticProps-DfSG2La2.js";import"./Icon-BKjd_X8Z.js";import"./sizes-BOsbvv4u.js";import"./AddSmall-DFewX5rK.js";import"./_tslib-Ct4JumdA.js";import"./Button-H2uVdl--.js";import"./Loader-DOG4Zj1G.js";import"./Flex-qb9MRXYX.js";import"./withStaticProps-DibdfTK_.js";import"./_tslib-BMUU9Vyh.js";import"./link-CVYAeutz.js";import"./index-CMxZnxg2.js";import"./Text-CbsTmGAO.js";import"./TypographyConstants-DFFo5TLu.js";import"./useIsOverflowing-CqkoFCDi.js";import"./debounce-D3NSP8gs.js";import"./Avatar-Tn1wWfSZ.js";import"./colors-vars-map-DOupSotq.js";import"./isNil-CHIgUVhi.js";import"./createComponentTemplate-B08h-OOW.js";import"./Wand-CS0YeGd1.js";import"./Drag-8qsbRXq_.js";import"./CloseSmall-DUYWL2FE.js";import"./Box-Da56VQkg.js";import"./Divider-Dp6_1p7u.js";import"./createStoryMetaSettingsDecorator-DMY_JaA7.js";import"./iconsMetaData-DNlBVpvD.js";import"./index-B-lxVbXh.js";import"./v4-CtRu48qb.js";import"./Invite-BJsiPZ1j.js";import"./Calendar-NzkLrIBg.js";import"./Table-DaDp-EUK.js";import"./Check-CxyRTNy4.js";import"./Settings-WHGZN_3r.js";import"./DropdownChevronDown-Ck7VmPfy.js";import"./DropdownChevronRight-CtJWrCfY.js";import"./NewTab-CMglqP6P.js";import"./Info-jvFNh0HS.js";import"./NavigationChevronRight-DwBPRKWZ.js";import"./Remove-B_sTt2Ao.js";import"./ThumbsUp-WQ1WzAOd.js";import"./Search-ClaS4_rs.js";import"./SortDescending-DfYW2xR2.js";import"./Upgrade-CC_w3yRG.js";const S=()=>e.jsxs(p,{title:"Check yourself",children:["To display icons that do not have actions associated with them, use the"," ",e.jsx(r,{page:"Components/Icon",size:r.sizes.SMALL,children:"Icon component"}),"."]}),A=()=>e.jsxs(p,{children:["If you need to use an icon as a button that opens info dialog with additional information, check out"," ",e.jsx(r,{page:"Components/Info",size:r.sizes.SMALL,children:"Info"})," ","component."]}),D=()=>e.jsxs(p,{children:["If you need to use an icon as a button that opens menu next to it, check out"," ",e.jsx(r,{page:"Components/MenuButton",size:r.sizes.SMALL,children:"Menu button"})," ","component."]});function u(t){const o={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...x(),...t.components},{Canvas:n,ComponentRules:d,PropsTable:l,RelatedComponents:h,StorybookLink:a,UsageGuidelines:c}=o;return n||s("Canvas"),d||s("ComponentRules"),l||s("PropsTable"),h||s("RelatedComponents"),a||s("StorybookLink"),c||s("UsageGuidelines"),e.jsxs(e.Fragment,{children:[e.jsx(b,{of:f}),`
`,e.jsx(o.h1,{id:"iconbutton",children:"IconButton"}),`
`,e.jsx(o.p,{children:"Icon button is a square button contains only icon with no visible text labels used mostly in control bars."}),`
`,e.jsx(n,{of:g}),`
`,e.jsx(o.h3,{id:"import",children:"Import"}),`
`,e.jsx(o.pre,{children:e.jsx(o.code,{className:"language-js",children:`import { IconButton } from "@vibe/core";
`})}),`
`,e.jsx(o.h2,{id:"props",children:"Props"}),`
`,e.jsx(l,{}),`
`,e.jsx(o.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(c,{guidelines:[e.jsxs(e.Fragment,{children:["Icon button will always appear with a ",e.jsx(a,{page:"Components/Tooltip",children:"tooltip"})," while hovering, defining the icon’s meaning."]}),"Use an icon button when a user can perform an inline action on this page and there's no room for a default button.","Use icon button when you want to display an active state of a button.","Use a Primary icon button when it's the most important action to take.","Use icon button only when the icons is clear and understandable.","Icon buttons are often used when there are 2 or 3 adjacent icons buttons that perform actions on a single item presented in a row."]}),`
`,e.jsx(S,{}),`
`,e.jsx(o.h2,{id:"accessibility",children:"Accessibility"}),`
`,e.jsx(c,{guidelines:[e.jsxs(e.Fragment,{children:["Provide an ",e.jsx(o.code,{children:"id"})," for the IconButton to enable proper accessibility associations and unique identification."]}),e.jsxs(e.Fragment,{children:["Always provide an accessible name using either ",e.jsx(o.code,{children:"ariaLabel"})," prop or ",e.jsx(o.code,{children:"tooltipContent"})," prop. The component automatically uses ",e.jsx(o.code,{children:"tooltipContent"})," as the accessible name if no ",e.jsx(o.code,{children:"ariaLabel"})," ","is provided."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"ariaLabel"})," prop when you need a different accessible name than the tooltip text, or when the icon button doesn't have a tooltip."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"ariaLabeledBy"})," prop when an external element provides the accessible name for the icon button. Pass the ",e.jsx(o.code,{children:"id"})," of that external element."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"ariaHasPopup"})," prop when the icon button opens a menu, dialog, or popup."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"ariaExpanded"})," prop to indicate when a popup or menu opened by the icon button is currently open (",e.jsx(o.code,{children:"true"}),") or closed (",e.jsx(o.code,{children:"false"}),")."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"ariaControls"})," prop to link the icon button to the element it controls. Pass the ",e.jsx(o.code,{children:"id"})," of the controlled element."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"aria-describedby"})," prop to link the icon button to additional descriptive text. Pass the"," ",e.jsx(o.code,{children:"id"})," of the descriptive element."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"aria-pressed"})," prop for toggle icon buttons to indicate their current pressed state (",e.jsx(o.code,{children:"true"}),", ",e.jsx(o.code,{children:"false"}),", or ",e.jsx(o.code,{children:"mixed"}),")."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"aria-hidden"})," prop appropriately to hide the icon button from screen readers when necessary, but use sparingly as it removes the button from the accessibility tree entirely."]}),e.jsxs(e.Fragment,{children:["Use ",e.jsx(o.code,{children:"tabIndex"})," prop to control the icon button's position in the keyboard navigation order. The default value allows normal tab navigation."]}),e.jsxs(e.Fragment,{children:["Provide ",e.jsx(o.code,{children:"disabledReason"})," prop when disabling an icon button to give users context about why the button is unavailable. This will be displayed in the tooltip."]})]}),`
`,e.jsx(A,{}),`
`,e.jsx(o.h2,{id:"variants",children:"Variants"}),`
`,e.jsx(o.h3,{id:"kinds",children:"Kinds"}),`
`,e.jsx(o.p,{children:"There can be more than one button in a screen, but to create the hierarchy of actions we need to use button kinds."}),`
`,e.jsx(n,{of:y}),`
`,e.jsx(D,{}),`
`,e.jsx(o.h3,{id:"sizes",children:"Sizes"}),`
`,e.jsx(n,{of:w}),`
`,e.jsx(o.h3,{id:"active",children:"Active"}),`
`,e.jsx(n,{of:v}),`
`,e.jsx(o.h3,{id:"disabled",children:"Disabled"}),`
`,e.jsx(o.p,{children:"Set disable button for something that isn’t usable. Use a tooltip on hover in order to indicate the reason of the disabled action."}),`
`,e.jsx(n,{of:I}),`
`,e.jsx(o.h2,{id:"dos-and-donts",children:"Do’s and Don’ts"}),`
`,e.jsx(d,{rules:[{positive:{component:e.jsxs(j,{children:[e.jsx(i,{icon:k,ariaLabel:"Pin to top"}),e.jsx(i,{icon:B,ariaLabel:"Show all"}),e.jsx(i,{icon:F,ariaLabel:"Show color"}),e.jsx(i,{icon:M,ariaLabel:"Clear style"})]}),description:"Use Icon button when action is lower priority than a regular action or there’s no space available to place a button."},negative:{component:e.jsx(i,{icon:U,kind:"primary",ariaLabel:"Add item"}),description:e.jsxs(e.Fragment,{children:["Don’t use Icon button as the main action on the page. Instead, use the"," ",e.jsx(a,{page:"Components/Button",children:"Button component"})," with an icon."]})}},{positive:{component:e.jsx(i,{icon:m,ariaLabel:"Quick Search"}),description:"Always provide ariaLabel or tooltipContent"},negative:{component:e.jsx(i,{icon:m}),description:"Don’t use icon button without adding a tooltip while hovering."}}]}),`
`,e.jsx(o.h2,{id:"use-cases-and-examples",children:"Use cases and examples"}),`
`,e.jsx(o.h3,{id:"icon-button-as-toolbar-button",children:"Icon button as toolbar button"}),`
`,e.jsx(n,{of:C}),`
`,e.jsx(o.h3,{id:"icon-button-as-close-button",children:"Icon button as close button"}),`
`,e.jsx(n,{of:L}),`
`,e.jsx(o.h2,{id:"related-components",children:"Related components"}),`
`,e.jsx(h,{componentsNames:["Button","MenuButton","Icon"]})]})}function ao(t={}){const{wrapper:o}={...x(),...t.components};return o?e.jsx(o,{...t,children:e.jsx(u,{...t})}):u(t)}function s(t,o){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}export{ao as default};
