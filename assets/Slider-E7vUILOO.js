import{j as p}from"./jsx-runtime-DDzbWKUH.js";import{r,R as _e}from"./index-Hemj67b4.js";import{u as be}from"./useMergeRef-DQ4XPFxl.js";import{N as A}from"./function-utils-6tFwS_v-.js";import{a as Se}from"./useIsOverflowing-CkZDmDV4.js";import{c as N}from"./index-BpvXyOxN.js";import{g as I}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{T as xe}from"./Tooltip-gxrml4Rm.js";import{c as U}from"./camelCase-CO1PkVrH.js";import{I as Ve}from"./Icon-Ue3mdOJR.js";import{T as Te}from"./TextField-BmDbOjV4.js";import{d as Ce}from"./debounce-Bylel5eg.js";import{a as qe,w as Ie}from"./withStaticProps-DfSG2La2.js";import{B as Ee}from"./sizes-BOsbvv4u.js";function X(e,t,n){const i=e-t,a=Math.round((n-t)*100/i);return[a,a]}function re(e,t,n){if(e)return e;if(!(typeof t>"u"))return typeof n!="function"?t.toString():n(t)}function we(e,t){const n=e%t;return n===0?e:e-n}function ke(e,t,n,i){if(!n){const[v,g]=X(e,t,i);return{dimension:v,offset:0,positions:[g],thumbKeys:["start"]}}const[a,l]=i,[c,o]=X(e,t,a),[m,d]=X(e,t,l);return{dimension:m,offset:c,positions:[o,d],thumbKeys:["start","end"]}}function le(e,t,n){const i=(e-t)/10;if(i<n)return n;const a=we(Math.round(i),n);return(e-t)/a>10?2*a:a}function Re(e,t,n,i){return i&&!Array.isArray(e)?[t,n]:e<t?t:e>n?n:e}function Ne(e,t,n){return Array.isArray(t)?t.map((i,a)=>{const l=Array.isArray(e)?e[a]:void 0;return re(l,i,n)}):re(e,t,n)}function Pe(e,t,n){if(!t)return 0;const i=Math.abs(n[0]-e),a=Math.abs(n[1]-e);return i>a?1:0}function oe(e,t,n,i,a){const l=n-t,c=i.width/l,o=Math.round(e/c)+t,m=Math.round(o/a)*a;return m<t?t:m>n?n:m}function Ae(e){return function(n){return`${e}__${n}`}}const Me=200,De=300;var ce=(e=>(e.PREFIX="prefix",e.POSTFIX="postfix",e))(ce||{}),me=(e=>(e.PRIMARY="primary",e.NEGATIVE="negative",e.POSITIVE="positive",e))(me||{});function Oe(e){const[t]=r.useState(typeof e<"u");return t}function Le(e,t,n){const i=t?n:e,[a,l]=r.useState(i);return t?[n,A]:[a,l]}function je(e,t,n,i,a,l,c,o,m,d,v,g,y){const _=r.useCallback(s=>{g(s),typeof c=="function"&&c(s)},[g,c]),b=r.useCallback((s,f)=>f===""||Number.isNaN(Number(f))?s===1?a:l:f>a?a:f<l?l:f,[l,a]),S=r.useCallback(s=>{const[f,u]=[...i()];return s.index===1?[f,b(s.index,s.newValue)]:[b(s.index,s.newValue),u]},[b,i]),V=r.useCallback((s,f=A)=>{const[u,h]=S(s);return u<h?[u,h]:(f(s.index===0?1:0),[h,u])},[S]),E=r.useCallback(s=>{m(s),d(s),v(s)},[m,d,v]),x=r.useCallback((s,f=void 0,u=!1)=>{if(!o){_(b(null,s));return}const w=V({newValue:s,index:f??t},u?A:d);_(w)},[_,V,b,t,o,d]),k=r.useCallback(s=>{if(!o){_(b(null,s));return}const f={newValue:s,index:n()??0},u=V(f,E);_(u)},[_,V,E,b,n,o]),C=r.useCallback(s=>{const f=o?e[t]:e;if(f===l)return;const h=f-(s||y);x(h)},[e,x,t,l,o,y]),q=r.useCallback(s=>{const f=o?e[t]:e;if(f===a)return;const h=f+(s||y);x(h)},[e,x,t,a,o,y]);return r.useMemo(()=>({changeThumbValue:x,decreaseValue:C,drugThumb:k,increaseValue:q,setActive:m,setDragging:v,setFocused:d}),[x,C,k,q,m,v,d])}function $e(){const[e,t]=r.useState(null),n=r.useRef(null),i=r.useCallback(l=>{t(l),n.current=l},[t,n]),a=r.useCallback(()=>n.current,[n]);return[e,i,a]}function Fe(){const e=r.useRef(null),[t,n]=r.useState({left:0,right:100,width:100}),i=r.useCallback(()=>{if(!e.current)return;const a=e.current.getBoundingClientRect(),{left:l,right:c,width:o}=a;n({left:l,right:c,width:o})},[e,n]);return Se({ref:e,callback:i,debounceTime:Me}),r.useEffect(()=>{i()},[i]),{railCoords:t,railRef:e}}function Be(e,t,n,i){const a=Oe(t),[l,c]=Le(e,a,t),o=r.useRef(l);r.useEffect(()=>{a&&o.current!==l&&(o.current=l)},[a,l]);const m=r.useCallback(g=>{c(g),o.current=g},[o,c]),d=()=>o.current,v=Ne(i,l,n);return{actualValue:l,actualValueText:v,getSelectedValue:d,isControlled:a,setSelectedValue:m}}const fe=r.createContext({}),pe=r.createContext({}),ve=r.createContext({}),he=r.createContext({});function J({children:e,ariaLabel:t,ariaLabelledby:n,color:i,"data-testid":a,defaultValue:l,disabled:c,max:o,min:m,onChange:d,ranged:v,showValue:g,valueLabelPosition:y,valueLabelColor:_,size:b,step:S,value:V,valueFormatter:E,valueText:x,infixOptions:k}){const C=Ae(a),{actualValue:q,actualValueText:s,getSelectedValue:f,setSelectedValue:u}=Be(l,V,E,x),[h,T]=r.useState(null),[w,F]=r.useState(null),[M,B,D]=$e(),W=r.useMemo(()=>({active:h,ariaLabel:t,ariaLabelledby:n,color:i,disabled:c,dragging:M,focused:w,size:b,shapeTestId:C,showValue:g,valueLabelPosition:y,valueLabelColor:_}),[h,t,n,i,c,M,w,b,C,g,y,_]),ge=r.useMemo(()=>({max:o,min:m,ranged:v,step:S,value:q,valueText:s}),[o,m,v,S,q,s]),ye=je(q,w,D,f,o,m,d,v,T,F,B,u,S);return p.jsx(fe.Provider,{value:W,children:p.jsx(pe.Provider,{value:ge,children:p.jsx(ve.Provider,{value:ye,children:p.jsx(he.Provider,{value:k,children:e})})})})}function ae(){return r.useContext(fe)}function We(){return r.useContext(he)}function $(){return r.useContext(pe)}function ie(){return r.useContext(ve)}try{J.displayName="SliderProvider",J.__docgenInfo={description:"",displayName:"SliderProvider",props:{children:{defaultValue:null,description:"The child elements inside the slider provider.",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},infixOptions:{defaultValue:null,description:"Configuration options for prefix, postfix, and selection indicator.",name:"infixOptions",required:!1,type:{name:"{ indicateSelection?: boolean; prefix?: string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void); postfix?: string | ... 2 more ... | ((value: number, valueText: string) => void); selectionIndicatorWidth?: string; }"}},ariaLabel:{defaultValue:null,description:"Define a string that labels the current element (Slider)",name:"ariaLabel",required:!1,type:{name:"string"}},ariaLabelledby:{defaultValue:null,description:"ElementId of Node that have the text needed for labeling the current element (Slider)",name:"ariaLabelledby",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Custom `class name` to be added to the component-root-node",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Color Mode (primary/positive/negative) of the component (Slider)",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},"data-testid":{defaultValue:null,description:"Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)",name:"data-testid",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"number | number[]"}},disabled:{defaultValue:null,description:`If set to true, Component (Slider) will be disabled
 - impossible to change value of component (Slider)
 - visual changes (opacity)`,name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Attribute `id` to be added to the component-root-node",name:"id",required:!1,type:{name:"string"}},max:{defaultValue:null,description:"Max range value of the component (Slider)",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"Min range value of the component (Slider)",name:"min",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:`Optional onChange callback (for outer trigger or Controlled mode)
- required in Controlled Mode`,name:"onChange",required:!1,type:{name:"(value: number | number[]) => void"}},ranged:{defaultValue:null,description:"If true switch slider to RRange mode (two Thumbs)",name:"ranged",required:!1,type:{name:"boolean"}},step:{defaultValue:null,description:`The granularity with which the slider can step through values.
(A "discrete" slider.) The min prop serves as the origin for the valid values.
We recommend (max - min) to be evenly divisible by the step.`,name:"step",required:!1,type:{name:"number"}},showValue:{defaultValue:null,description:"Always show `value` instead of Tooltip",name:"showValue",required:!1,type:{name:"boolean"}},valueLabelPosition:{defaultValue:null,description:"Position of the `value` when `showValue` is true",name:"valueLabelPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},valueLabelColor:{defaultValue:null,description:"Color of the `value` when `showValue` is true",name:"valueLabelColor",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},size:{defaultValue:null,description:"Size small/medium/large of the component (Slider)",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},value:{defaultValue:null,description:`Current/selected value of the range of the Component (Slider)
  - should be used in Controlled Mode only
  - in ranged mode should be an array of two numbers`,name:"value",required:!1,type:{name:"number | number[]"}},valueFormatter:{defaultValue:null,description:"Function to format the value, e.g. add %. By default, returns `${value}%`",name:"valueFormatter",required:!1,type:{name:"(value: number) => string"}},valueText:{defaultValue:null,description:`Text/presentation of current/selected value
 - should be used in Controlled Mode only`,name:"valueText",required:!1,type:{name:"string"}},indicateSelection:{defaultValue:null,description:"Show selected from Slider range value",name:"indicateSelection",required:!1,type:{name:"boolean"}},prefix:{defaultValue:null,description:`Options for initial/start/prefix element, it can be one of:
 - Any Component (react component, node, text, number etc.)
 - Or it can be an object of options for Icons component (see Icon components props)
 - Or it can be an object for Label (Icon, Heading - and other components)
 - Or it can be Render Props Function witch are getting value and valueText`,name:"prefix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},postfix:{defaultValue:null,description:"Options for postfix/end/finishing element. Same as prefix element.",name:"postfix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},selectionIndicatorWidth:{defaultValue:null,description:"Width of SelectionIndicator (i.e. TextField)",name:"selectionIndicatorWidth",required:!1,type:{name:"string"}}}}}catch{}const Xe=33,ze=34,He=35,Ue=36,Je=37,Ke=38,Ye=39,Ge=40;function P(e,t,n){return e?e.keyCode===t||e.which===t||n:!1}function Ze(e){return P(e,Ke)}function Qe(e){return P(e,Ge)}function et(e){return P(e,Ye)}function tt(e){return P(e,Je)}function nt(e){return P(e,Xe)}function at(e){return P(e,ze)}function it(e){return P(e,He)}function rt(e){return P(e,Ue)}const lt="_rail_6i2o2_1",ot="_small_6i2o2_10",st="_medium_6i2o2_16",ut="_large_6i2o2_22",se={rail:lt,small:ot,medium:st,large:ut},K=r.forwardRef(({className:e,children:t,onClick:n=A,size:i},a)=>{const{shapeTestId:l}=ae();function c(o){n(o)}return p.jsx("div",{"data-testid":l("rail"),className:N(se.rail,I(se,i),e),onClick:c,ref:a,children:t})});try{K.displayName="SliderRail",K.__docgenInfo={description:"",displayName:"SliderRail",props:{onClick:{defaultValue:null,description:"Callback fired when the rail is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},children:{defaultValue:null,description:"The child elements inside the slider rail.",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},size:{defaultValue:null,description:"The size of the slider rail.",name:"size",required:!0,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const dt="_track_p1i26_1",ct="_positive_p1i26_11",mt="_negative_p1i26_15",ue={track:dt,positive:ct,negative:mt},Y=_e.memo(({className:e,color:t})=>p.jsx("div",{className:N(ue.track,I(ue,t),e)}));try{Y.displayName="SliderTrack",Y.__docgenInfo={description:"",displayName:"SliderTrack",props:{color:{defaultValue:null,description:"The color of the slider track.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const ft="_filledTrack_1cjix_1",pt="_positive_1cjix_11",vt="_negative_1cjix_15",de={filledTrack:ft,positive:pt,negative:vt};function ht(e,t,n){return n?{right:`${t}%`,width:`${e-t}%`}:{left:`${t}%`,width:`${e-t}%`}}const G=({className:e,dimension:t=0,offset:n=0,reverse:i=!1,color:a})=>{const l=ht(t,n,i);return p.jsx("div",{className:N(de.filledTrack,I(de,a),e),style:l})};try{G.displayName="SliderFilledTrack",G.__docgenInfo={description:"",displayName:"SliderFilledTrack",props:{dimension:{defaultValue:{value:"0"},description:"The size of the filled track, based on the selected value.",name:"dimension",required:!1,type:{name:"number"}},offset:{defaultValue:{value:"0"},description:"The offset from the start of the track.",name:"offset",required:!1,type:{name:"number"}},reverse:{defaultValue:{value:"false"},description:"If true, the filled track starts from the end instead of the beginning.",name:"reverse",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The color of the filled track.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const gt="_thumb_1m4vv_1",yt="_dragging_1m4vv_14",_t="_focused_1m4vv_22",bt="_notDisabledThumb_1m4vv_28",St="_positive_1m4vv_43",xt="_negative_1m4vv_51",Vt="_small_1m4vv_59",Tt="_medium_1m4vv_64",Ct="_large_1m4vv_69",qt="_label_1m4vv_74",It="_positionTop_1m4vv_83",Et="_positionBottom_1m4vv_86",wt="_colorPrimary_1m4vv_89",kt="_colorSecondary_1m4vv_92",R={thumb:gt,dragging:yt,focused:_t,notDisabledThumb:bt,"focus-visible":"_focus-visible_1m4vv_28",positive:St,negative:xt,small:Vt,medium:Tt,large:Ct,label:qt,positionTop:It,positionBottom:Et,colorPrimary:wt,colorSecondary:kt},Z=({className:e,index:t=0,onMove:n=A,position:i=0,size:a,color:l})=>{const{max:c,min:o,ranged:m,value:d,valueText:v}=$(),g=m?d[t]:d,y=m?v[t]:v,{active:_,ariaLabel:b,ariaLabelledby:S,disabled:V,dragging:E,focused:x,shapeTestId:k,showValue:C,valueLabelPosition:q,valueLabelColor:s}=ae(),{setActive:f,setFocused:u,setDragging:h}=ie(),T=r.useRef(null);function w(){u(null),f(null)}function F(){u(t),f(t)}function M(){f(null)}function B(W){W.stopPropagation(),h(t),document.addEventListener("pointermove",n),document.addEventListener("pointerup",D)}function D(){h(null),document.removeEventListener("pointermove",n),document.removeEventListener("pointerup",D)}return r.useEffect(()=>{x===t&&T&&T.current&&T.current.focus()},[x,t]),p.jsx(xe,{open:_===t||E===t,content:C?null:y,position:"top",showDelay:De,addKeyboardHideShowTriggersByDefault:!1,children:p.jsx("div",{"aria-label":b,"aria-labelledby":S,"aria-valuemax":c,"aria-valuemin":o,"aria-valuenow":g,"aria-valuetext":y,"aria-disabled":V,className:N(R.thumb,I(R,l),I(R,a),{[R.dragging]:E===t,[R.focused]:x,[R.notDisabledThumb]:!V},e),"data-testid":k(`thumb-${t}`),onFocus:F,onBlur:w,onPointerDown:B,onPointerLeave:M,ref:T,role:"slider",style:{left:`${i}%`},tabIndex:V?-1:0,children:C&&p.jsx("label",{className:N(R.label,I(R,U("color-"+s)),I(R,U("position-"+q))),children:y})})})};try{Z.displayName="SliderThumb",Z.__docgenInfo={description:"",displayName:"SliderThumb",props:{index:{defaultValue:{value:"0"},description:"The index of the thumb (used in range sliders).",name:"index",required:!1,type:{name:"number"}},onMove:{defaultValue:null,description:"Callback fired when the thumb is moved.",name:"onMove",required:!1,type:{name:"(event: PointerEvent) => void"}},position:{defaultValue:{value:"0"},description:"The position of the thumb, represented as an offset percentage from the start of the track.",name:"position",required:!1,type:{name:"number"}},size:{defaultValue:null,description:"The size of the slider thumb.",name:"size",required:!0,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},color:{defaultValue:null,description:"The color theme of the slider thumb.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Rt="_base_94m50_1",Nt="_disabled_94m50_8",Pt="_small_94m50_16",At="_medium_94m50_20",Mt="_large_94m50_24",O={base:Rt,disabled:Nt,small:Pt,medium:At,large:Mt},Q=r.forwardRef(({className:e},t)=>{const{color:n,disabled:i,size:a,shapeTestId:l}=ae(),{min:c,max:o,ranged:m,step:d,value:v}=$(),{changeThumbValue:g,drugThumb:y,decreaseValue:_,increaseValue:b}=ie(),{railCoords:S,railRef:V}=Fe(),{dimension:E,offset:x,positions:k,thumbKeys:C}=ke(o,c,m,v),q=r.useCallback(u=>{const h=Math.round(u.clientX-S.left),T=oe(h,c,o,S,d);y(T)},[y,c,o,S,d]),s=r.useCallback(u=>{const h=u.clientX-S.left,T=oe(h,c,o,S,d),w=Pe(T,m,v);g(T,w)},[g,c,o,S,m,d,v]);function f(u){if(Ze(u)||et(u))return b();if(Qe(u)||tt(u))return _();if(nt(u))return u.preventDefault(),b(le(o,c,d));if(at(u))return u.preventDefault(),_(le(o,c,d));if(rt(u))return u.preventDefault(),g(c);if(it(u))return u.preventDefault(),g(o)}return p.jsx("div",{className:N(O.base,{[I(O,a)]:a,[I(O,n)]:n,[O.disabled]:i},e),"data-testid":l("base"),onKeyDown:f,children:p.jsxs(K,{onClick:s,size:a,ref:V,children:[p.jsx(Y,{color:n}),V.current&&p.jsxs(p.Fragment,{children:[p.jsx(G,{dimension:E,offset:x,color:n}),k.map((u,h)=>p.jsx(Z,{index:h,onMove:q,position:u,color:n,size:a},C[h]))]})]})})});try{Q.displayName="SliderBase",Q.__docgenInfo={description:"",displayName:"SliderBase",props:{className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Dt="_selectionIndicator_1tm2u_1",Ot={selectionIndicator:Dt},Lt=300;function jt(e,t,n,i){return t?e?[n[1],i[1]]:[n[0],i[0]]:[n,i]}function $t(e){return e.replace(/\D/g,"")}const ee=({kind:e="prefix"})=>{const t=e==="postfix",{ranged:n,value:i,valueText:a}=$(),[,l]=jt(t,n,i,a),{changeThumbValue:c}=ie(),o=r.useMemo(()=>Ce(m=>{const d=$t(m);c(d,t?1:0,!0)},Lt),[c,t]);return p.jsx(Te,{onChange:o,value:String(l),className:Ot.selectionIndicator})};try{ee.displayName="SelectionIndicator",ee.__docgenInfo={description:"",displayName:"SelectionIndicator",props:{kind:{defaultValue:{value:"prefix"},description:"Determines whether the selection indicator is a prefix or postfix.",name:"kind",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},key:{defaultValue:null,description:"The key for the selection indicator (used for React key uniqueness).",name:"key",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Ft={clickable:!1,iconSize:18,ignoreFocusStyle:!0};function te(e){const t=e==="postfix",{prefix:n,postfix:i,indicateSelection:a,selectionIndicatorWidth:l}=We(),{ranged:c,value:o,valueText:m}=$(),d=t?i:n;if(a&&(t||c))return[!0,[],p.jsx(ee,{kind:e},e),{width:l}];if(typeof d=="object"&&d.icon){const{icon:v,...g}=d,y={...Ft,...g};return[!0,[],p.jsx(Ve,{icon:v,...y},"infix-icon"),{}]}return typeof d=="function"?[!0,[],d(o,m),{}]:typeof d=="string"?[!0,["txt"],p.jsx(p.Fragment,{children:d}),{}]:typeof d>"u"?[!1,[],null,{}]:[!0,[],p.jsx(p.Fragment,{children:d}),{}]}try{te.displayName="useSliderInfixComponent",te.__docgenInfo={description:"",displayName:"useSliderInfixComponent",props:{}}}catch{}const Bt="_infix_m9h75_1",Wt="_txt_m9h75_7",Xt="_prefix_m9h75_11",zt="_postfix_m9h75_15",z={infix:Bt,txt:Wt,prefix:Xt,postfix:zt},j=({kind:e=j.kinds.PREFIX})=>{const[t,n,i,a]=te(e);return t&&p.jsx("div",{className:N(z.infix,I(z,e),n.map(l=>I(z,l))),style:a,children:i})},L=qe(j,{kinds:ce});try{j.displayName="SliderInfix",j.__docgenInfo={description:"",displayName:"SliderInfix",props:{kind:{defaultValue:{value:"SliderInfix.kinds.PREFIX"},description:"Specifies the type of infix (prefix or postfix).",name:"kind",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Ht="_slider_17qke_1",Ut="_valueShown_17qke_9",Jt="_positionTop_17qke_9",Kt="_positionBottom_17qke_12",H={slider:Ht,valueShown:Ut,positionTop:Jt,positionBottom:Kt},ne=r.forwardRef(({ariaLabel:e,ariaLabelledby:t,className:n,color:i,"data-testid":a="monday-slider",disabled:l=!1,id:c,max:o=100,min:m=0,onChange:d=A,ranged:v=!1,step:g=1,showValue:y=!1,valueLabelPosition:_="top",valueLabelColor:b="primary",size:S="small",value:V,defaultValue:E=0,valueFormatter:x=h=>`${h}%`,valueText:k,indicateSelection:C=!1,prefix:q,postfix:s,selectionIndicatorWidth:f="60px"},u)=>{const h=r.useRef(null),T=be(u,h),w=r.useMemo(()=>({prefix:q,postfix:s,indicateSelection:C,selectionIndicatorWidth:f}),[q,s,C,f]);return p.jsx(J,{ariaLabel:e,ariaLabelledby:t,color:i,"data-testid":a,disabled:l,infixOptions:w,max:o,min:m,onChange:d,ranged:v,showValue:y,valueLabelPosition:_,valueLabelColor:b,size:S,step:g,value:V,defaultValue:Re(E,m,o,v),valueFormatter:x,valueText:k,children:p.jsxs("div",{className:N(H.slider,{[H.valueShown]:y},I(H,U("position-"+_)),n),"data-testid":a,id:c,ref:T,children:[p.jsx(L,{kind:L.kinds.PREFIX}),p.jsx(Q,{}),p.jsx(L,{kind:L.kinds.POSTFIX})]})})}),cn=Ie(ne,{sizes:Ee,colors:me});try{ne.displayName="Slider",ne.__docgenInfo={description:"",displayName:"Slider",props:{ariaLabel:{defaultValue:null,description:"Define a string that labels the current element (Slider)",name:"ariaLabel",required:!1,type:{name:"string"}},ariaLabelledby:{defaultValue:null,description:"ElementId of Node that have the text needed for labeling the current element (Slider)",name:"ariaLabelledby",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Custom `class name` to be added to the component-root-node",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Color Mode (primary/positive/negative) of the component (Slider)",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},"data-testid":{defaultValue:null,description:"Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)",name:"data-testid",required:!1,type:{name:"string"}},defaultValue:{defaultValue:{value:"0"},description:"",name:"defaultValue",required:!1,type:{name:"number | number[]"}},disabled:{defaultValue:{value:"false"},description:`If set to true, Component (Slider) will be disabled
 - impossible to change value of component (Slider)
 - visual changes (opacity)`,name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Attribute `id` to be added to the component-root-node",name:"id",required:!1,type:{name:"string"}},max:{defaultValue:{value:"100"},description:"Max range value of the component (Slider)",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:{value:"0"},description:"Min range value of the component (Slider)",name:"min",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:`Optional onChange callback (for outer trigger or Controlled mode)
- required in Controlled Mode`,name:"onChange",required:!1,type:{name:"(value: number | number[]) => void"}},ranged:{defaultValue:{value:"false"},description:"If true switch slider to RRange mode (two Thumbs)",name:"ranged",required:!1,type:{name:"boolean"}},step:{defaultValue:{value:"1"},description:`The granularity with which the slider can step through values.
(A "discrete" slider.) The min prop serves as the origin for the valid values.
We recommend (max - min) to be evenly divisible by the step.`,name:"step",required:!1,type:{name:"number"}},showValue:{defaultValue:{value:"false"},description:"Always show `value` instead of Tooltip",name:"showValue",required:!1,type:{name:"boolean"}},valueLabelPosition:{defaultValue:{value:"top"},description:"Position of the `value` when `showValue` is true",name:"valueLabelPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},valueLabelColor:{defaultValue:{value:"primary"},description:"Color of the `value` when `showValue` is true",name:"valueLabelColor",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},size:{defaultValue:{value:"small"},description:"Size small/medium/large of the component (Slider)",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},value:{defaultValue:null,description:`Current/selected value of the range of the Component (Slider)
  - should be used in Controlled Mode only
  - in ranged mode should be an array of two numbers`,name:"value",required:!1,type:{name:"number | number[]"}},valueFormatter:{defaultValue:{value:"(value: number) => `${value}%`"},description:"Function to format the value, e.g. add %. By default, returns `${value}%`",name:"valueFormatter",required:!1,type:{name:"(value: number) => string"}},valueText:{defaultValue:null,description:`Text/presentation of current/selected value
 - should be used in Controlled Mode only`,name:"valueText",required:!1,type:{name:"string"}},indicateSelection:{defaultValue:{value:"false"},description:"Show selected from Slider range value",name:"indicateSelection",required:!1,type:{name:"boolean"}},prefix:{defaultValue:null,description:`Options for initial/start/prefix element, it can be one of:
 - Any Component (react component, node, text, number etc.)
 - Or it can be an object of options for Icons component (see Icon components props)
 - Or it can be an object for Label (Icon, Heading - and other components)
 - Or it can be Render Props Function witch are getting value and valueText`,name:"prefix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},postfix:{defaultValue:null,description:"Options for postfix/end/finishing element. Same as prefix element.",name:"postfix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},selectionIndicatorWidth:{defaultValue:{value:"60px"},description:"Width of SelectionIndicator (i.e. TextField)",name:"selectionIndicatorWidth",required:!1,type:{name:"string"}}}}}catch{}export{cn as S};
