import{j as e}from"./jsx-runtime-lwGtIXvq.js";import{useMDXComponents as d}from"./index-BfNsOeqz.js";import{M as a,C as t}from"./index-DlZLbhKV.js";import{l}from"./tip-CK87uV3P.js";import{M as c,O as h,W as u,I as x}from"./MenuGridItem.stories-BnPVdvMc.js";import"./index-CTZeEbLr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-jjRrs652.js";import"./index-BLd0DK07.js";import"./index-BrqHMYbN.js";import"./index-BedKbVpA.js";import"./index-DrFu-skq.js";import"./index-BpvXyOxN.js";import"./Flex-qb9MRXYX.js";import"./withStaticProps-DibdfTK_.js";import"./useGridKeyboardNavigationContext.stories.helpers-XsNLzdBT.js";import"./index-B-lxVbXh.js";import"./v4-CtRu48qb.js";import"./useGridKeyboardNavigation-z8aN9zIc.js";import"./index-CkU0kzyk.js";import"./useFullKeyboardListeners-Bm0-g7hh.js";import"./index-gB5zY9qh.js";import"./ssr-utils-Do6V6AqB.js";import"./noop-DX6rZLP_.js";import"./range-D3V44zw2.js";import"./Button-H2uVdl--.js";import"./camelCase-CO1PkVrH.js";import"./Icon-BKjd_X8Z.js";import"./Loader-DOG4Zj1G.js";import"./Flex-DYzKCQWz.js";import"./useMergeRef-Do2VYePL.js";import"./useIsomorphicLayoutEffect-BBiFUoiz.js";import"./Clickable-B9_U6rsC.js";import"./useClickableProps-BJf5EuJX.js";import"./test-ids-utils-B1IbFLmr.js";import"./function-utils-C5K4iOy1.js";import"./typesciptCssModulesHelper-Ji7rRrZn.js";import"./withStaticProps-DfSG2La2.js";import"./MenuGridItem-CVsw5P7l.js";import"./useMenuItemKeyboardEvents-B-RzuVUT.js";import"./index-Bt5DuqPA.js";import"./index-BxdhJjph.js";import"./sizes-BOsbvv4u.js";import"./Settings-WHGZN_3r.js";import"./_tslib-Ct4JumdA.js";import"./Invite-BJsiPZ1j.js";import"./createStoryMetaSettingsDecorator-DMY_JaA7.js";import"./iconsMetaData-DNlBVpvD.js";import"./index-CkcRWdy2.js";import"./AddSmall-DFewX5rK.js";import"./Workspace-DtDO7RvQ.js";import"./Calendar-NzkLrIBg.js";import"./Table-DaDp-EUK.js";import"./Check-CxyRTNy4.js";import"./CloseSmall-DUYWL2FE.js";import"./Drag-8qsbRXq_.js";import"./DropdownChevronDown-Ck7VmPfy.js";import"./DropdownChevronRight-CtJWrCfY.js";import"./Wand-CS0YeGd1.js";import"./NewTab-CMglqP6P.js";import"./Info-jvFNh0HS.js";import"./NavigationChevronRight-DwBPRKWZ.js";import"./Remove-B_sTt2Ao.js";import"./ThumbsUp-WQ1WzAOd.js";import"./Search-ClaS4_rs.js";import"./SortDescending-DfYW2xR2.js";import"./Upgrade-CC_w3yRG.js";import"./MenuItem-C58QD3w1.js";import"./Tooltip-DK9PaNS7.js";import"./index-BGSF-Nm4.js";import"./CSSTransition-CWtXmFMf.js";import"./extends-B6xKY8K9.js";import"./DialogConstants-DkeX1sw_.js";import"./useIsOverflowing-CqkoFCDi.js";import"./debounce-D3NSP8gs.js";import"./Label-CI90mCdH.js";import"./Text-CbsTmGAO.js";import"./TypographyConstants-DFFo5TLu.js";import"./colors-vars-map-DOupSotq.js";import"./Divider-Dp6_1p7u.js";import"./IconButton-IfQjL2NK.js";import"./DialogContentContainer-vYpEsTib.js";import"./MenuTitle-CjONNQWX.js";const j=()=>e.jsxs(l,{title:"Looking for a single button in a menu?",children:["Check the ",e.jsx("code",{children:"MenuItem"})," or ",e.jsx("code",{children:"MenuItemButton"})," components"]});function p(o){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...d(),...o.components},{PropsTable:n,RelatedComponents:s,UsageGuidelines:m}=i;return n||r("PropsTable"),s||r("RelatedComponents"),m||r("UsageGuidelines"),e.jsxs(e.Fragment,{children:[e.jsx(a,{of:c}),`
`,e.jsx(i.h1,{id:"menugriditem",children:"MenuGridItem"}),`
`,e.jsxs(i.p,{children:[e.jsx("code",{children:"MenuGridItem"}),` can be used to place a grid-like, keyboard navigable container, inside a Menu. The user will be
able to interact and navigate into and from the grid in a natural way.`]}),`
`,e.jsx(t,{of:h}),`
`,e.jsx(i.h2,{id:"props",children:"Props"}),`
`,e.jsxs(i.p,{children:["Since ",e.jsx("code",{children:"MenuGridItem"})," should be used only inside a ",e.jsx("code",{children:"Menu"}),", almost all of the props below will be supplied automatically by the wrapping ",e.jsx("code",{children:"Menu"}),"."]}),`
`,e.jsx(i.h3,{id:"import",children:"Import"}),`
`,e.jsx(i.pre,{children:e.jsx(i.code,{className:"language-js",children:`import { MenuGridItem } from "@vibe/core";
`})}),`
`,e.jsx(n,{}),`
`,e.jsx(i.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(m,{guidelines:["MenuGridItem should always be used inside a Menu component","A MenuGridItem can only have a single child","The child of MenuGridItem should use the useGridKeyboardNavigation hook","The child should use forwardRef, and have the same referenced element for useGridKeyboardNavigation.",e.jsxs(e.Fragment,{children:["Also, the referenced element should have a ",e.jsx(i.code,{children:"tabIndex"})," value (probably -1)."]}),e.jsxs(e.Fragment,{children:["MenuGridItem will pass the ",e.jsx(i.code,{children:"disabled"})," prop to the child. The child should handle this prop and disable interactions."]}),e.jsxs(e.Fragment,{children:['To support a "disabled" mode, the child must have a prop named ',e.jsx(i.code,{children:"disabled"})," (it will be automatically detected)."]}),e.jsxs(e.Fragment,{children:["NOTE: Due to technical limitations, ",e.jsx(i.code,{children:"useDocumentEventListeners"})," is not fully supported."]})]}),`
`,e.jsx(j,{}),`
`,e.jsx(i.h2,{id:"use-cases-and-examples",children:"Use cases and examples"}),`
`,e.jsx(i.h3,{id:"with-disabled-states",children:"With disabled states"}),`
`,e.jsx(i.p,{children:'Disabled items will be "skipped" when using keyboard navigation. Try it for yourself!'}),`
`,e.jsx(t,{of:u}),`
`,e.jsx(i.h3,{id:"inside-sub-menus",children:"Inside sub-menus"}),`
`,e.jsx(i.p,{children:"Keyboard navigation is also supported in sub-menus"}),`
`,e.jsx(t,{of:x}),`
`,e.jsx(i.h2,{id:"related-components",children:"Related components"}),`
`,e.jsx(s,{componentsNames:["Menu","MenuButton"]})]})}function ze(o={}){const{wrapper:i}={...d(),...o.components};return i?e.jsx(i,{...o,children:e.jsx(p,{...o})}):p(o)}function r(o,i){throw new Error("Expected component `"+o+"` to be defined: you likely forgot to import, pass, or provide it.")}export{ze as default};
