import{r as i,R as m}from"./index-Hemj67b4.js";import{u as _e}from"./useMergeRef-DQ4XPFxl.js";import{N as A}from"./function-utils-6EQ2u6TA.js";import{a as be}from"./useIsOverflowing-DshK7x5b.js";import{c as R}from"./index-BpvXyOxN.js";import{g as E}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{T as Se}from"./Tooltip-DUrP1YXb.js";import{c as J}from"./camelCase-B8c2Dc7Y.js";import{I as Ve}from"./Icon-zHybxhV-.js";import{T as xe}from"./TextField-DNTTQ99p.js";import{d as Te}from"./debounce-D-uO1lYf.js";import{a as Ce,w as qe}from"./withStaticProps-DfSG2La2.js";import{B as Ee}from"./sizes-BOsbvv4u.js";function z(e,t,n){const r=e-t,a=Math.round((n-t)*100/r);return[a,a]}function ie(e,t,n){if(e)return e;if(!(typeof t>"u"))return typeof n!="function"?t.toString():n(t)}function Ie(e,t){const n=e%t;return n===0?e:e-n}function ke(e,t,n,r){if(!n){const[v,y]=z(e,t,r);return{dimension:v,offset:0,positions:[y],thumbKeys:["start"]}}const[a,l]=r,[c,o]=z(e,t,a),[f,d]=z(e,t,l);return{dimension:f,offset:c,positions:[o,d],thumbKeys:["start","end"]}}function le(e,t,n){const r=(e-t)/10;if(r<n)return n;const a=Ie(Math.round(r),n);return(e-t)/a>10?2*a:a}function we(e,t,n,r){return r&&!Array.isArray(e)?[t,n]:e<t?t:e>n?n:e}function Ne(e,t,n){return Array.isArray(t)?t.map((r,a)=>{const l=Array.isArray(e)?e[a]:void 0;return ie(l,r,n)}):ie(e,t,n)}function Re(e,t,n){if(!t)return 0;const r=Math.abs(n[0]-e),a=Math.abs(n[1]-e);return r>a?1:0}function oe(e,t,n,r,a){const l=n-t,c=r.width/l,o=Math.round(e/c)+t,f=Math.round(o/a)*a;return f<t?t:f>n?n:f}function Pe(e){return function(n){return`${e}__${n}`}}const Ae=200,Me=300;var ce=(e=>(e.PREFIX="prefix",e.POSTFIX="postfix",e))(ce||{}),me=(e=>(e.PRIMARY="primary",e.NEGATIVE="negative",e.POSITIVE="positive",e))(me||{});function De(e){const[t]=i.useState(typeof e<"u");return t}function Oe(e,t,n){const r=t?n:e,[a,l]=i.useState(r);return t?[n,A]:[a,l]}function Le(e,t,n,r,a,l,c,o,f,d,v,y,g){const _=i.useCallback(s=>{y(s),typeof c=="function"&&c(s)},[y,c]),b=i.useCallback((s,p)=>p===""||Number.isNaN(Number(p))?s===1?a:l:p>a?a:p<l?l:p,[l,a]),S=i.useCallback(s=>{const[p,u]=[...r()];return s.index===1?[p,b(s.index,s.newValue)]:[b(s.index,s.newValue),u]},[b,r]),x=i.useCallback((s,p=A)=>{const[u,h]=S(s);return u<h?[u,h]:(p(s.index===0?1:0),[h,u])},[S]),I=i.useCallback(s=>{f(s),d(s),v(s)},[f,d,v]),V=i.useCallback((s,p=void 0,u=!1)=>{if(!o){_(b(null,s));return}const k=x({newValue:s,index:p??t},u?A:d);_(k)},[_,x,b,t,o,d]),w=i.useCallback(s=>{if(!o){_(b(null,s));return}const p={newValue:s,index:n()??0},u=x(p,I);_(u)},[_,x,I,b,n,o]),C=i.useCallback(s=>{const p=o?e[t]:e;if(p===l)return;const h=p-(s||g);V(h)},[e,V,t,l,o,g]),q=i.useCallback(s=>{const p=o?e[t]:e;if(p===a)return;const h=p+(s||g);V(h)},[e,V,t,a,o,g]);return i.useMemo(()=>({changeThumbValue:V,decreaseValue:C,drugThumb:w,increaseValue:q,setActive:f,setDragging:v,setFocused:d}),[V,C,w,q,f,v,d])}function $e(){const[e,t]=i.useState(null),n=i.useRef(null),r=i.useCallback(l=>{t(l),n.current=l},[t,n]),a=i.useCallback(()=>n.current,[n]);return[e,r,a]}function Fe(){const e=i.useRef(null),[t,n]=i.useState({left:0,right:100,width:100}),r=i.useCallback(()=>{if(!e.current)return;const a=e.current.getBoundingClientRect(),{left:l,right:c,width:o}=a;n({left:l,right:c,width:o})},[e,n]);return be({ref:e,callback:r,debounceTime:Ae}),i.useEffect(()=>{r()},[r]),{railCoords:t,railRef:e}}function Be(e,t,n,r){const a=De(t),[l,c]=Oe(e,a,t),o=i.useRef(l);i.useEffect(()=>{a&&o.current!==l&&(o.current=l)},[a,l]);const f=i.useCallback(y=>{c(y),o.current=y},[o,c]),d=()=>o.current,v=Ne(r,l,n);return{actualValue:l,actualValueText:v,getSelectedValue:d,isControlled:a,setSelectedValue:f}}const fe=i.createContext({}),pe=i.createContext({}),ve=i.createContext({}),he=i.createContext({});function K({children:e,ariaLabel:t,ariaLabelledby:n,color:r,"data-testid":a,defaultValue:l,disabled:c,max:o,min:f,onChange:d,ranged:v,showValue:y,valueLabelPosition:g,valueLabelColor:_,size:b,step:S,value:x,valueFormatter:I,valueText:V,infixOptions:w}){const C=Pe(a),{actualValue:q,actualValueText:s,getSelectedValue:p,setSelectedValue:u}=Be(l,x,I,V),[h,T]=i.useState(null),[k,B]=i.useState(null),[M,W,D]=$e(),X=i.useMemo(()=>({active:h,ariaLabel:t,ariaLabelledby:n,color:r,disabled:c,dragging:M,focused:k,size:b,shapeTestId:C,showValue:y,valueLabelPosition:g,valueLabelColor:_}),[h,t,n,r,c,M,k,b,C,y,g,_]),ye=i.useMemo(()=>({max:o,min:f,ranged:v,step:S,value:q,valueText:s}),[o,f,v,S,q,s]),ge=Le(q,k,D,p,o,f,d,v,T,B,W,u,S);return m.createElement(fe.Provider,{value:X},m.createElement(pe.Provider,{value:ye},m.createElement(ve.Provider,{value:ge},m.createElement(he.Provider,{value:w},e))))}function ae(){return i.useContext(fe)}function We(){return i.useContext(he)}function F(){return i.useContext(pe)}function re(){return i.useContext(ve)}try{K.displayName="SliderProvider",K.__docgenInfo={description:"",displayName:"SliderProvider",props:{children:{defaultValue:null,description:"The child elements inside the slider provider.",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},infixOptions:{defaultValue:null,description:"Configuration options for prefix, postfix, and selection indicator.",name:"infixOptions",required:!1,type:{name:"{ indicateSelection?: boolean; prefix?: string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void); postfix?: string | ... 2 more ... | ((value: number, valueText: string) => void); selectionIndicatorWidth?: string; }"}},ariaLabel:{defaultValue:null,description:"Define a string that labels the current element (Slider)",name:"ariaLabel",required:!1,type:{name:"string"}},ariaLabelledby:{defaultValue:null,description:"ElementId of Node that have the text needed for labeling the current element (Slider)",name:"ariaLabelledby",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Custom `class name` to be added to the component-root-node",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Color Mode (primary/positive/negative) of the component (Slider)",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},"data-testid":{defaultValue:null,description:"Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)",name:"data-testid",required:!1,type:{name:"string"}},defaultValue:{defaultValue:null,description:"",name:"defaultValue",required:!1,type:{name:"number | number[]"}},disabled:{defaultValue:null,description:`If set to true, Component (Slider) will be disabled
 - impossible to change value of component (Slider)
 - visual changes (opacity)`,name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Attribute `id` to be added to the component-root-node",name:"id",required:!1,type:{name:"string"}},max:{defaultValue:null,description:"Max range value of the component (Slider)",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"Min range value of the component (Slider)",name:"min",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:`Optional onChange callback (for outer trigger or Controlled mode)
- required in Controlled Mode`,name:"onChange",required:!1,type:{name:"(value: number | number[]) => void"}},ranged:{defaultValue:null,description:"If true switch slider to RRange mode (two Thumbs)",name:"ranged",required:!1,type:{name:"boolean"}},step:{defaultValue:null,description:`The granularity with which the slider can step through values.
(A "discrete" slider.) The min prop serves as the origin for the valid values.
We recommend (max - min) to be evenly divisible by the step.`,name:"step",required:!1,type:{name:"number"}},showValue:{defaultValue:null,description:"Always show `value` instead of Tooltip",name:"showValue",required:!1,type:{name:"boolean"}},valueLabelPosition:{defaultValue:null,description:"Position of the `value` when `showValue` is true",name:"valueLabelPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},valueLabelColor:{defaultValue:null,description:"Color of the `value` when `showValue` is true",name:"valueLabelColor",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},size:{defaultValue:null,description:"Size small/medium/large of the component (Slider)",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},value:{defaultValue:null,description:`Current/selected value of the range of the Component (Slider)
  - should be used in Controlled Mode only
  - in ranged mode should be an array of two numbers`,name:"value",required:!1,type:{name:"number | number[]"}},valueFormatter:{defaultValue:null,description:"Function to format the value, e.g. add %. By default, returns `${value}%`",name:"valueFormatter",required:!1,type:{name:"(value: number) => string"}},valueText:{defaultValue:null,description:`Text/presentation of current/selected value
 - should be used in Controlled Mode only`,name:"valueText",required:!1,type:{name:"string"}},indicateSelection:{defaultValue:null,description:"Show selected from Slider range value",name:"indicateSelection",required:!1,type:{name:"boolean"}},prefix:{defaultValue:null,description:`Options for initial/start/prefix element, it can be one of:
 - Any Component (react component, node, text, number etc.)
 - Or it can be an object of options for Icons component (see Icon components props)
 - Or it can be an object for Label (Icon, Heading - and other components)
 - Or it can be Render Props Function witch are getting value and valueText`,name:"prefix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},postfix:{defaultValue:null,description:"Options for postfix/end/finishing element. Same as prefix element.",name:"postfix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},selectionIndicatorWidth:{defaultValue:null,description:"Width of SelectionIndicator (i.e. TextField)",name:"selectionIndicatorWidth",required:!1,type:{name:"string"}}}}}catch{}const Xe=33,ze=34,He=35,Ue=36,Je=37,Ke=38,je=39,Ye=40;function P(e,t,n){return e?e.keyCode===t||e.which===t||n:!1}function Ge(e){return P(e,Ke)}function Ze(e){return P(e,Ye)}function Qe(e){return P(e,je)}function et(e){return P(e,Je)}function tt(e){return P(e,Xe)}function nt(e){return P(e,ze)}function at(e){return P(e,He)}function rt(e){return P(e,Ue)}const it="_rail_6i2o2_1",lt="_small_6i2o2_10",ot="_medium_6i2o2_16",st="_large_6i2o2_22",se={rail:it,small:lt,medium:ot,large:st},j=i.forwardRef(({className:e,children:t,onClick:n=A,size:r},a)=>{const{shapeTestId:l}=ae();function c(o){n(o)}return m.createElement("div",{"data-testid":l("rail"),className:R(se.rail,E(se,r),e),onClick:c,ref:a},t)});try{j.displayName="SliderRail",j.__docgenInfo={description:"",displayName:"SliderRail",props:{onClick:{defaultValue:null,description:"Callback fired when the rail is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},children:{defaultValue:null,description:"The child elements inside the slider rail.",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},size:{defaultValue:null,description:"The size of the slider rail.",name:"size",required:!0,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const ut="_track_p1i26_1",dt="_positive_p1i26_11",ct="_negative_p1i26_15",ue={track:ut,positive:dt,negative:ct},Y=m.memo(({className:e,color:t})=>m.createElement("div",{className:R(ue.track,E(ue,t),e)}));try{Y.displayName="SliderTrack",Y.__docgenInfo={description:"",displayName:"SliderTrack",props:{color:{defaultValue:null,description:"The color of the slider track.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const mt="_filledTrack_1cjix_1",ft="_positive_1cjix_11",pt="_negative_1cjix_15",de={filledTrack:mt,positive:ft,negative:pt};function vt(e,t,n){return n?{right:`${t}%`,width:`${e-t}%`}:{left:`${t}%`,width:`${e-t}%`}}const G=({className:e,dimension:t=0,offset:n=0,reverse:r=!1,color:a})=>{const l=vt(t,n,r);return m.createElement("div",{className:R(de.filledTrack,E(de,a),e),style:l})};try{G.displayName="SliderFilledTrack",G.__docgenInfo={description:"",displayName:"SliderFilledTrack",props:{dimension:{defaultValue:{value:"0"},description:"The size of the filled track, based on the selected value.",name:"dimension",required:!1,type:{name:"number"}},offset:{defaultValue:{value:"0"},description:"The offset from the start of the track.",name:"offset",required:!1,type:{name:"number"}},reverse:{defaultValue:{value:"false"},description:"If true, the filled track starts from the end instead of the beginning.",name:"reverse",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The color of the filled track.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const ht="_thumb_1m4vv_1",yt="_dragging_1m4vv_14",gt="_focused_1m4vv_22",_t="_notDisabledThumb_1m4vv_28",bt="_positive_1m4vv_43",St="_negative_1m4vv_51",Vt="_small_1m4vv_59",xt="_medium_1m4vv_64",Tt="_large_1m4vv_69",Ct="_label_1m4vv_74",qt="_positionTop_1m4vv_83",Et="_positionBottom_1m4vv_86",It="_colorPrimary_1m4vv_89",kt="_colorSecondary_1m4vv_92",N={thumb:ht,dragging:yt,focused:gt,notDisabledThumb:_t,"focus-visible":"_focus-visible_1m4vv_28",positive:bt,negative:St,small:Vt,medium:xt,large:Tt,label:Ct,positionTop:qt,positionBottom:Et,colorPrimary:It,colorSecondary:kt},Z=({className:e,index:t=0,onMove:n=A,position:r=0,size:a,color:l})=>{const{max:c,min:o,ranged:f,value:d,valueText:v}=F(),y=f?d[t]:d,g=f?v[t]:v,{active:_,ariaLabel:b,ariaLabelledby:S,disabled:x,dragging:I,focused:V,shapeTestId:w,showValue:C,valueLabelPosition:q,valueLabelColor:s}=ae(),{setActive:p,setFocused:u,setDragging:h}=re(),T=i.useRef(null);function k(){u(null),p(null)}function B(){u(t),p(t)}function M(){p(null)}function W(X){X.stopPropagation(),h(t),document.addEventListener("pointermove",n),document.addEventListener("pointerup",D)}function D(){h(null),document.removeEventListener("pointermove",n),document.removeEventListener("pointerup",D)}return i.useEffect(()=>{V===t&&T&&T.current&&T.current.focus()},[V,t]),m.createElement(Se,{open:_===t||I===t,content:C?null:g,position:"top",showDelay:Me,addKeyboardHideShowTriggersByDefault:!1},m.createElement("div",{"aria-label":b,"aria-labelledby":S,"aria-valuemax":c,"aria-valuemin":o,"aria-valuenow":y,"aria-valuetext":g,"aria-disabled":x,className:R(N.thumb,E(N,l),E(N,a),{[N.dragging]:I===t,[N.focused]:V,[N.notDisabledThumb]:!x},e),"data-testid":w(`thumb-${t}`),onFocus:B,onBlur:k,onPointerDown:W,onPointerLeave:M,ref:T,role:"slider",style:{left:`${r}%`},tabIndex:x?-1:0},C&&m.createElement("label",{className:R(N.label,E(N,J("color-"+s)),E(N,J("position-"+q)))},g)))};try{Z.displayName="SliderThumb",Z.__docgenInfo={description:"",displayName:"SliderThumb",props:{index:{defaultValue:{value:"0"},description:"The index of the thumb (used in range sliders).",name:"index",required:!1,type:{name:"number"}},onMove:{defaultValue:null,description:"Callback fired when the thumb is moved.",name:"onMove",required:!1,type:{name:"(event: PointerEvent) => void"}},position:{defaultValue:{value:"0"},description:"The position of the thumb, represented as an offset percentage from the start of the track.",name:"position",required:!1,type:{name:"number"}},size:{defaultValue:null,description:"The size of the slider thumb.",name:"size",required:!0,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},color:{defaultValue:null,description:"The color theme of the slider thumb.",name:"color",required:!0,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const wt="_base_94m50_1",Nt="_disabled_94m50_8",Rt="_small_94m50_16",Pt="_medium_94m50_20",At="_large_94m50_24",O={base:wt,disabled:Nt,small:Rt,medium:Pt,large:At},Q=i.forwardRef(({className:e},t)=>{const{color:n,disabled:r,size:a,shapeTestId:l}=ae(),{min:c,max:o,ranged:f,step:d,value:v}=F(),{changeThumbValue:y,drugThumb:g,decreaseValue:_,increaseValue:b}=re(),{railCoords:S,railRef:x}=Fe(),{dimension:I,offset:V,positions:w,thumbKeys:C}=ke(o,c,f,v),q=i.useCallback(u=>{const h=Math.round(u.clientX-S.left),T=oe(h,c,o,S,d);g(T)},[g,c,o,S,d]),s=i.useCallback(u=>{const h=u.clientX-S.left,T=oe(h,c,o,S,d),k=Re(T,f,v);y(T,k)},[y,c,o,S,f,d,v]);function p(u){if(Ge(u)||Qe(u))return b();if(Ze(u)||et(u))return _();if(tt(u))return u.preventDefault(),b(le(o,c,d));if(nt(u))return u.preventDefault(),_(le(o,c,d));if(rt(u))return u.preventDefault(),y(c);if(at(u))return u.preventDefault(),y(o)}return m.createElement("div",{className:R(O.base,{[E(O,a)]:a,[E(O,n)]:n,[O.disabled]:r},e),"data-testid":l("base"),onKeyDown:p},m.createElement(j,{onClick:s,size:a,ref:x},m.createElement(Y,{color:n}),x.current&&m.createElement(m.Fragment,null,m.createElement(G,{dimension:I,offset:V,color:n}),w.map((u,h)=>m.createElement(Z,{key:C[h],index:h,onMove:q,position:u,color:n,size:a})))))});try{Q.displayName="SliderBase",Q.__docgenInfo={description:"",displayName:"SliderBase",props:{className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Mt="_selectionIndicator_1tm2u_1",Dt={selectionIndicator:Mt},Ot=300;function Lt(e,t,n,r){return t?e?[n[1],r[1]]:[n[0],r[0]]:[n,r]}function $t(e){return e.replace(/\D/g,"")}const ee=({kind:e="prefix"})=>{const t=e==="postfix",{ranged:n,value:r,valueText:a}=F(),[,l]=Lt(t,n,r,a),{changeThumbValue:c}=re(),o=i.useMemo(()=>Te(f=>{const d=$t(f);c(d,t?1:0,!0)},Ot),[c,t]);return m.createElement(xe,{onChange:o,value:String(l),className:Dt.selectionIndicator})};try{ee.displayName="SelectionIndicator",ee.__docgenInfo={description:"",displayName:"SelectionIndicator",props:{kind:{defaultValue:{value:"prefix"},description:"Determines whether the selection indicator is a prefix or postfix.",name:"kind",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},key:{defaultValue:null,description:"The key for the selection indicator (used for React key uniqueness).",name:"key",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Ft={clickable:!1,iconSize:18,ignoreFocusStyle:!0};function te(e){const t=e==="postfix",{prefix:n,postfix:r,indicateSelection:a,selectionIndicatorWidth:l}=We(),{ranged:c,value:o,valueText:f}=F(),d=t?r:n;if(a&&(t||c))return[!0,[],m.createElement(ee,{key:e,kind:e}),{width:l}];if(typeof d=="object"&&d.icon){const{icon:v,...y}=d,g={...Ft,...y};return[!0,[],m.createElement(Ve,{key:"infix-icon",icon:v,...g}),{}]}return typeof d=="function"?[!0,[],d(o,f),{}]:typeof d=="string"?[!0,["txt"],m.createElement(m.Fragment,null,d),{}]:typeof d>"u"?[!1,[],null,{}]:[!0,[],m.createElement(m.Fragment,null,d),{}]}try{te.displayName="useSliderInfixComponent",te.__docgenInfo={description:"",displayName:"useSliderInfixComponent",props:{}}}catch{}const Bt="_infix_m9h75_1",Wt="_txt_m9h75_7",Xt="_prefix_m9h75_11",zt="_postfix_m9h75_15",H={infix:Bt,txt:Wt,prefix:Xt,postfix:zt},$=({kind:e=$.kinds.PREFIX})=>{const[t,n,r,a]=te(e);return t&&m.createElement("div",{className:R(H.infix,E(H,e),n.map(l=>E(H,l))),style:a},r)},L=Ce($,{kinds:ce});try{$.displayName="SliderInfix",$.__docgenInfo={description:"",displayName:"SliderInfix",props:{kind:{defaultValue:{value:"SliderInfix.kinds.PREFIX"},description:"Specifies the type of infix (prefix or postfix).",name:"kind",required:!1,type:{name:"enum",value:[{value:'"prefix"'},{value:'"postfix"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Ht="_slider_17qke_1",Ut="_valueShown_17qke_9",Jt="_positionTop_17qke_9",Kt="_positionBottom_17qke_12",U={slider:Ht,valueShown:Ut,positionTop:Jt,positionBottom:Kt},ne=i.forwardRef(({ariaLabel:e,ariaLabelledby:t,className:n,color:r,"data-testid":a="monday-slider",disabled:l=!1,id:c,max:o=100,min:f=0,onChange:d=A,ranged:v=!1,step:y=1,showValue:g=!1,valueLabelPosition:_="top",valueLabelColor:b="primary",size:S="small",value:x,defaultValue:I=0,valueFormatter:V=h=>`${h}%`,valueText:w,indicateSelection:C=!1,prefix:q,postfix:s,selectionIndicatorWidth:p="60px"},u)=>{const h=i.useRef(null),T=_e(u,h),k=i.useMemo(()=>({prefix:q,postfix:s,indicateSelection:C,selectionIndicatorWidth:p}),[q,s,C,p]);return m.createElement(K,{ariaLabel:e,ariaLabelledby:t,color:r,"data-testid":a,disabled:l,infixOptions:k,max:o,min:f,onChange:d,ranged:v,showValue:g,valueLabelPosition:_,valueLabelColor:b,size:S,step:y,value:x,defaultValue:we(I,f,o,v),valueFormatter:V,valueText:w},m.createElement("div",{className:R(U.slider,{[U.valueShown]:g},E(U,J("position-"+_)),n),"data-testid":a,id:c,ref:T},m.createElement(L,{kind:L.kinds.PREFIX}),m.createElement(Q,null),m.createElement(L,{kind:L.kinds.POSTFIX})))}),un=qe(ne,{sizes:Ee,colors:me});try{ne.displayName="Slider",ne.__docgenInfo={description:"",displayName:"Slider",props:{ariaLabel:{defaultValue:null,description:"Define a string that labels the current element (Slider)",name:"ariaLabel",required:!1,type:{name:"string"}},ariaLabelledby:{defaultValue:null,description:"ElementId of Node that have the text needed for labeling the current element (Slider)",name:"ariaLabelledby",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"Custom `class name` to be added to the component-root-node",name:"className",required:!1,type:{name:"string"}},color:{defaultValue:null,description:"Color Mode (primary/positive/negative) of the component (Slider)",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'}]}},"data-testid":{defaultValue:null,description:"Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)",name:"data-testid",required:!1,type:{name:"string"}},defaultValue:{defaultValue:{value:"0"},description:"",name:"defaultValue",required:!1,type:{name:"number | number[]"}},disabled:{defaultValue:{value:"false"},description:`If set to true, Component (Slider) will be disabled
 - impossible to change value of component (Slider)
 - visual changes (opacity)`,name:"disabled",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"Attribute `id` to be added to the component-root-node",name:"id",required:!1,type:{name:"string"}},max:{defaultValue:{value:"100"},description:"Max range value of the component (Slider)",name:"max",required:!1,type:{name:"number"}},min:{defaultValue:{value:"0"},description:"Min range value of the component (Slider)",name:"min",required:!1,type:{name:"number"}},onChange:{defaultValue:null,description:`Optional onChange callback (for outer trigger or Controlled mode)
- required in Controlled Mode`,name:"onChange",required:!1,type:{name:"(value: number | number[]) => void"}},ranged:{defaultValue:{value:"false"},description:"If true switch slider to RRange mode (two Thumbs)",name:"ranged",required:!1,type:{name:"boolean"}},step:{defaultValue:{value:"1"},description:`The granularity with which the slider can step through values.
(A "discrete" slider.) The min prop serves as the origin for the valid values.
We recommend (max - min) to be evenly divisible by the step.`,name:"step",required:!1,type:{name:"number"}},showValue:{defaultValue:{value:"false"},description:"Always show `value` instead of Tooltip",name:"showValue",required:!1,type:{name:"boolean"}},valueLabelPosition:{defaultValue:{value:"top"},description:"Position of the `value` when `showValue` is true",name:"valueLabelPosition",required:!1,type:{name:"enum",value:[{value:'"top"'},{value:'"bottom"'}]}},valueLabelColor:{defaultValue:{value:"primary"},description:"Color of the `value` when `showValue` is true",name:"valueLabelColor",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"secondary"'}]}},size:{defaultValue:{value:"small"},description:"Size small/medium/large of the component (Slider)",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},value:{defaultValue:null,description:`Current/selected value of the range of the Component (Slider)
  - should be used in Controlled Mode only
  - in ranged mode should be an array of two numbers`,name:"value",required:!1,type:{name:"number | number[]"}},valueFormatter:{defaultValue:{value:"(value: number) => `${value}%`"},description:"Function to format the value, e.g. add %. By default, returns `${value}%`",name:"valueFormatter",required:!1,type:{name:"(value: number) => string"}},valueText:{defaultValue:null,description:`Text/presentation of current/selected value
 - should be used in Controlled Mode only`,name:"valueText",required:!1,type:{name:"string"}},indicateSelection:{defaultValue:{value:"false"},description:"Show selected from Slider range value",name:"indicateSelection",required:!1,type:{name:"boolean"}},prefix:{defaultValue:null,description:`Options for initial/start/prefix element, it can be one of:
 - Any Component (react component, node, text, number etc.)
 - Or it can be an object of options for Icons component (see Icon components props)
 - Or it can be an object for Label (Icon, Heading - and other components)
 - Or it can be Render Props Function witch are getting value and valueText`,name:"prefix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},postfix:{defaultValue:null,description:"Options for postfix/end/finishing element. Same as prefix element.",name:"postfix",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | { icon: IconType; } | ((value: number, valueText: string) => void)"}},selectionIndicatorWidth:{defaultValue:{value:"60px"},description:"Width of SelectionIndicator (i.e. TextField)",name:"selectionIndicatorWidth",required:!1,type:{name:"string"}}}}}catch{}export{un as S};
