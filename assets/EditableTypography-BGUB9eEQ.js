import{r as o,R as c}from"./index-Hemj67b4.js";import{c as f}from"./index-BpvXyOxN.js";import{u as Q}from"./useMergeRef-DQ4XPFxl.js";import{a as U}from"./useClickableProps-BnhuEIMR.js";import{u as X}from"./index-CXrJR90Q.js";import{u as Y}from"./useIsomorphicLayoutEffect-FdvxY73P.js";import{k}from"./function-utils-6EQ2u6TA.js";const Z="_editableTypography_1ea3h_1",ee="_input_1ea3h_9",te="_textarea_1ea3h_10",ae="_typography_1ea3h_32",ne="_disabled_1ea3h_37",le="_hidden_1ea3h_40",re="_placeholder_1ea3h_47",oe="_multiline_1ea3h_50",u={editableTypography:Z,input:ee,textarea:te,typography:ae,disabled:ne,hidden:le,placeholder:re,multiline:oe},ie=2,D=o.forwardRef(({id:V,className:K,"data-testid":M,value:r,onChange:m,onClick:h,readOnly:w=!1,ariaLabel:y="",placeholder:s,clearable:A,typographyClassName:g,component:B,isEditMode:b,autoSelectTextOnEditMode:x,onEditModeChange:_,tooltipProps:F,type:L,weight:O,multiline:d=!1},H)=>{const W=o.useRef(null),$=Q(H,W),[a,q]=o.useState(b||!1),[n,p]=o.useState(r),T=X(r),t=o.useRef(null),E=o.useRef(null);o.useEffect(()=>{!a&&r!==T&&r!==n&&p(r)},[T,a,r,n]),o.useEffect(()=>{q(b)},[b]);function z(e){h==null||h(e),P(e)}function P(e){w||a||(e.preventDefault(),v(!0))}function v(e){_==null||_(e),q(e)}function I(){if(v(!1),r===n)return;if(!n&&!(A&&s)){p(r);return}p(n),m==null||m(n)}function C(){I()}function N(e){if(e.key===k.ENTER){if(d&&e.shiftKey)return;e.preventDefault(),e.stopPropagation(),I()}e.key===k.ESCAPE&&(e.preventDefault(),e.stopPropagation(),v(!1),p(r))}function R(e){p(e.target.value)}const G=U(P);function j(){var e,i;if((i=(e=t.current)==null?void 0:e.focus)==null||i.call(e),t.current){const l=t.current,S=l.value.length;l.setSelectionRange(S,S)}}function J(){var e,i;(i=(e=t.current)==null?void 0:e.select)==null||i.call(e)}return o.useEffect(()=>{a&&(j(),x&&J())},[x,a]),Y(()=>{var i;if(!E.current)return;const{width:e}=E.current.getBoundingClientRect();if((i=t==null?void 0:t.current)==null||i.style.setProperty("--input-width",`${e}px`),d){const l=t==null?void 0:t.current;l==null||l.style.setProperty("--input-height","auto"),l==null||l.style.setProperty("--input-height",`${l.scrollHeight+ie}px`)}},[n,a]),c.createElement("div",{ref:$,id:V,"aria-label":y,"data-testid":M,className:f(u.editableTypography,K),role:a?null:"button",onClick:z,onKeyDown:G},a&&(d?c.createElement("textarea",{ref:t,className:f(u.textarea,g),value:n,onChange:R,onKeyDown:N,onBlur:C,"aria-label":y,placeholder:s,role:"textbox",rows:1}):c.createElement("input",{ref:t,className:f(u.input,g),value:n,onChange:R,onKeyDown:N,onBlur:C,"aria-label":y,placeholder:s,role:"input"})),c.createElement(B,{ref:E,"aria-hidden":a,className:f(u.typography,g,{[u.hidden]:a,[u.disabled]:w,[u.placeholder]:!n&&s,[u.multiline]:!a&&d}),tabIndex:0,tooltipProps:F,weight:O,type:L,ellipsis:!d},n||s))});try{D.displayName="EditableTypography",D.__docgenInfo={description:"",displayName:"EditableTypography",props:{component:{defaultValue:null,description:"The typography component used in view mode.",name:"component",required:!0,type:{name:"ElementType<any, keyof IntrinsicElements>"}},typographyClassName:{defaultValue:null,description:"Class name applied to the typography component.",name:"typographyClassName",required:!0,type:{name:"string"}},clearable:{defaultValue:null,description:"If true, shows the placeholder when empty.",name:"clearable",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"The text or heading type.",name:"type",required:!1,type:{name:"enum",value:[{value:'"h1"'},{value:'"h2"'},{value:'"h3"'},{value:'"text1"'},{value:'"text2"'},{value:'"text3"'}]}},weight:{defaultValue:null,description:"The text or heading weight.",name:"weight",required:!1,type:{name:"enum",value:[{value:'"medium"'},{value:'"bold"'},{value:'"normal"'},{value:'"light"'}]}},multiline:{defaultValue:{value:"false"},description:"If true, enables multi-line editing.",name:"multiline",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The current value of the text.",name:"value",required:!0,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.",name:"onChange",required:!1,type:{name:"(value: string) => void"}},onClick:{defaultValue:null,description:"Callback fired when the component is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},readOnly:{defaultValue:{value:"false"},description:"If true, the text is read-only and cannot be edited.",name:"readOnly",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"Placeholder text displayed when the value is empty.",name:"placeholder",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:{value:""},description:"The label of the component for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},isEditMode:{defaultValue:null,description:"Controls whether the component is in edit mode.",name:"isEditMode",required:!1,type:{name:"boolean"}},autoSelectTextOnEditMode:{defaultValue:null,description:"If true, automatically selects all text when entering edit mode.",name:"autoSelectTextOnEditMode",required:!1,type:{name:"boolean"}},onEditModeChange:{defaultValue:null,description:"Callback fired when the edit mode changes.",name:"onEditModeChange",required:!1,type:{name:"(isEditMode: boolean) => void"}},tooltipProps:{defaultValue:null,description:"Props to customize the tooltip.",name:"tooltipProps",required:!1,type:{name:"Partial<TooltipProps>"}}}}}catch{}export{D as E};
