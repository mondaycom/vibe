import{j as t}from"./jsx-runtime-lwGtIXvq.js";import{r as q}from"./index-CTZeEbLr.js";import{c}from"./index-BpvXyOxN.js";import{B as S}from"./Button-DUWTIfyf.js";import{L as P}from"./Link-BWdSan7E.js";import{I as O}from"./IconButton-CznU6gch.js";import{a as z}from"./CloseSmall-DUYWL2FE.js";import{I as F}from"./Icon-QRcikoxM.js";import{T as g}from"./Text-DWsuFyEI.js";import{F as m}from"./Flex-D6oMFEZi.js";import{l as R}from"./Settings-WHGZN_3r.js";import{m as D,k as H}from"./Workspace-DtDO7RvQ.js";import{r as $}from"./Check-CxyRTNy4.js";import{t as G}from"./Info-jvFNh0HS.js";import{g as U,b as W}from"./test-ids-utils-CSfXomCJ.js";const f=q.forwardRef(({text:e,...n},a)=>t.jsx(S,{ref:a,size:"small",kind:"secondary",color:"inverted",...n,children:e}));try{f.displayName="AttentionBoxButton",f.__docgenInfo={description:"",displayName:"AttentionBoxButton",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string"}},id:{defaultValue:null,description:"id to pass to the button",name:"id",required:!1,type:{name:"string"}},type:{defaultValue:null,description:"The button's type",name:"type",required:!1,type:{name:"enum",value:[{value:'"button"'},{value:'"submit"'},{value:'"reset"'}]}},className:{defaultValue:null,description:"Custom class names to pass to the component",name:"className",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:null,description:"aria label to provide important when providing only Icon",name:"ariaLabel",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"Whether the button should be disabled or not",name:"disabled",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:null,description:"Specifies the tab order of an element",name:"tabIndex",required:!1,type:{name:"number"}},onClick:{defaultValue:null,description:"Callback function to run when the button is clicked",name:"onClick",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},onMouseDown:{defaultValue:null,description:"",name:"onMouseDown",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},"aria-describedby":{defaultValue:null,description:"",name:"aria-describedby",required:!1,type:{name:"string"}},"aria-hidden":{defaultValue:null,description:"aria to be used for screen reader to know if the button is hidden",name:"aria-hidden",required:!1,type:{name:"Booleanish"}},"aria-pressed":{defaultValue:null,description:'Indicates the current "pressed" state of toggle buttons',name:"aria-pressed",required:!1,type:{name:'boolean | "true" | "false" | "mixed"'}},onFocus:{defaultValue:null,description:"On Button Focus callback",name:"onFocus",required:!1,type:{name:"(event: FocusEvent<HTMLButtonElement, Element>) => void"}},onBlur:{defaultValue:null,description:"On Button Blur callback",name:"onBlur",required:!1,type:{name:"(event: FocusEvent<HTMLButtonElement, Element>) => void"}},name:{defaultValue:null,description:"Name of the button - for form submit usages",name:"name",required:!1,type:{name:"string"}},success:{defaultValue:null,description:"the success props are used when you have async action and wants to display a success message",name:"success",required:!1,type:{name:"boolean"}},leftIcon:{defaultValue:null,description:"Icon to place on the left",name:"leftIcon",required:!1,type:{name:"SubIcon"}},rightIcon:{defaultValue:null,description:"Icon to place on the right",name:"rightIcon",required:!1,type:{name:"SubIcon"}},ariaLabeledBy:{defaultValue:null,description:"element id to describe the button accordingly",name:"ariaLabeledBy",required:!1,type:{name:"string"}},blurOnMouseUp:{defaultValue:null,description:"Blur on button click",name:"blurOnMouseUp",required:!1,type:{name:"boolean"}},successText:{defaultValue:null,description:"Success text",name:"successText",required:!1,type:{name:"string"}},successIcon:{defaultValue:null,description:"Success icon name",name:"successIcon",required:!1,type:{name:"SubIcon"}},loading:{defaultValue:null,description:"loading boolean which switches the text to a loader",name:"loading",required:!1,type:{name:"boolean"}},loaderClassName:{defaultValue:null,description:"className which is applied to loader container *",name:"loaderClassName",required:!1,type:{name:"string"}},active:{defaultValue:null,description:"displays the active state",name:"active",required:!1,type:{name:"boolean"}},activeButtonClassName:{defaultValue:null,description:"",name:"activeButtonClassName",required:!1,type:{name:"string"}},marginRight:{defaultValue:null,description:"adds 8px margin to the right",name:"marginRight",required:!1,type:{name:"boolean"}},marginLeft:{defaultValue:null,description:"adds 8px margin to the left",name:"marginLeft",required:!1,type:{name:"boolean"}},rightFlat:{defaultValue:null,description:"",name:"rightFlat",required:!1,type:{name:"boolean"}},leftFlat:{defaultValue:null,description:"",name:"leftFlat",required:!1,type:{name:"boolean"}},preventClickAnimation:{defaultValue:null,description:"",name:"preventClickAnimation",required:!1,type:{name:"boolean"}},noSidePadding:{defaultValue:null,description:"",name:"noSidePadding",required:!1,type:{name:"boolean"}},defaultTextColorOnPrimaryColor:{defaultValue:null,description:"default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...)",name:"defaultTextColorOnPrimaryColor",required:!1,type:{name:"string"}},ariaHasPopup:{defaultValue:null,description:"aria for a button popup",name:"ariaHasPopup",required:!1,type:{name:'boolean | "dialog" | "grid" | "listbox" | "menu" | "tree" | "true" | "false"'}},ariaExpanded:{defaultValue:null,description:"aria to be set if the popup is open",name:"ariaExpanded",required:!1,type:{name:"boolean"}},ariaControls:{defaultValue:null,description:"aria controls - receives id for the controlled region",name:"ariaControls",required:!1,type:{name:"string"}},insetFocus:{defaultValue:null,description:"Change the focus indicator from around the button to within it",name:"insetFocus",required:!1,type:{name:"boolean"}}}}}catch{}const X="_attentionBoxLink_1i8q4_1",Y={attentionBoxLink:X},y=q.forwardRef(({target:e,className:n,...a},o)=>t.jsx(P,{ref:o,target:e,className:c(Y.attentionBoxLink,n),...a}));try{y.displayName="AttentionBoxLink",y.__docgenInfo={description:"",displayName:"AttentionBoxLink",props:{textClassName:{defaultValue:null,description:"Class name applied to the link text.",name:"textClassName",required:!1,type:{name:"string"}},href:{defaultValue:null,description:"The URL the link points to.",name:"href",required:!1,type:{name:"string"}},text:{defaultValue:null,description:"The text content of the link.",name:"text",required:!1,type:{name:"string"}},rel:{defaultValue:null,description:"Specifies the relationship between the current document and the linked resource.",name:"rel",required:!1,type:{name:"string"}},onClick:{defaultValue:null,description:"Callback fired when the link is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},target:{defaultValue:null,description:"Specifies where to open the linked document.",name:"target",required:!1,type:{name:"enum",value:[{value:'"_blank"'},{value:'"_self"'},{value:'"_parent"'},{value:'"_top"'}]}},ariaLabelDescription:{defaultValue:null,description:"The ARIA label description for accessibility.",name:"ariaLabelDescription",required:!1,type:{name:"string"}},ariaDescribedby:{defaultValue:null,description:"The ID of the element that describes this link.",name:"ariaDescribedby",required:!1,type:{name:"string"}},ariaLabeledBy:{defaultValue:null,description:"The ID of the element labeling this link.",name:"ariaLabeledBy",required:!1,type:{name:"string"}},icon:{defaultValue:null,description:"Icon displayed next to the link text.",name:"icon",required:!1,type:{name:"SubIcon"}},iconPosition:{defaultValue:null,description:"The position of the icon relative to the text.",name:"iconPosition",required:!1,type:{name:"enum",value:[{value:'"start"'},{value:'"end"'}]}},disableNavigation:{defaultValue:null,description:"If true, disables navigation when the link is clicked.",name:"disableNavigation",required:!1,type:{name:"boolean"}},inheritFontSize:{defaultValue:null,description:"If true, the link inherits the surrounding text's font size.",name:"inheritFontSize",required:!1,type:{name:"boolean"}},inlineText:{defaultValue:null,description:"If true, the link is styled to fit within inline text content.",name:"inlineText",required:!1,type:{name:"boolean"}},color:{defaultValue:null,description:"The link's color style",name:"color",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"onPrimary"'},{value:'"onInverted"'}]}},style:{defaultValue:null,description:"Inline style object applied to the link element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const J="_closeButton_1lqn2_1",K={closeButton:J},h=({onClose:e,closeButtonAriaLabel:n="Close",className:a})=>t.jsx(O,{icon:z,size:"xs",kind:"tertiary",onClick:e,ariaLabel:n,hideTooltip:!0,className:c(K.closeButton,a)});try{h.displayName="AttentionBoxCloseButton",h.__docgenInfo={description:"",displayName:"AttentionBoxCloseButton",props:{onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},closeButtonAriaLabel:{defaultValue:{value:"Close"},description:"",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}const Q="_icon_dygdz_1",Z={icon:Q},_=({icon:e,iconType:n="svg",className:a})=>t.jsx(F,{icon:e,iconType:n,iconSize:20,className:c(Z.icon,a)});try{_.displayName="AttentionBoxLeadingIcon",_.__docgenInfo={description:"",displayName:"AttentionBoxLeadingIcon",props:{icon:{defaultValue:null,description:"",name:"icon",required:!1,type:{name:"SubIcon"}},iconType:{defaultValue:{value:"svg"},description:"",name:"iconType",required:!1,type:{name:"enum",value:[{value:'"src"'},{value:'"svg"'},{value:'"font"'}]}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}}}}}catch{}const ee="_container_zfcco_1",te="_icon_zfcco_8",ne="_title_zfcco_13",ae="_text_zfcco_18",ie="_actions_zfcco_19",le="_closeButton_zfcco_27",oe="_hasIcon_zfcco_36",se="_hasCloseButton_zfcco_39",re="_hasTitle_zfcco_55",l={container:ee,icon:te,title:ne,text:ae,actions:ie,closeButton:le,hasIcon:oe,hasCloseButton:se,hasTitle:re},v=({title:e,icon:n,iconType:a,onClose:o,closeButtonAriaLabel:s="Close",action:i,link:r,content:u})=>{const d=i||r;return t.jsxs("div",{className:c(l.container,{[l.hasIcon]:!!n,[l.hasTitle]:!!e,[l.hasActions]:d,[l.hasCloseButton]:!!o}),children:[n&&t.jsx(_,{icon:n,iconType:a,className:l.icon}),e&&t.jsx(g,{type:"text1",weight:"medium",className:l.title,children:e}),!!o&&t.jsx(h,{onClose:o,closeButtonAriaLabel:s,className:l.closeButton}),t.jsx(g,{type:"text2",className:l.text,ellipsis:!1,element:"p",children:u}),d&&t.jsxs(m,{gap:"medium",className:l.actions,children:[r&&t.jsx(y,{...r,inlineText:!1}),i&&t.jsx(f,{...i})]})]})};try{v.displayName="AttentionBoxDefault",v.__docgenInfo={description:"",displayName:"AttentionBoxDefault",props:{content:{defaultValue:null,description:"",name:"content",required:!0,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"The icon to display. Pass `false` to hide the icon entirely, or omit to use the default icon for the type.",name:"icon",required:!1,type:{name:"false | SubIcon"}},link:{defaultValue:null,description:"Link configuration",name:"link",required:!1,type:{name:'Omit<LinkProps, "inlineText">'}},onClose:{defaultValue:null,description:"Callback when the close button is clicked",name:"onClose",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},closeButtonAriaLabel:{defaultValue:{value:"Close"},description:"Custom aria label for the close button",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},iconType:{defaultValue:null,description:"The type of the icon",name:"iconType",required:!1,type:{name:"enum",value:[{value:'"src"'},{value:'"svg"'},{value:'"font"'}]}},action:{defaultValue:null,description:"Action button configuration",name:"action",required:!1,type:{name:"AttentionBoxButtonProps"}},title:{defaultValue:null,description:"The title of the attention box",name:"title",required:!1,type:{name:"string"}}}}}catch{}const ue="_container_1j8h3_1",ce="_mainContentGroup_1j8h3_5",de="_leadingIcon_1j8h3_9",pe="_actionsGroup_1j8h3_13",p={container:ue,mainContentGroup:ce,leadingIcon:de,actionsGroup:pe},x=({icon:e,iconType:n,onClose:a,closeButtonAriaLabel:o="Close",action:s,link:i,content:r})=>{const u=!!(s||i);return t.jsxs(m,{align:"center",className:p.container,children:[t.jsxs(m,{gap:"xs",flex:"1",className:p.mainContentGroup,children:[e&&t.jsx(_,{icon:e,iconType:n,className:p.leadingIcon}),t.jsx(g,{type:"text2",element:"p",ellipsis:!0,children:r})]}),(u||!!a)&&t.jsxs(m,{className:p.actionsGroup,children:[i&&t.jsx(y,{...i,inlineText:!1}),s&&t.jsx(f,{...s}),!!a&&t.jsx(h,{onClose:a,closeButtonAriaLabel:o})]})]})};try{x.displayName="AttentionBoxCompact",x.__docgenInfo={description:"",displayName:"AttentionBoxCompact",props:{content:{defaultValue:null,description:"",name:"content",required:!0,type:{name:"ReactNode"}},icon:{defaultValue:null,description:"The icon to display. Pass `false` to hide the icon entirely, or omit to use the default icon for the type.",name:"icon",required:!1,type:{name:"false | SubIcon"}},link:{defaultValue:null,description:"Link configuration",name:"link",required:!1,type:{name:'Omit<LinkProps, "inlineText">'}},onClose:{defaultValue:null,description:"Callback when the close button is clicked",name:"onClose",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},closeButtonAriaLabel:{defaultValue:{value:"Close"},description:"Custom aria label for the close button",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},iconType:{defaultValue:null,description:"The type of the icon",name:"iconType",required:!1,type:{name:"enum",value:[{value:'"src"'},{value:'"svg"'},{value:'"font"'}]}},action:{defaultValue:null,description:"Action button configuration",name:"action",required:!1,type:{name:"AttentionBoxButtonProps"}}}}}catch{}const me={primary:G,positive:$,negative:H,warning:D,neutral:R},fe=(e,n)=>e===!1?null:e||me[n||"primary"],ye="_attention_e6bho_14",he="_animate_e6bho_21",_e="_attentionBoxAnimation_e6bho_1",be="_primary_e6bho_24",ge="_positive_e6bho_27",ve="_negative_e6bho_30",xe="_warning_e6bho_33",qe="_neutral_e6bho_36",b={attention:ye,animate:he,attentionBoxAnimation:_e,primary:be,positive:ge,negative:ve,warning:xe,neutral:qe},C=q.forwardRef(({compact:e=!1,title:n,animate:a=!0,icon:o,iconType:s="svg",type:i="primary",children:r,text:u,action:d,link:T,id:V,onClose:I,closeButtonAriaLabel:A,className:k,"data-testid":N},L)=>{const E=i==="negative"?"alert":"status",j=fe(o,i),w=r||u,M=c(b.attention,b[i],{[b.animate]:a},k),B={onClose:I,closeButtonAriaLabel:A,action:d,link:T,icon:j,iconType:s,content:w};return t.jsx("div",{ref:L,className:M,role:E,id:V,"data-testid":N||U(W.ATTENTION_BOX,V),children:e?t.jsx(x,{...B}):t.jsx(v,{title:n,...B})})});try{C.displayName="AttentionBox",C.__docgenInfo={description:"",displayName:"AttentionBox",props:{className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}},text:{defaultValue:null,description:"The main text content",name:"text",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"Custom children to override the default text content",name:"children",required:!1,type:{name:"ReactNode"}},compact:{defaultValue:{value:"false"},description:"When true, the attention box will be displayed in compact mode of one-liner",name:"compact",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"The title of the attention box",name:"title",required:!1,type:{name:"string"}},type:{defaultValue:{value:"primary"},description:"The variant type of the attention box",name:"type",required:!1,type:{name:"enum",value:[{value:'"positive"'},{value:'"negative"'},{value:'"primary"'},{value:'"warning"'},{value:'"neutral"'}]}},iconType:{defaultValue:{value:"svg"},description:"The type of the icon",name:"iconType",required:!1,type:{name:"enum",value:[{value:'"src"'},{value:'"svg"'},{value:'"font"'}]}},icon:{defaultValue:null,description:"The icon to display. Pass `false` to hide the icon entirely, or omit to use the default icon for the type.",name:"icon",required:!1,type:{name:"false | SubIcon"}},onClose:{defaultValue:null,description:"Callback when the close button is clicked",name:"onClose",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},closeButtonAriaLabel:{defaultValue:null,description:"Custom aria label for the close button",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},animate:{defaultValue:{value:"true"},description:"Whether to animate the entrance",name:"animate",required:!1,type:{name:"boolean"}},action:{defaultValue:null,description:"Action button configuration",name:"action",required:!1,type:{name:"AttentionBoxButtonProps"}},link:{defaultValue:null,description:"Link configuration",name:"link",required:!1,type:{name:'Omit<LinkProps, "inlineText">'}}}}}catch{}export{C as A};
