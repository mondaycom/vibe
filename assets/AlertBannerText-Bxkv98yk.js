import{g as C}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{c as s}from"./index-BpvXyOxN.js";import{R as t,r as o}from"./index-Hemj67b4.js";import{I as L}from"./IconButton-BIAWrK7n.js";import{N as q}from"./function-utils-6EQ2u6TA.js";import{g as A,b as V,C as k}from"./test-ids-utils-9ISiqDto.js";import{T as R}from"./Text-C0CU0_Vh.js";import{a as w}from"./CloseSmall-CIab6kaf.js";import{w as M}from"./withStaticProps-DfSG2La2.js";import{T as P}from"./Tooltip-DUrP1YXb.js";import{u as S}from"./useIsOverflowing-DshK7x5b.js";var x=(e=>(e.PRIMARY="primary",e.POSITIVE="positive",e.NEGATIVE="negative",e.DARK="dark",e.WARNING="warning",e))(x||{});const D="_alertBanner_1ppa4_1",O="_primary_1ppa4_9",H="_positive_1ppa4_13",W="_negative_1ppa4_17",$="_dark_1ppa4_21",G="_warning_1ppa4_25",X="_closeBtn_1ppa4_29",j="_content_1ppa4_33",z="_closeButtonWrapper_1ppa4_43",F="_ellipsis_1ppa4_56",K="_contentItem_1ppa4_60",Y="_contentItemText_1ppa4_65",a={alertBanner:D,primary:O,positive:H,negative:W,dark:$,warning:G,closeBtn:X,content:j,closeButtonWrapper:z,ellipsis:F,contentItem:K,contentItemText:Y},J=t.createContext({textColor:"onPrimary"}),f=o.forwardRef(({children:e,className:i,backgroundColor:r="primary",onClose:m=q,ariaLabel:p="",closeButtonAriaLabel:d="Close",isCloseHidden:u=!1,id:y,"data-testid":h},I)=>{const B=o.useMemo(()=>s(i,a.alertBanner,C(a,r)),[i,r]),l=r==="dark",g=r==="warning",T=o.useMemo(()=>g?"fixedDark":l?"onInverted":"onPrimary",[l,g]),N=o.useMemo(()=>t.Children.toArray(e).filter(n=>n.type.isAlertBannerItem||n.type.displayName==="MDXCreateElement"?!0:(console.error("Alert banner child is not supported. Please use AlertBannerText, AlertBannerLink or AlertBannerButton.",n),!1)).map((n,E)=>t.cloneElement(n,{...n==null?void 0:n.props,marginLeft:E>0,isDarkBackground:l})),[e,l]);return t.createElement(R,{type:"text2",color:T,ref:I,className:B,role:"banner","aria-label":p||"banner",id:y,"data-testid":h||A(V.ALERT_BANNER,y)},t.createElement(J.Provider,{value:{textColor:T}},t.createElement("div",{className:s(a.content)},N.map((c,b)=>{const n=c.type.isAlertBannerText;return t.createElement("div",{key:b,className:s(a.contentItem,{[a.contentItemText]:n})},n?t.createElement("div",{className:s(a.ellipsis)},c):c)}))),t.createElement("div",{className:s(a.closeButtonWrapper)},u?null:t.createElement(L,{"data-testid":"alert-banner-close-button",icon:w,className:s(a.closeBtn),hideTooltip:!0,onClick:m,size:"small",kind:"tertiary",color:l?"on-inverted-background":"on-primary-color",ariaLabel:d})))}),ce=M(f,{backgroundColors:x});try{f.displayName="AlertBanner",f.__docgenInfo={description:"",displayName:"AlertBanner",props:{backgroundColor:{defaultValue:{value:"primary"},description:"The background color of the alert banner.",name:"backgroundColor",required:!1,type:{name:"enum",value:[{value:'"primary"'},{value:'"positive"'},{value:'"negative"'},{value:'"dark"'},{value:'"warning"'}]}},isCloseHidden:{defaultValue:{value:"false"},description:"If true, the close button is hidden.",name:"isCloseHidden",required:!1,type:{name:"boolean"}},ariaLabel:{defaultValue:{value:""},description:"The ARIA label of the alert banner for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},closeButtonAriaLabel:{defaultValue:{value:"Close"},description:"The ARIA label of the close button for accessibility.",name:"closeButtonAriaLabel",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:"Callback fired when the close button is clicked.",name:"onClose",required:!1,type:{name:"(event: MouseEvent<HTMLButtonElement, MouseEvent>) => void"}},children:{defaultValue:null,description:"The content of the alert banner.",name:"children",required:!1,type:{name:"ChildrenType | ChildrenType[]"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const Q="_bannerText_11xrk_1",U="_marginLeft_11xrk_7",v={bannerText:Q,marginLeft:U},_=({text:e,marginLeft:i=!1,id:r,"data-testid":m})=>{const p=o.useRef(null),d=s(v.bannerText,{[v.marginLeft]:i}),u=S({ref:p});return t.createElement(P,{position:"bottom",content:u&&e,showTrigger:["mouseenter"],hideTrigger:["mouseleave"]},t.createElement("div",{ref:p,className:d,id:r,"data-testid":m||A(k.ALERT_BANNER_TEXT,r)},t.createElement("span",null,e)))};Object.assign(_,{isAlertBannerItem:!0,isAlertBannerText:!0});try{_.displayName="AlertBannerText",_.__docgenInfo={description:"",displayName:"AlertBannerText",props:{text:{defaultValue:null,description:"The text content displayed within the alert banner.",name:"text",required:!0,type:{name:"string"}},marginLeft:{defaultValue:{value:"false"},description:"If true, a left margin is applied to the alert banner text.",name:"marginLeft",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{_ as A,ce as a,J as b};
