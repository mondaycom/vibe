import{j as e}from"./jsx-runtime-lwGtIXvq.js";import{useMDXComponents as p}from"./index-BfNsOeqz.js";import{M as m}from"./index-BOoC399u.js";import{N as c,O as h,S as u,a as x,V as v,b as j}from"./NumberField.stories-Dxz27OmU.js";import{N as o}from"./NumberField-KpEh8EUY.js";import{r as l}from"./usage-guidelines-DaF3e-2f.js";import{a as f}from"./component-rules-Bcb_N_7h.js";import"./index-CTZeEbLr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-y_JMgX8b.js";import"./index-D3DODFGp.js";import"./index-BrqHMYbN.js";import"./index-BedKbVpA.js";import"./index-DrFu-skq.js";import"./Flex-D6jv3OvD.js";import"./index-BpvXyOxN.js";import"./useMergeRef-C008K4k9.js";import"./useIsomorphicLayoutEffect-CtfxbExD.js";import"./ssr-utils-Do6V6AqB.js";import"./Clickable-HM5W4vbd.js";import"./useClickableProps-JhSuVvy2.js";import"./function-utils-CSFuT5hl.js";import"./test-ids-utils-CSfXomCJ.js";import"./noop-DX6rZLP_.js";import"./typesciptCssModulesHelper-oFWQo8l_.js";import"./camelCase-CO1PkVrH.js";import"./withStaticProps-DfSG2La2.js";import"./Workspace-DtDO7RvQ.js";import"./_tslib-Ct4JumdA.js";import"./createStoryMetaSettingsDecorator-M9remOuO.js";import"./index-CkcRWdy2.js";import"./Invite-BJsiPZ1j.js";import"./AddSmall-DFewX5rK.js";import"./Calendar-NzkLrIBg.js";import"./Table-DaDp-EUK.js";import"./Check-CxyRTNy4.js";import"./CloseSmall-DUYWL2FE.js";import"./Settings-WHGZN_3r.js";import"./Drag-8qsbRXq_.js";import"./DropdownChevronDown-Ck7VmPfy.js";import"./DropdownChevronRight-CtJWrCfY.js";import"./Wand-CS0YeGd1.js";import"./NewTab-CMglqP6P.js";import"./Info-jvFNh0HS.js";import"./NavigationChevronRight-DwBPRKWZ.js";import"./Remove-B_sTt2Ao.js";import"./ThumbsUp-WQ1WzAOd.js";import"./Search-ClaS4_rs.js";import"./SortDescending-DfYW2xR2.js";import"./Upgrade-CC_w3yRG.js";import"./index-B-lxVbXh.js";import"./v4-CtRu48qb.js";import"./BaseInput-VvFX1jih.js";import"./FieldLabel-DyAxo16h.js";import"./Icon-B1P6-uxB.js";import"./index-DEnqPy1V.js";import"./index-nBaTNWgC.js";import"./Text-CYK--k2a.js";import"./TypographyConstants-CTtoteLy.js";import"./useIsOverflowing-CDKfAaU8.js";import"./debounce-D3NSP8gs.js";import"./Tooltip-BrDhcDk7.js";import"./index-D4TxD6E0.js";import"./index-Cgi7_mab.js";import"./CSSTransition-CWtXmFMf.js";import"./extends-B6xKY8K9.js";import"./DialogConstants-DkeX1sw_.js";import"./IconButton-BtXl5no_.js";import"./sizes-BOsbvv4u.js";import"./Button-lmknnYep.js";import"./Loader-BPB1GClv.js";import"./_tslib-BMUU9Vyh.js";function d(t){const i={code:"code",div:"div",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...p(),...t.components},{Canvas:r,PropsTable:s,RelatedComponents:a}=i;return r||n("Canvas"),s||n("PropsTable"),a||n("RelatedComponents"),e.jsxs(e.Fragment,{children:[e.jsx(m,{of:c}),`
`,e.jsx(i.h1,{id:"numberfield",children:"NumberField"}),`
`,e.jsx(i.h2,{id:"overview",children:"Overview"}),`
`,e.jsxs(i.p,{children:["The ",e.jsx(i.code,{children:"NumberField"})," component provides an accessible, strictly numeric input with built-in vertical stepper controls for incrementing or decrementing values. It supports controlled usage, custom sizing, min/max clamping, and visual feedback states (error, success, disabled, read-only)."]}),`
`,e.jsx(r,{of:h}),`
`,e.jsx(i.h2,{id:"import-path",children:"Import path"}),`
`,e.jsx(i.pre,{children:e.jsx(i.code,{className:"language-tsx",children:`import { NumberField } from "@vibe/core";
`})}),`
`,e.jsx(i.h2,{id:"props",children:"Props"}),`
`,e.jsx(s,{}),`
`,e.jsx(i.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(l,{guidelines:["Always pass both `value` and `onChange` props to use the component in controlled mode.","Use `min`, `max`, and `step` to enforce value boundaries and configure stepping behavior.","Use `allowOutOfBounds` when you want to allow users to enter invalid values and handle validation externally.","Leverage validation states (`error`, `success`) with `infoText` to provide clear feedback to users.","Apply `disabled` or `readOnly` states to prevent user interaction when necessary.","Use `step` to control increment/decrement granularity - defaults to 1 for whole numbers."]}),`
`,e.jsx(i.h2,{id:"accessibility",children:"Accessibility"}),`
`,e.jsx(l,{guidelines:[e.jsxs(e.Fragment,{children:["Using an ",e.jsx(i.code,{children:"id"})," is highly recommended for all instances to ensure the best accessibility."]}),e.jsxs(e.Fragment,{children:["Always provide a visible ",e.jsx(i.code,{children:"label"})," or an ",e.jsx(i.code,{children:"aria-label"})," to ensure the input's purpose is clear to all users."]}),e.jsxs(e.Fragment,{children:["When using ",e.jsx(i.code,{children:"label"})," or ",e.jsx(i.code,{children:"infoText"}),", you must also provide an ",e.jsx(i.code,{children:"id"}),". This is crucial, as it allows screen readers to correctly associate the input with its label and description."]}),e.jsxs(e.Fragment,{children:["Providing an ",e.jsx(i.code,{children:"id"})," also automatically links the Increment and Decrement buttons to the input via the"," ",e.jsx(i.code,{children:"aria-controls"})," attribute, further improving the experience for users of assistive technologies."]})]}),`
`,e.jsx(i.h2,{id:"variants",children:"Variants"}),`
`,e.jsx(i.h3,{id:"size-variants",children:"Size Variants"}),`
`,e.jsx(i.p,{children:"There are three sizes available: Small (32px), Medium (40px), and Large (48px)."}),`
`,e.jsx(r,{of:u}),`
`,e.jsx(i.h3,{id:"states",children:"States"}),`
`,e.jsx(i.p,{children:"Different states including success, error, disabled, and read-only with reactive validation feedback."}),`
`,e.jsx(r,{of:x}),`
`,e.jsx(i.h3,{id:"additional-variants",children:"Additional Variants"}),`
`,e.jsx(i.p,{children:"Examples with icons and informational text."}),`
`,e.jsx(r,{of:v}),`
`,e.jsx(i.h2,{id:"validation",children:"Validation"}),`
`,e.jsxs(i.p,{children:["The NumberField supports comprehensive validation with dynamic feedback. Use ",e.jsx(i.code,{children:"allowOutOfBounds"})," to permit invalid entries while providing real-time validation feedback."]}),`
`,e.jsx(r,{of:j}),`
`,e.jsx(i.h2,{id:"dos-and-donts",children:"Do's and Don'ts"}),`
`,e.jsx(f,{rules:[{positive:{component:e.jsx(i.div,{style:{width:"80%"},children:e.jsx(o,{value:25,onChange:()=>{},label:"Age",min:0,max:120,infoText:"Enter your age"})}),description:"Provide specific, descriptive labels and helpful context with explanatory helper text to clarify the expected input."},negative:{component:e.jsx(i.div,{style:{width:"80%"},children:e.jsx(o,{value:25,label:"Number",onChange:()=>{},infoText:"Enter a value"})}),description:"Avoid generic labels like 'Number' or 'Value'. The label should be specific about what the user needs to enter."}},{positive:{component:e.jsx(i.div,{style:{width:"80%"},children:e.jsx(o,{value:-5,onChange:()=>{},label:"Temperature (°C)",error:!0,infoText:"Temperature cannot be negative",min:0,allowOutOfBounds:!0})}),description:"When input is invalid, provide immediate visual feedback but allow the user to see and correct their entry."},negative:{component:e.jsx(i.div,{style:{width:"80%"},children:e.jsx(o,{value:-5,onChange:()=>{},label:"Temperature (°C)",error:!0,min:0,allowOutOfBounds:!0})}),description:"Don't show an error state without a clear explanation. Always provide a helpful message that guides the user to a valid input."}}]}),`
`,e.jsx(i.h2,{id:"related-components",children:"Related components"}),`
`,e.jsx(a,{componentsNames:["TextField","Dropdown","Search"]})]})}function Pe(t={}){const{wrapper:i}={...p(),...t.components};return i?e.jsx(i,{...t,children:e.jsx(d,{...t})}):d(t)}function n(t,i){throw new Error("Expected component `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}export{Pe as default};
