import{j as s}from"./jsx-runtime-DDzbWKUH.js";import{g as u,C as m}from"./test-ids-utils-CSfXomCJ.js";import{r as p}from"./index-Hemj67b4.js";import{g as c}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{E as x}from"./EditableTypography-DyxrhhQP.js";import{a as f,b as y,T as h}from"./Text-BCpBQ15h.js";import{c as _}from"./index-BpvXyOxN.js";import{c as b}from"./camelCase-B8c2Dc7Y.js";import{w as g}from"./withStaticProps-DfSG2La2.js";const T="_text1Bold_1bntx_1",v="_text1Medium_1bntx_5",E="_text1Normal_1bntx_9",M="_text2Bold_1bntx_13",q="_text2Medium_1bntx_17",V="_text2Normal_1bntx_21",C="_text3Bold_1bntx_25",N="_text3Medium_1bntx_29",w="_text3Normal_1bntx_33",B="_editableText_1bntx_37",I="_typography_1bntx_37",t={text1Bold:T,text1Medium:v,text1Normal:E,text2Bold:M,text2Medium:q,text2Normal:V,text3Bold:C,text3Medium:N,text3Normal:w,editableText:B,typography:I},a=p.forwardRef(({type:e="text2",weight:l="normal","data-testid":n,id:o,multiline:i,...r},d)=>s.jsx(x,{className:t.editableText,ref:d,"data-testid":n||u(m.EDITABLE_TEXT,o),component:h,typographyClassName:_(c(t,b(e+"-"+l)),t.typography),clearable:!0,type:e,weight:l,multiline:i,...r})),z=g(a,{types:y,weights:f});try{a.displayName="EditableText",a.__docgenInfo={description:"",displayName:"EditableText",props:{type:{defaultValue:{value:"text2"},description:"The text style variant.",name:"type",required:!1,type:{name:"enum",value:[{value:'"text1"'},{value:'"text2"'},{value:'"text3"'}]}},weight:{defaultValue:{value:"normal"},description:"The font weight of the text.",name:"weight",required:!1,type:{name:"enum",value:[{value:'"bold"'},{value:'"medium"'},{value:'"normal"'}]}},multiline:{defaultValue:null,description:"If true, enables editing multiple lines of text.",name:"multiline",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The current value of the text.",name:"value",required:!0,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the value changes.",name:"onChange",required:!1,type:{name:"(value: string) => void"}},onClick:{defaultValue:null,description:"Callback fired when the component is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},readOnly:{defaultValue:null,description:"If true, the text is read-only and cannot be edited.",name:"readOnly",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"Placeholder text displayed when the value is empty.",name:"placeholder",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:null,description:"The label of the component for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},isEditMode:{defaultValue:null,description:"Controls whether the component is in edit mode.",name:"isEditMode",required:!1,type:{name:"boolean"}},autoSelectTextOnEditMode:{defaultValue:null,description:"If true, automatically selects all text when entering edit mode.",name:"autoSelectTextOnEditMode",required:!1,type:{name:"boolean"}},onEditModeChange:{defaultValue:null,description:"Callback fired when the edit mode changes.",name:"onEditModeChange",required:!1,type:{name:"(isEditMode: boolean) => void"}},tooltipProps:{defaultValue:null,description:"Props to customize the tooltip.",name:"tooltipProps",required:!1,type:{name:"Partial<TooltipProps>"}}}}}catch{}export{z as E};
