import{j as C}from"./jsx-runtime-lwGtIXvq.js";import{r as n,R as o}from"./index-CTZeEbLr.js";import{c as R}from"./index-BpvXyOxN.js";import{u as S}from"./useMergeRef-Do2VYePL.js";import{g as E,C as q}from"./test-ids-utils-CSfXomCJ.js";import{u as j}from"./index-BxdhJjph.js";import{g as N}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{c as I}from"./camelCase-CO1PkVrH.js";import{w as L}from"./withStaticProps-DfSG2La2.js";const w="_tabPanelWrapper_8vrwg_1",D={tabPanelWrapper:w},A=n.forwardRef(({className:e,id:s,children:t,index:i,"data-testid":c},d)=>{const u=n.useRef(null),m=S(d,u);return C.jsx("div",{ref:m,className:R(D.tabPanelWrapper,e),id:s,"data-testid":c||E(q.TAB_PANEL,s),role:"tabpanel",children:t},`${s}_${i}`)});try{A.displayName="TabPanel",A.__docgenInfo={description:"",displayName:"TabPanel",props:{children:{defaultValue:null,description:"The content inside the tab panel.",name:"children",required:!1,type:{name:"string | ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},index:{defaultValue:null,description:"The index of the tab panel.",name:"index",required:!1,type:{name:"number"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const V=n.forwardRef(({className:e,id:s,activeTabId:t=0,children:i,"data-testid":c},d)=>{const u=n.useRef(null),m=S(d,u),[g,b]=n.useState(t),[a,f]=n.useState(t),p=j(t);n.useEffect(()=>{t!==p&&t!==a&&(b(a),f(t))},[t,a,p]);const P=n.useCallback(r=>{b(a),f(r)},[a]),h=n.useMemo(()=>{const r=[];return o.Children.forEach(i,l=>{l.type.isTabPanels&&o.Children.forEach(l.props.children,(v,_)=>{r[_]=v.props.id})}),r},[i]);return C.jsx("div",{ref:m,className:e,id:s,"data-testid":c||E(q.TABS_CONTEXT,s),children:o.Children.map(i,r=>{if(r.type.isTabList){const l=r.props.onTabChange,v=_=>{P(_),l==null||l(_)};return o.cloneElement(r,{activeTabId:a,onTabChange:v,tabPanelIds:h})}if(r.type.isTabPanels){const l=g<a?"ltr":"rtl";return o.cloneElement(r,{activeTabId:a,animationDirection:l})}return r})})});try{V.displayName="TabsContext",V.__docgenInfo={description:"",displayName:"TabsContext",props:{activeTabId:{defaultValue:{value:"0"},description:"The index of the currently active tab.",name:"activeTabId",required:!1,type:{name:"number"}},children:{defaultValue:null,description:"The child elements representing the tab list and tab panels.",name:"children",required:!1,type:{name:"ReactElement<any, string | JSXElementConstructor<any>> | ReactElement<any, string | JSXElementConstructor<any>>[]"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}var x=(e=>(e.RTL="rtl",e.LTR="ltr",e))(x||{});const W="_tabPanelsWrapper_1djsp_1",X="_tabPanel_1djsp_1",J="_animationDirectionRtl_1djsp_5",M="_animationDirectionLtr_1djsp_9",$="_active_1djsp_13",B="_panelSlideIn_1djsp_1",y={tabPanelsWrapper:W,tabPanel:X,animationDirectionRtl:J,animationDirectionLtr:M,active:$,panelSlideIn:B},T=n.forwardRef(({className:e,id:s,activeTabId:t=0,animationDirection:i="rtl",children:c,"data-testid":d},u)=>{const m=n.useRef(null),g=S(u,m),b=n.useMemo(()=>o.Children.map(c,(a,f)=>{const p=t===f;if(!p)return null;const P=p?"active":"non-active",h=p?`animation-direction-${i}`:"";return o.cloneElement(a,{index:f,...a.props,className:R(y.tabPanel,[N(y,P)],[N(y,I(h))],a.props.className)})}).filter(Boolean),[c,t,i]);return C.jsx("div",{ref:g,className:R(y.tabPanelsWrapper,e),id:s,"data-testid":d||E(q.TAB_PANELS,s),children:b})});Object.assign(T,{isTabPanels:!0});const Y=L(T,{animationDirections:x});try{T.displayName="TabPanels",T.__docgenInfo={description:"",displayName:"TabPanels",props:{activeTabId:{defaultValue:{value:"0"},description:"The index of the currently active tab panel.",name:"activeTabId",required:!1,type:{name:"number"}},animationDirection:{defaultValue:{value:"rtl"},description:"The animation direction when switching between tab panels.",name:"animationDirection",required:!1,type:{name:"enum",value:[{value:'"ltr"'},{value:'"rtl"'}]}},children:{defaultValue:null,description:"The child elements representing tab panels.",name:"children",required:!1,type:{name:"ReactElement<TabPanelProps, string | JSXElementConstructor<any>> | ReactElement<TabPanelProps, string | JSXElementConstructor<...>>[]"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{V as T,Y as a,A as b};
