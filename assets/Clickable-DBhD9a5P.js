import{c as M}from"./index-BpvXyOxN.js";import{r as T,R as x}from"./index-Hemj67b4.js";import{u as C}from"./useClickableProps-BLFqJcKD.js";import{n as e}from"./noop-PBsGcYX_.js";const w="_clickable_1bwnu_2",g="_disabled_1bwnu_15",I="_disableTextSelection_1bwnu_19",a={clickable:w,disabled:g,disableTextSelection:I},n=T.forwardRef(({elementType:t="div",className:i="",id:s,children:o,role:r="button",onClick:d=e,enableTextSelection:u=!1,onMouseDown:c=e,onMouseEnter:m=e,onMouseLeave:p=e,ariaLabel:f,ariaHidden:b,ariaHasPopup:h,ariaExpanded:y,tabIndex:v="0",disabled:l=!1,style:E,"data-testid":q},V)=>{const k=C({onClick:d,onMouseDown:c,onMouseEnter:m,onMouseLeave:p,disabled:l,id:s,"data-testid":q,role:r,tabIndex:v,ariaLabel:f,ariaHidden:b,ariaHasPopup:h,ariaExpanded:y},V),_=M(a.clickable,i,{[a.disabled]:l,[a.disableTextSelection]:!u});return x.createElement(t,{...k,className:_,style:E},o)});try{n.displayName="Clickable",n.__docgenInfo={description:"",displayName:"Clickable",props:{elementType:{defaultValue:{value:"div"},description:"The HTML element or custom component used as the root.",name:"elementType",required:!1,type:{name:"string"}},children:{defaultValue:null,description:"The content inside the clickable element.",name:"children",required:!1,type:{name:"ReactNode"}},role:{defaultValue:{value:"button"},description:"The ARIA role of the element.",name:"role",required:!1,type:{name:"AriaRole"}},onClick:{defaultValue:null,description:"Callback fired when the element is clicked.",name:"onClick",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},enableTextSelection:{defaultValue:{value:"false"},description:"If true, allows text selection inside the element.",name:"enableTextSelection",required:!1,type:{name:"boolean"}},onMouseDown:{defaultValue:null,description:"Callback fired when the mouse button is pressed down on the element.",name:"onMouseDown",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},onMouseEnter:{defaultValue:null,description:"Callback fired when the mouse enters the element.",name:"onMouseEnter",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},onMouseLeave:{defaultValue:null,description:"Callback fired when the mouse leaves the element.",name:"onMouseLeave",required:!1,type:{name:"(event: MouseEvent<Element, MouseEvent>) => void"}},ariaLabel:{defaultValue:null,description:"The label of the element for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},ariaHidden:{defaultValue:null,description:"If true, hides the element from assistive technologies.",name:"ariaHidden",required:!1,type:{name:"boolean"}},ariaHasPopup:{defaultValue:null,description:"Indicates the presence of a popup associated with the element.",name:"ariaHasPopup",required:!1,type:{name:"string | boolean"}},ariaExpanded:{defaultValue:null,description:"If true, indicates that the associated popup is open.",name:"ariaExpanded",required:!1,type:{name:"boolean"}},tabIndex:{defaultValue:{value:"0"},description:"The tab order of the element.",name:"tabIndex",required:!1,type:{name:"string | number"}},disabled:{defaultValue:{value:"false"},description:"If true, the element is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},style:{defaultValue:null,description:"Inline styles applied to the element.",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:{value:""},description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{n as C};
