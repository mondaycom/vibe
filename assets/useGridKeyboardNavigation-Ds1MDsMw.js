import{j as e}from"./jsx-runtime-DDzbWKUH.js";import{useMDXComponents as d}from"./index-CXa8ra7y.js";import{M as c,C as p}from"./index-q2XlbBTQ.js";import{a as l}from"./index-B-lxVbXh.js";import{U as u,O as h}from"./useGridKeyboardNavigation.stories-BqHqbtMS.js";import"./index-Hemj67b4.js";import"./_commonjsHelpers-BosuxZz1.js";import"./iframe-DpRn7Sx8.js";import"./index-EXOwUcY0.js";import"./index-D63y3F3s.js";import"./index-BedKbVpA.js";import"./index-DrFu-skq.js";import"./v4-CtRu48qb.js";import"./index-BpvXyOxN.js";import"./useGridKeyboardNavigation-3hc_Zu7D.js";import"./index-DLqmmtYJ.js";import"./useFullKeyboardListeners-CpRGyrUm.js";import"./index-8zVcErkr.js";import"./ssr-utils-Do6V6AqB.js";import"./noop-DX6rZLP_.js";import"./Button-CVjt-pk_.js";import"./useMergeRef-DQ4XPFxl.js";import"./useIsomorphicLayoutEffect-FdvxY73P.js";import"./function-utils-6EQ2u6TA.js";import"./isArray-Dxzbedgu.js";import"./_baseGetTag-ENn7h-yl.js";import"./isObject-C3e4t58V.js";import"./Icon-CDdqL_gb.js";import"./test-ids-utils-9ISiqDto.js";import"./withStaticProps-DfSG2La2.js";import"./Loader-DRZxb8MF.js";import"./typesciptCssModulesHelper-Ji7rRrZn.js";import"./sizes-BOsbvv4u.js";import"./camelCase-B8c2Dc7Y.js";import"./isSymbol-DWIQbemu.js";import"./range-Bu-eLZAw.js";import"./_isIterateeCall-6qSKvFMf.js";import"./eq-DPGIUuQ3.js";import"./isArrayLike-RI9Auh3I.js";import"./toFinite-CwoL-S44.js";import"./toNumber-CBHRrcgy.js";const ne=72,ie=24,re=l("item selected");function a(i){const t={b:"b",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...d(),...i.components},{FunctionArgument:n,FunctionArguments:o,Link:s,UsageGuidelines:m}=t;return n||r("FunctionArgument"),o||r("FunctionArguments"),s||r("Link"),m||r("UsageGuidelines"),e.jsxs(e.Fragment,{children:[e.jsx(c,{of:u}),`
`,e.jsx(t.h1,{id:"usegridkeyboardnavigation",children:"useGridKeyboardNavigation"}),`
`,e.jsx(t.p,{children:"Used for accessible keyboard navigation. Useful for components rendering items that can be navigated and selected with a keyboard."}),`
`,`
`,`
`,e.jsx(p,{of:h}),`
`,e.jsx(t.h3,{id:"import",children:"Import"}),`
`,e.jsx(t.pre,{children:e.jsx(t.code,{className:"language-js",children:`import { useGridKeyboardNavigation } from "@vibe/core/hooks";
`})}),`
`,e.jsx(t.h2,{id:"usage",children:"Usage"}),`
`,e.jsx(m,{guidelines:["Use this hook when you want to add keyboard navigation to a grid-like component."]}),`
`,e.jsx(t.h2,{id:"arguments",children:"Arguments"}),`
`,e.jsx(o,{children:e.jsxs(n,{name:"options",type:"Object",children:[e.jsx(n,{name:"ref",type:"React.MutableRefObject<HTMLElement>",description:e.jsxs(e.Fragment,{children:["A React",e.jsx(s,{href:"https://react.dev/reference/react/useRef",children:"ref"}),"object. The reference for the component that listens to keyboard. ",e.jsx(t.br,{}),e.jsx(t.b,{children:"Important:"})," the referred element must have a ",e.jsxs(t.code,{children:["tabIndex=",-1]})," for the focus to work properly."]}),required:!0}),e.jsx(n,{name:"itemsCount",type:"Number",description:"The number of items.",required:!0}),e.jsx(n,{name:"numberOfItemsInLine",type:"Number",description:"The number of items on each line of the grid.",required:!0}),e.jsx(n,{name:"onItemClicked",type:"(item, index) => void",description:"The callback for selecting an item. It will be called when an active item is selected, for example with 'Enter'.",required:!0}),e.jsx(n,{name:"getItemByIndex",type:"(index) => item",description:"A function which gets an index as a param, and returns the item on that index."}),e.jsx(n,{name:"focusOnMount",type:"boolean",description:"If true, the referenced element will be focused when mounted."}),e.jsx(n,{name:"focusItemIndexOnMount",type:"number",description:e.jsxs(e.Fragment,{children:["Optional item index to focus when mounted. Only works with ",e.jsx(t.code,{children:"options.focusOnMount"}),"."]})}),e.jsx(n,{name:"disabledIndexes",type:"number[]",description:"Optional array of disabled indices, which will be skipped while navigating."})]})}),`
`,e.jsx(t.h2,{id:"returns",children:"Returns"}),`
`,e.jsx(o,{children:e.jsxs(n,{name:"result",type:"Object",children:[e.jsx(n,{name:"activeIndex",type:"number",description:"The index of the currently active item."}),e.jsx(n,{name:"onSelectionAction",type:"(itemIndex) => void",description:e.jsxs(e.Fragment,{children:["A wrapper around the passed ",e.jsx(t.code,{children:"onItemClicked"})," function. Use it as the handler for selecting items (e.g. ",e.jsx(t.code,{children:"onClick"}),")"]})}),e.jsx(n,{name:"isInitialActiveState",type:"boolean",description:e.jsxs(e.Fragment,{children:["If true, the currently active element was due to an initial mounting index option. See"," ",e.jsx(t.code,{children:"options.focusItemIndexOnMount"}),"."]})})]})})]})}function oe(i={}){const{wrapper:t}={...d(),...i.components};return t?e.jsx(t,{...i,children:e.jsx(a,{...i})}):a(i)}function r(i,t){throw new Error("Expected component `"+i+"` to be defined: you likely forgot to import, pass, or provide it.")}export{ne as ELEMENT_WIDTH_PX,re as ON_CLICK,ie as PADDING_PX,oe as default};
