import{j as t}from"./jsx-runtime-DDzbWKUH.js";import{r as v,R as k}from"./index-Hemj67b4.js";import{c as r}from"./index-BpvXyOxN.js";import{u as A}from"./index-DS1BdwZI.js";import{T as L}from"./Text-DK-F53Ij.js";import{g as S,b as O,a as j,C as E}from"./test-ids-utils-9ISiqDto.js";import{g as M}from"./typesciptCssModulesHelper-Ji7rRrZn.js";import{n as H}from"./noop-DX6rZLP_.js";const R={"hidden-switch":"_hidden-switch_t3xsw_1"},C=v.forwardRef(({id:e,name:a,value:o,role:s,disabled:i,ariaLabel:u,ariaLabelledBy:l,checked:c,inputClassName:p,onChange:h,ariaControls:g,defaultChecked:y,children:n,wrapperClassName:_,"data-testid":b},T)=>{const{onChange:q,isChecked:d}=A({isDisabled:i,isChecked:c,defaultChecked:y,onChange:h}),V=v.useMemo(()=>k.cloneElement(n,{...n==null?void 0:n.props,checked:d}),[n,d]);return t.jsxs("label",{htmlFor:e,className:_,children:[t.jsx("input",{ref:T,id:e,"aria-controls":g,value:o,name:a,type:"checkbox",className:r(R["hidden-switch"],p),checked:d,role:s||"switch",onChange:q,disabled:i,"aria-label":u,"aria-labelledby":l,"aria-checked":d,"data-testid":b}),V]})});try{C.displayName="Switch",C.__docgenInfo={description:"",displayName:"Switch",props:{name:{defaultValue:null,description:"The name of the switch input.",name:"name",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value associated with the switch.",name:"value",required:!1,type:{name:"string"}},role:{defaultValue:null,description:"The ARIA role of the switch.",name:"role",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If true, the switch is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},ariaLabel:{defaultValue:null,description:"The ARIA label for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},ariaLabelledBy:{defaultValue:null,description:"The ID of the element labeling the switch.",name:"ariaLabelledBy",required:!1,type:{name:"string"}},checked:{defaultValue:null,description:"If true, the switch is checked.",name:"checked",required:!1,type:{name:"boolean"}},inputClassName:{defaultValue:null,description:"Class name applied to the input element.",name:"inputClassName",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the switch state changes.",name:"onChange",required:!1,type:{name:"(value: boolean, event: ChangeEvent<HTMLInputElement>) => void"}},ariaControls:{defaultValue:null,description:"The ID of the element controlled by the switch.",name:"ariaControls",required:!1,type:{name:"string"}},defaultChecked:{defaultValue:null,description:"If true, the switch is checked by default.",name:"defaultChecked",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The child component rendered inside the switch.",name:"children",required:!1,type:{name:"ReactElement<MockToggleProps, string | JSXElementConstructor<any>>"}},wrapperClassName:{defaultValue:null,description:"Class name applied to the wrapper element.",name:"wrapperClassName",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const D="_text_11tpe_1",z="_disabled_11tpe_9",x={text:D,disabled:z},f=({children:e,disabled:a})=>t.jsx(L,{element:"span",type:"text2",className:r(x.text,{[x.disabled]:a}),children:e});try{f.displayName="ToggleText",f.__docgenInfo={description:"",displayName:"ToggleText",props:{children:{defaultValue:null,description:"The text content inside the toggle.",name:"children",required:!0,type:{name:"string"}},disabled:{defaultValue:null,description:"If true, applies a disabled style to the text.",name:"disabled",required:!0,type:{name:"boolean"}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const G="_toggle_1fum2_1",$="_selected_1fum2_45",B="_notSelected_1fum2_51",F="_disabled_1fum2_57",J="_medium_1fum2_61",P="_small_1fum2_68",m={toggle:G,"focus-visible":"_focus-visible_1fum2_26",selected:$,notSelected:B,disabled:F,medium:J,small:P},w=({areLabelsHidden:e,checked:a,offOverrideText:o,onOverrideText:s,className:i,selectedClassName:u,disabled:l,size:c="medium"})=>t.jsxs(t.Fragment,{children:[e?null:t.jsx(f,{disabled:l,children:o}),t.jsx("div",{className:r(m.toggle,M(m,c),i,{[r(m.selected,u)]:a,[m.notSelected]:!a,[m.disabled]:l}),"aria-hidden":"true","data-testid":S(O.TOGGLE)}),e?null:t.jsx(f,{disabled:l,children:s})]});try{w.displayName="MockToggle",w.__docgenInfo={description:"",displayName:"MockToggle",props:{areLabelsHidden:{defaultValue:null,description:"If true, hides the on/off labels.",name:"areLabelsHidden",required:!1,type:{name:"boolean"}},checked:{defaultValue:null,description:'If true, the toggle is in the "on" state.',name:"checked",required:!1,type:{name:"boolean"}},offOverrideText:{defaultValue:null,description:'The text displayed when the toggle is in the "off" state.',name:"offOverrideText",required:!1,type:{name:"string"}},onOverrideText:{defaultValue:null,description:'The text displayed when the toggle is in the "on" state.',name:"onOverrideText",required:!1,type:{name:"string"}},selectedClassName:{defaultValue:null,description:"Class name applied when the toggle is selected.",name:"selectedClassName",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If true, disables the toggle.",name:"disabled",required:!0,type:{name:"boolean"}},size:{defaultValue:{value:"medium"},description:"The size of the toggle.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}const X="_toggleInput_1g4mj_2",K="_wrapper_1g4mj_10",N={toggleInput:X,wrapper:K},I=v.forwardRef(({id:e,className:a,toggleSelectedClassName:o,isDefaultSelected:s=!0,isSelected:i,onChange:u=H,value:l,name:c,disabled:p,ariaLabel:h,ariaControls:g,areLabelsHidden:y=!1,onOverrideText:n="On",offOverrideText:_="Off",size:b="medium","data-testid":T},q)=>{const d=r(N.wrapper),V=r(N.toggleInput);return t.jsx(C,{defaultChecked:s,checked:i,id:e,wrapperClassName:d,onChange:u,value:l,name:c,disabled:p,ariaLabel:h,ariaControls:g,inputClassName:V,ref:q,"data-testid":T||S(E.TOGGLE),"data-vibe":j.TOGGLE,children:t.jsx(w,{areLabelsHidden:y,offOverrideText:_,onOverrideText:n,disabled:p,className:a,selectedClassName:o,size:b})})});try{I.displayName="Toggle",I.__docgenInfo={description:"",displayName:"Toggle",props:{toggleSelectedClassName:{defaultValue:null,description:"Class name applied when the toggle is selected.",name:"toggleSelectedClassName",required:!1,type:{name:"string"}},isDefaultSelected:{defaultValue:{value:"true"},description:"If true, the toggle is selected by default.",name:"isDefaultSelected",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Controls the selected state of the toggle.",name:"isSelected",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Callback fired when the toggle state changes.",name:"onChange",required:!1,type:{name:"(value: boolean, event: ChangeEvent<HTMLInputElement>) => void"}},value:{defaultValue:null,description:"The value associated with the toggle.",name:"value",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name attribute of the toggle input.",name:"name",required:!1,type:{name:"string"}},disabled:{defaultValue:null,description:"If true, disables the toggle.",name:"disabled",required:!1,type:{name:"boolean"}},areLabelsHidden:{defaultValue:{value:"false"},description:"If true, hides the on/off labels.",name:"areLabelsHidden",required:!1,type:{name:"boolean"}},onOverrideText:{defaultValue:{value:"On"},description:'The text displayed when the toggle is in the "on" position.',name:"onOverrideText",required:!1,type:{name:"string"}},offOverrideText:{defaultValue:{value:"Off"},description:'The text displayed when the toggle is in the "off" position.',name:"offOverrideText",required:!1,type:{name:"string"}},ariaLabel:{defaultValue:null,description:"The ARIA label for accessibility.",name:"ariaLabel",required:!1,type:{name:"string"}},ariaControls:{defaultValue:null,description:"The ID of the element controlled by the toggle.",name:"ariaControls",required:!1,type:{name:"string"}},size:{defaultValue:{value:"medium"},description:"The size of the toggle.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'}]}},className:{defaultValue:null,description:"A CSS class name to apply to the component.",name:"className",required:!1,type:{name:"string"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"An HTML id attribute for the component.",name:"id",required:!1,type:{name:"string"}}}}}catch{}export{I as T};
