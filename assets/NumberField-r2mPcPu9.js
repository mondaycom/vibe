import{j as b}from"./jsx-runtime-lwGtIXvq.js";import{r as o}from"./index-CTZeEbLr.js";import{c as F}from"./index-BpvXyOxN.js";import{B as X}from"./BaseInput-VvFX1jih.js";import{F as Y}from"./FieldLabel-DyAxo16h.js";import{T as Z}from"./Text-BdGfTGe8.js";import{I as ee}from"./Icon-B1P6-uxB.js";import{I as K}from"./IconButton-CR3LBQ_I.js";import{F as H}from"./Flex-D6jv3OvD.js";import{g as ne}from"./typesciptCssModulesHelper-oFWQo8l_.js";import{n as te}from"./Workspace-DtDO7RvQ.js";import{r as ae}from"./DropdownChevronDown-Ck7VmPfy.js";import{u as le}from"./useMergeRef-C008K4k9.js";import{a as ie}from"./test-ids-utils-CSfXomCJ.js";const V=({value:e,direction:l,step:a=1,min:n,max:u,allowOutOfBounds:c})=>{let t=(e??0)+l*a;return c||(n!==void 0&&(t=Math.max(n,t)),u!==void 0&&(t=Math.min(u,t))),t};try{V.displayName="calculateSteppedValue",V.__docgenInfo={description:"",displayName:"calculateSteppedValue",props:{value:{defaultValue:null,description:"The current value of the number field.",name:"value",required:!0,type:{name:"number"}},max:{defaultValue:null,description:"The maximum value allowed.",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"The amount to increment or decrement the value by.",name:"step",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"The minimum value allowed.",name:"min",required:!1,type:{name:"number"}},allowOutOfBounds:{defaultValue:null,description:"If false, the value will be clamped to the min/max values on change.\nIf true, the value can exceed the min/max values.\nCan be used alongside `onValidityChange` to handle the validity of the value.",name:"allowOutOfBounds",required:!1,type:{name:"boolean"}},direction:{defaultValue:null,description:"",name:"direction",required:!0,type:{name:"number"}}}}}catch{}const E=({value:e,onChange:l,min:a,max:n,step:u=1,disabled:c,readOnly:d,allowOutOfBounds:t,onValidityChange:s})=>{const[f,m]=o.useState(e===null?"":String(e));o.useEffect(()=>{const i=e===null?"":String(e);m(r=>e!==parseFloat(r)?i:r)},[e]);const h=o.useCallback(i=>{const r=i.target.value;if(r===""){m(""),l(null,i);return}if(!/^-?\d*\.?\d*$/.test(r))return;m(r);const x=r==="-"||r.endsWith(".");if(x&&r.length===1&&r.endsWith(".")){l(0,i);return}if(!x){const v=parseFloat(r);if(t){v!==e&&l(v,i);return}const I=Math.max(a??-1/0,Math.min(n??1/0,v));I!==e&&l(I,i)}},[l,t,a,n,e]);o.useEffect(()=>{if(!s)return;if(e===null){s(!0);return}const i=(a===void 0||e>=a)&&(n===void 0||e<=n);s(i)},[e,a,n,s]);const _=o.useCallback(i=>{if(c||d)return;const r=i.key==="ArrowUp",p=i.key==="ArrowDown";if(r||p){i.preventDefault();const v=V({value:e,direction:r?1:-1,step:u,min:a,max:n,allowOutOfBounds:t});l(v,i)}},[e,u,a,n,l,c,d,t]),g=!t&&e!==null&&a!==void 0&&e<=a,y=!t&&e!==null&&n!==void 0&&e>=n;return{inputValue:f,numericValue:e,onChange:h,onKeyDown:_,isAtMin:g,isAtMax:y}};try{E.displayName="useNumberFieldState",E.__docgenInfo={description:"",displayName:"useNumberFieldState",props:{disabled:{defaultValue:null,description:"If true, the input will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If true, the input will be read-only.",name:"readOnly",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@param value - The new value.
@param event - The event that triggered the change.`,name:"onChange",required:!0,type:{name:"(value: number, event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element> | ChangeEvent<HTMLInputElement>) => void"}},value:{defaultValue:null,description:"The current value of the number field.",name:"value",required:!0,type:{name:"number"}},max:{defaultValue:null,description:"The maximum value allowed.",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"The amount to increment or decrement the value by.",name:"step",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"The minimum value allowed.",name:"min",required:!1,type:{name:"number"}},allowOutOfBounds:{defaultValue:null,description:"If false, the value will be clamped to the min/max values on change.\nIf true, the value can exceed the min/max values.\nCan be used alongside `onValidityChange` to handle the validity of the value.",name:"allowOutOfBounds",required:!1,type:{name:"boolean"}},onValidityChange:{defaultValue:null,description:"Callback fired when the validity of the value changes (if it is within the min/max bounds).",name:"onValidityChange",required:!1,type:{name:"(isValid: boolean) => void"}}}}}catch{}const M=({onChange:e,value:l,step:a=1,min:n,max:u,allowOutOfBounds:c,readOnly:d,inputRef:t})=>{const s=o.useCallback((h,_)=>{var y;if(d)return;const g=V({value:l,direction:h,step:a,min:n,max:u,allowOutOfBounds:c});e(g,_),(y=t.current)==null||y.focus()},[l,a,n,u,e,c,d,t]),f=o.useCallback(h=>{s(1,h)},[s]),m=o.useCallback(h=>{s(-1,h)},[s]);return{onIncrement:f,onDecrement:m}};try{M.displayName="useSpinButtonHandlers",M.__docgenInfo={description:"",displayName:"useSpinButtonHandlers",props:{readOnly:{defaultValue:null,description:"If true, the input will be read-only.",name:"readOnly",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@param value - The new value.
@param event - The event that triggered the change.`,name:"onChange",required:!0,type:{name:"(value: number, event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element> | ChangeEvent<HTMLInputElement>) => void"}},value:{defaultValue:null,description:"The current value of the number field.",name:"value",required:!0,type:{name:"number"}},max:{defaultValue:null,description:"The maximum value allowed.",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"The amount to increment or decrement the value by.",name:"step",required:!1,type:{name:"number"}},min:{defaultValue:null,description:"The minimum value allowed.",name:"min",required:!1,type:{name:"number"}},allowOutOfBounds:{defaultValue:null,description:"If false, the value will be clamped to the min/max values on change.\nIf true, the value can exceed the min/max values.\nCan be used alongside `onValidityChange` to handle the validity of the value.",name:"allowOutOfBounds",required:!1,type:{name:"boolean"}},inputRef:{defaultValue:null,description:"",name:"inputRef",required:!0,type:{name:"RefObject<HTMLInputElement>"}}}}}catch{}const re="_infoText_x571r_1",ue="_error_x571r_4",se="_success_x571r_7",oe="_disabled_x571r_10",de="_readOnly_x571r_13",q={infoText:re,error:ue,success:se,disabled:oe,readOnly:de},C=o.forwardRef(({id:e,text:l,error:a,success:n,disabled:u,readOnly:c},d)=>l?b.jsx(Z,{id:e,ref:d,className:F(q.infoText,{[q.error]:a,[q.success]:n,[q.disabled]:u,[q.readOnly]:c}),type:"text2",children:l}):null);try{C.displayName="InfoText",C.__docgenInfo={description:"",displayName:"InfoText",props:{id:{defaultValue:null,description:"The ID of the associated form element for aria-describedby.",name:"id",required:!0,type:{name:"string"}},text:{defaultValue:null,description:"The text content to display.",name:"text",required:!0,type:{name:"string"}},error:{defaultValue:null,description:"If true, applies error styling to the info text.",name:"error",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"If true, applies success styling to the info text.",name:"success",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If true, applies disabled styling to the info text.",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If true, applies read-only styling to the info text.",name:"readOnly",required:!1,type:{name:"boolean"}}}}}catch{}const me="_spinButton_1s2lh_1",ce="_large_1s2lh_1",pe="_icon_1s2lh_5",fe="_medium_1s2lh_9",he="_small_1s2lh_17",w={spinButton:me,large:ce,icon:pe,medium:fe,small:he},N=({inputId:e,onIncrement:l,onDecrement:a,disabled:n,size:u,isAtMin:c,isAtMax:d})=>{const t=F(w.spinButton,ne(w,u)),s=w.icon,f=m=>{m.preventDefault()};return b.jsxs(H,{direction:"column",align:"stretch",justify:"center",onMouseDown:f,children:[b.jsx(K,{ariaLabel:"Increase",hideTooltip:!0,ariaControls:e,tabIndex:-1,onClick:l,disabled:n||d,size:null,className:t,iconClassName:s,icon:te}),b.jsx(K,{ariaLabel:"Decrease",hideTooltip:!0,ariaControls:e,tabIndex:-1,onClick:a,disabled:n||c,size:null,className:t,iconClassName:s,icon:ae})]})};try{N.displayName="NumberFieldSpinButton",N.__docgenInfo={description:"",displayName:"NumberFieldSpinButton",props:{inputId:{defaultValue:null,description:"",name:"inputId",required:!1,type:{name:"string"}},onIncrement:{defaultValue:null,description:"",name:"onIncrement",required:!0,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},onDecrement:{defaultValue:null,description:"",name:"onDecrement",required:!0,type:{name:"(event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element>) => void"}},size:{defaultValue:null,description:"",name:"size",required:!0,type:{name:'"small" | "medium" | "large"'}},disabled:{defaultValue:null,description:"",name:"disabled",required:!1,type:{name:"boolean"}},isAtMin:{defaultValue:null,description:"",name:"isAtMin",required:!1,type:{name:"boolean"}},isAtMax:{defaultValue:null,description:"",name:"isAtMax",required:!1,type:{name:"boolean"}}}}}catch{}const be="_numberField_tq3pf_1",ye="_label_tq3pf_4",ve="_leftIcon_tq3pf_7",T={numberField:be,label:ye,leftIcon:ve},O=o.forwardRef(({className:e,value:l,onChange:a,label:n,required:u,placeholder:c,infoText:d,error:t,success:s,disabled:f,readOnly:m,min:h,max:_,step:g=1,size:y="medium",leftIcon:i,"aria-label":r,id:p,"data-testid":x,allowOutOfBounds:v,onValidityChange:I,...$},z)=>{const S=o.useRef(null),U=le(z,S),{inputValue:W,numericValue:B,onChange:P,onKeyDown:G,isAtMin:R,isAtMax:D}=E({value:l,onChange:a,min:h,max:_,step:g,disabled:f,readOnly:m,allowOutOfBounds:v,onValidityChange:I}),{onIncrement:j,onDecrement:k}=M({onChange:a,value:B,step:g,min:h,max:_,allowOutOfBounds:v,readOnly:m,inputRef:S}),J=o.useMemo(()=>i?b.jsx(ee,{icon:i,className:T.leftIcon}):null,[i]),Q=o.useMemo(()=>b.jsx(N,{inputId:p,onIncrement:j,onDecrement:k,disabled:f||m,size:y,isAtMin:R,isAtMax:D}),[p,j,k,f,m,y,R,D]),A=o.useMemo(()=>d&&p?`${p}-info-text`:void 0,[d,p]),L=o.useMemo(()=>n&&p?`${p}-label`:void 0,[n,p]);return b.jsxs(H,{direction:"column",align:"stretch",gap:"xs",className:F(T.numberField,e),"data-vibe":ie.NUMBER_FIELD,children:[b.jsx(Y,{id:L,className:T.label,labelText:n,required:u,labelFor:p}),b.jsx(X,{...$,"data-testid":x,ref:U,id:p,value:W,onChange:P,onKeyDown:G,placeholder:c,type:"text",inputMode:"numeric",inputRole:"spinbutton","aria-valuenow":B,"aria-valuemin":h,"aria-valuemax":_,"aria-required":u,"aria-label":r||n,"aria-labelledby":L,"aria-describedby":A,disabled:f,readOnly:m,size:y,error:t,success:s,renderLeft:J,renderRight:Q}),b.jsx(C,{id:A,text:d,error:t,success:s,disabled:f,readOnly:m})]})});try{O.displayName="NumberField",O.__docgenInfo={description:"",displayName:"NumberField",props:{value:{defaultValue:null,description:"The current value of the number field.",name:"value",required:!0,type:{name:"number"}},onChange:{defaultValue:null,description:`Callback fired when the value changes.
@param value - The new value.
@param event - The event that triggered the change.`,name:"onChange",required:!0,type:{name:"(value: number, event: MouseEvent<Element, MouseEvent> | KeyboardEvent<Element> | ChangeEvent<HTMLInputElement>) => void"}},required:{defaultValue:null,description:"If true, the input will be required.",name:"required",required:!1,type:{name:"boolean"}},placeholder:{defaultValue:null,description:"The placeholder text to display when the input is empty.",name:"placeholder",required:!1,type:{name:"string"}},error:{defaultValue:null,description:"If true, the input will be in an error state.",name:"error",required:!1,type:{name:"boolean"}},success:{defaultValue:null,description:"If true, the input will be in a success state.",name:"success",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:"If true, the input will be disabled.",name:"disabled",required:!1,type:{name:"boolean"}},readOnly:{defaultValue:null,description:"If true, the input will be read-only.",name:"readOnly",required:!1,type:{name:"boolean"}},min:{defaultValue:null,description:"The minimum value allowed.",name:"min",required:!1,type:{name:"number"}},max:{defaultValue:null,description:"The maximum value allowed.",name:"max",required:!1,type:{name:"number"}},step:{defaultValue:{value:"1"},description:"The amount to increment or decrement the value by.",name:"step",required:!1,type:{name:"number"}},size:{defaultValue:{value:"medium"},description:"The size of the input.",name:"size",required:!1,type:{name:'"small" | "medium" | "large"'}},leftIcon:{defaultValue:null,description:"An icon to display on the left side of the input.",name:"leftIcon",required:!1,type:{name:"SubIcon"}},"data-testid":{defaultValue:null,description:"A unique identifier for testing purposes.",name:"data-testid",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The label for the input.",name:"label",required:!1,type:{name:"string"}},id:{defaultValue:null,description:"The id of the input.\nRequired when `label` or `infoText` is provided for accessibility reasons.\nThe id of the input.\nRequired when `infoText` or `label` is provided for accessibility reasons.\nThe id of the input.",name:"id",required:!1,type:{name:"string"}},infoText:{defaultValue:null,description:"Informational text to display below the input.\nInformational text to display below the input.\nIf provided, an `id` is also required for accessibility.",name:"infoText",required:!1,type:{name:"string"}},allowOutOfBounds:{defaultValue:null,description:"If false, the value will be clamped to the min/max values on change.\nIf true, the value can exceed the min/max values.\nCan be used alongside `onValidityChange` to handle the validity of the value.",name:"allowOutOfBounds",required:!1,type:{name:"boolean"}},onValidityChange:{defaultValue:null,description:"Callback fired when the validity of the value changes (if it is within the min/max bounds).",name:"onValidityChange",required:!1,type:{name:"(isValid: boolean) => void"}}}}}catch{}export{O as N};
