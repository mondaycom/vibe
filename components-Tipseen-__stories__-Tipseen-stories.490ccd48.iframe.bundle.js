"use strict";(globalThis.webpackChunk_vibe_core=globalThis.webpackChunk_vibe_core||[]).push([[2771],{"./src/components/Tipseen/__stories__/Tipseen.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Colors:()=>Colors,FloatingTipseen:()=>FloatingTipseen,Overview:()=>Overview,TipseenWithAWizard:()=>TipseenWithAWizard,TipseenWithCustomMedia:()=>TipseenWithCustomMedia,TipseenWithImage:()=>TipseenWithImage,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Tipseen_stories});var react=__webpack_require__("../../node_modules/react/index.js"),Tipseen=__webpack_require__("./src/components/Tipseen/Tipseen.tsx"),TipseenContent=__webpack_require__("./src/components/Tipseen/TipseenContent.tsx"),TipseenWizard=__webpack_require__("./src/components/Tipseen/TipseenWizard.tsx"),TipseenImage=__webpack_require__("./src/components/Tipseen/TipseenImage.tsx"),TipseenMedia=__webpack_require__("./src/components/Tipseen/TipseenMedia/TipseenMedia.tsx");const picture_namespaceObject=__webpack_require__.p+"static/media/picture.241870a7.svg",video_namespaceObject=__webpack_require__.p+"static/media/video.78e1f519.mp4";var Flex=__webpack_require__("./src/components/Flex/Flex.tsx"),createStoryMetaSettingsDecorator=__webpack_require__("./src/storybook/functions/createStoryMetaSettingsDecorator.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var _excluded=["title","children","position"];function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(r,l){var t=null==r?null:"undefined"!=typeof Symbol&&r[Symbol.iterator]||r["@@iterator"];if(null!=t){var e,n,i,u,a=[],f=!0,o=!1;try{if(i=(t=t.call(r)).next,0===l){if(Object(t)!==t)return;f=!1}else for(;!(f=(e=i.call(t)).done)&&(a.push(e.value),a.length!==l);f=!0);}catch(r){o=!0,n=r}finally{try{if(!f&&null!=t.return&&(u=t.return(),Object(u)!==u))return}finally{if(o)throw n}}return a}}(arr,i)||function _unsupportedIterableToArray(o,minLen){if(!o)return;if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);"Object"===n&&o.constructor&&(n=o.constructor.name);if("Map"===n||"Set"===n)return Array.from(o);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function _objectWithoutProperties(source,excluded){if(null==source)return{};var key,i,target=function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return{};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(source,excluded);if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++)key=sourceSymbolKeys[i],excluded.indexOf(key)>=0||Object.prototype.propertyIsEnumerable.call(source,key)&&(target[key]=source[key])}return target}var metaSettings=(0,createStoryMetaSettingsDecorator.B)({component:Tipseen.A});const Tipseen_stories={parameters:{storySource:{source:'import React, { useCallback, useState } from "react";\nimport { Meta, StoryObj } from "@storybook/react";\nimport Tipseen, { TipseenProps } from "../Tipseen";\nimport TipseenContent, { TipseenContentProps } from "../TipseenContent";\nimport TipseenWizard from "../TipseenWizard";\nimport TipseenImage from "../TipseenImage";\nimport TipseenMedia from "../TipseenMedia/TipseenMedia";\nimport picture from "./assets/picture.svg";\nimport video from "./assets/video.mp4";\nimport Flex from "../../Flex/Flex";\nimport { createStoryMetaSettingsDecorator } from "../../../storybook/functions/createStoryMetaSettingsDecorator";\n\nconst metaSettings = createStoryMetaSettingsDecorator({\n  component: Tipseen\n});\n\nexport default {\n  title: "Components/Tipseen",\n  component: Tipseen,\n  subcomponents: {\n    TipseenMedia,\n    TipseenImage,\n    TipseenContent,\n    TipseenWizard\n  },\n  argTypes: metaSettings.argTypes,\n  decorators: metaSettings.decorators\n} as Meta<typeof Tipseen>;\n\nconst tipseenTemplate = ({ title, children, position, ...otherArgs }: TipseenProps & TipseenContentProps) => {\n  return (\n    <Tipseen\n      // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n      // Therefore, there is no need to move this prop in your implementations.\n      modifiers={[\n        {\n          name: "preventOverflow",\n          options: {\n            mainAxis: false\n          }\n        }\n      ]}\n      position={position}\n      content={<TipseenContent title={title}>{children}</TipseenContent>}\n      {...otherArgs}\n    >\n      <div style={{ height: "160px" }} />\n    </Tipseen>\n  );\n};\n\nexport const Overview: StoryObj<typeof Tipseen> = {\n  render: tipseenTemplate.bind({}),\n  name: "Overview",\n\n  args: {\n    title: "Title",\n    children: <div>Message for the user will appear here, to give more information about the feature.</div>,\n    position: "right"\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n};\n\nexport const Colors: StoryObj<typeof Tipseen> = {\n  render: () => {\n    return (\n      <Flex direction="column">\n        <Tipseen\n          // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n          // Therefore, there is no need to move this prop in your implementations.\n          modifiers={[\n            {\n              name: "preventOverflow",\n              options: {\n                mainAxis: false\n              }\n            }\n          ]}\n          position="right"\n          content={\n            <TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          }\n        >\n          <div style={{ height: "180px" }} />\n        </Tipseen>\n        <Tipseen\n          // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n          // Therefore, there is no need to move this prop in your implementations.\n          modifiers={[\n            {\n              name: "preventOverflow",\n              options: {\n                mainAxis: false\n              }\n            }\n          ]}\n          position="right"\n          color="primary"\n          content={\n            <TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          }\n        >\n          <div style={{ height: "180px" }} />\n        </Tipseen>\n      </Flex>\n    );\n  },\n\n  name: "Colors"\n};\n\nexport const TipseenWithAWizard: StoryObj<typeof Tipseen> = {\n  render: () => {\n    const content = [\n      <div>Popover message №1 will appear here</div>,\n      <div>Popover message №2 will appear here</div>,\n      <div>Popover message №3 will appear here</div>,\n      <div>Popover message №4 will appear here</div>,\n      <div>Popover message №5 will appear here</div>\n    ];\n\n    const [activeStepIndex, setActiveStepIndex] = useState(2);\n\n    const onChangeActiveStep = useCallback((_e: any, stepIndex: React.SetStateAction<number>) => {\n      setActiveStepIndex(stepIndex);\n    }, []);\n\n    return (\n      <Tipseen\n        // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n        // Therefore, there is no need to move this prop in your implementations.\n        modifiers={[\n          {\n            name: "preventOverflow",\n            options: {\n              mainAxis: false\n            }\n          }\n        ]}\n        position="right"\n        content={\n          <TipseenWizard\n            title="This is a title"\n            steps={content}\n            activeStepIndex={activeStepIndex}\n            onChangeActiveStep={onChangeActiveStep}\n            onFinish={() => {}}\n          />\n        }\n      >\n        <div style={{ height: "150px" }} />\n      </Tipseen>\n    );\n  },\n\n  name: "Tipseen with a wizard"\n};\n\nexport const TipseenWithImage: StoryObj<typeof Tipseen> = {\n  render: () => {\n    const content = [\n      <div>Message for the user will appear here, to give more information about the feature.</div>,\n      <div>Message for the user will appear here, to give more information about the feature.</div>,\n      <div>Message for the user will appear here, to give more information about the feature.</div>,\n      <div>Message for the user will appear here, to give more information about the feature.</div>,\n      <div>Message for the user will appear here, to give more information about the feature.</div>\n    ];\n\n    return (\n      <Tipseen\n        // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n        // Therefore, there is no need to move this prop in your implementations.\n        position="right"\n        modifiers={[\n          {\n            name: "preventOverflow",\n            options: {\n              mainAxis: false\n            }\n          }\n        ]}\n        closeButtonTheme="light"\n        content={\n          <>\n            <TipseenImage src={picture} />\n            <TipseenWizard title="This is a title" steps={content} activeStepIndex={2} />\n          </>\n        }\n      >\n        <div style={{ height: "300px" }} />\n      </Tipseen>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { picture }\n      }\n    }\n  },\n\n  name: "Tipseen with image"\n};\n\nexport const TipseenWithCustomMedia: StoryObj<typeof Tipseen> = {\n  render: () => {\n    return (\n      <Tipseen\n        position="right"\n        // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n        // Therefore, there is no need to move this prop in your implementations.\n        modifiers={[\n          {\n            name: "preventOverflow",\n            options: {\n              mainAxis: false\n            }\n          }\n        ]}\n        closeButtonTheme="dark"\n        content={\n          <>\n            <TipseenMedia>\n              <video\n                autoPlay\n                muted\n                loop\n                src={video}\n                style={{\n                  width: "100%"\n                }}\n              />\n            </TipseenMedia>\n            <TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          </>\n        }\n      >\n        <div style={{ height: "280px" }} />\n      </Tipseen>\n    );\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { video }\n      }\n    }\n  },\n\n  name: "Tipseen with custom media"\n};\n\nexport const FloatingTipseen: StoryObj<typeof Tipseen> = {\n  render: () => {\n    return (\n      <Tipseen\n        closeButtonTheme="dark"\n        floating\n        content={\n          <>\n            <TipseenImage src={picture} />\n            <TipseenContent title="This is a Floating Tipseen">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          </>\n        }\n        // You do not have to use containerSelector, in current use this is for story only\n        containerSelector="#tipseen-floating-container"\n      />\n    );\n  },\n  decorators: [\n    Story => (\n      <div style={{ height: "400px" }} id="tipseen-floating-container">\n        <Story />\n      </div>\n    )\n  ],\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: { picture }\n      }\n    }\n  },\n  name: "Floating Tipseen"\n};\n',locationsMap:{overview:{startLoc:{col:50,line:52},endLoc:{col:1,line:68},startBody:{col:50,line:52},endBody:{col:1,line:68}},colors:{startLoc:{col:48,line:70},endLoc:{col:1,line:120},startBody:{col:48,line:70},endBody:{col:1,line:120}},"tipseen-with-a-wizard":{startLoc:{col:60,line:122},endLoc:{col:1,line:167},startBody:{col:60,line:122},endBody:{col:1,line:167}},"tipseen-with-image":{startLoc:{col:58,line:169},endLoc:{col:1,line:213},startBody:{col:58,line:169},endBody:{col:1,line:213}},"tipseen-with-custom-media":{startLoc:{col:64,line:215},endLoc:{col:1,line:263},startBody:{col:64,line:215},endBody:{col:1,line:263}},"floating-tipseen":{startLoc:{col:57,line:265},endLoc:{col:1,line:299},startBody:{col:57,line:265},endBody:{col:1,line:299}}}}},title:"Components/Tipseen",component:Tipseen.A,subcomponents:{TipseenMedia:TipseenMedia.A,TipseenImage:TipseenImage.A,TipseenContent:TipseenContent.A,TipseenWizard:TipseenWizard.A},argTypes:metaSettings.argTypes,decorators:metaSettings.decorators};var tipseenTemplate=function tipseenTemplate(_ref){var title=_ref.title,children=_ref.children,position=_ref.position,otherArgs=_objectWithoutProperties(_ref,_excluded);return(0,jsx_runtime.jsx)(Tipseen.A,_objectSpread(_objectSpread({modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],position,content:(0,jsx_runtime.jsx)(TipseenContent.A,{title,children})},otherArgs),{},{children:(0,jsx_runtime.jsx)("div",{style:{height:"160px"}})}))};tipseenTemplate.displayName="tipseenTemplate";var Overview={render:tipseenTemplate.bind({}),name:"Overview",args:{title:"Title",children:(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."}),position:"right"},parameters:{docs:{liveEdit:{isEnabled:!1}}}},Colors={render:function render(){return(0,jsx_runtime.jsxs)(Flex.A,{direction:"column",children:[(0,jsx_runtime.jsx)(Tipseen.A,{modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],position:"right",content:(0,jsx_runtime.jsx)(TipseenContent.A,{title:"This is a title",children:"Message for the user will appear here, to give more information about the feature."}),children:(0,jsx_runtime.jsx)("div",{style:{height:"180px"}})}),(0,jsx_runtime.jsx)(Tipseen.A,{modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],position:"right",color:"primary",content:(0,jsx_runtime.jsx)(TipseenContent.A,{title:"This is a title",children:"Message for the user will appear here, to give more information about the feature."}),children:(0,jsx_runtime.jsx)("div",{style:{height:"180px"}})})]})},name:"Colors"},TipseenWithAWizard={render:function render(){var content=[(0,jsx_runtime.jsx)("div",{children:"Popover message №1 will appear here"}),(0,jsx_runtime.jsx)("div",{children:"Popover message №2 will appear here"}),(0,jsx_runtime.jsx)("div",{children:"Popover message №3 will appear here"}),(0,jsx_runtime.jsx)("div",{children:"Popover message №4 will appear here"}),(0,jsx_runtime.jsx)("div",{children:"Popover message №5 will appear here"})],_useState2=_slicedToArray((0,react.useState)(2),2),activeStepIndex=_useState2[0],setActiveStepIndex=_useState2[1],onChangeActiveStep=(0,react.useCallback)((function(_e,stepIndex){setActiveStepIndex(stepIndex)}),[]);return(0,jsx_runtime.jsx)(Tipseen.A,{modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],position:"right",content:(0,jsx_runtime.jsx)(TipseenWizard.A,{title:"This is a title",steps:content,activeStepIndex,onChangeActiveStep,onFinish:function onFinish(){}}),children:(0,jsx_runtime.jsx)("div",{style:{height:"150px"}})})},name:"Tipseen with a wizard"},TipseenWithImage={render:function render(){var content=[(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."}),(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."}),(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."}),(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."}),(0,jsx_runtime.jsx)("div",{children:"Message for the user will appear here, to give more information about the feature."})];return(0,jsx_runtime.jsx)(Tipseen.A,{position:"right",modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],closeButtonTheme:"light",content:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(TipseenImage.A,{src:picture_namespaceObject}),(0,jsx_runtime.jsx)(TipseenWizard.A,{title:"This is a title",steps:content,activeStepIndex:2})]}),children:(0,jsx_runtime.jsx)("div",{style:{height:"300px"}})})},parameters:{docs:{liveEdit:{scope:{picture:picture_namespaceObject}}}},name:"Tipseen with image"},TipseenWithCustomMedia={render:function render(){return(0,jsx_runtime.jsx)(Tipseen.A,{position:"right",modifiers:[{name:"preventOverflow",options:{mainAxis:!1}}],closeButtonTheme:"dark",content:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(TipseenMedia.A,{children:(0,jsx_runtime.jsx)("video",{autoPlay:!0,muted:!0,loop:!0,src:video_namespaceObject,style:{width:"100%"}})}),(0,jsx_runtime.jsx)(TipseenContent.A,{title:"This is a title",children:"Message for the user will appear here, to give more information about the feature."})]}),children:(0,jsx_runtime.jsx)("div",{style:{height:"280px"}})})},parameters:{docs:{liveEdit:{scope:{video:video_namespaceObject}}}},name:"Tipseen with custom media"},FloatingTipseen={render:function render(){return(0,jsx_runtime.jsx)(Tipseen.A,{closeButtonTheme:"dark",floating:!0,content:(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(TipseenImage.A,{src:picture_namespaceObject}),(0,jsx_runtime.jsx)(TipseenContent.A,{title:"This is a Floating Tipseen",children:"Message for the user will appear here, to give more information about the feature."})]}),containerSelector:"#tipseen-floating-container"})},decorators:[function(Story){return(0,jsx_runtime.jsx)("div",{style:{height:"400px"},id:"tipseen-floating-container",children:(0,jsx_runtime.jsx)(Story,{})})}],parameters:{docs:{liveEdit:{scope:{picture:picture_namespaceObject}}}},name:"Floating Tipseen"};Overview.parameters={...Overview.parameters,docs:{...Overview.parameters?.docs,source:{originalSource:'{\n  render: tipseenTemplate.bind({}),\n  name: "Overview",\n  args: {\n    title: "Title",\n    children: <div>Message for the user will appear here, to give more information about the feature.</div>,\n    position: "right"\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        isEnabled: false\n      }\n    }\n  }\n}',...Overview.parameters?.docs?.source}}},Colors.parameters={...Colors.parameters,docs:{...Colors.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Flex direction="column">\n        <Tipseen\n      // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n      // Therefore, there is no need to move this prop in your implementations.\n      modifiers={[{\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }]} position="right" content={<TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>}>\n          <div style={{\n          height: "180px"\n        }} />\n        </Tipseen>\n        <Tipseen\n      // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n      // Therefore, there is no need to move this prop in your implementations.\n      modifiers={[{\n        name: "preventOverflow",\n        options: {\n          mainAxis: false\n        }\n      }]} position="right" color="primary" content={<TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>}>\n          <div style={{\n          height: "180px"\n        }} />\n        </Tipseen>\n      </Flex>;\n  },\n  name: "Colors"\n}',...Colors.parameters?.docs?.source}}},TipseenWithAWizard.parameters={...TipseenWithAWizard.parameters,docs:{...TipseenWithAWizard.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const content = [<div>Popover message №1 will appear here</div>, <div>Popover message №2 will appear here</div>, <div>Popover message №3 will appear here</div>, <div>Popover message №4 will appear here</div>, <div>Popover message №5 will appear here</div>];\n    const [activeStepIndex, setActiveStepIndex] = useState(2);\n    const onChangeActiveStep = useCallback((_e: any, stepIndex: React.SetStateAction<number>) => {\n      setActiveStepIndex(stepIndex);\n    }, []);\n    return <Tipseen\n    // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n    // Therefore, there is no need to move this prop in your implementations.\n    modifiers={[{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }]} position="right" content={<TipseenWizard title="This is a title" steps={content} activeStepIndex={activeStepIndex} onChangeActiveStep={onChangeActiveStep} onFinish={() => {}} />}>\n        <div style={{\n        height: "150px"\n      }} />\n      </Tipseen>;\n  },\n  name: "Tipseen with a wizard"\n}',...TipseenWithAWizard.parameters?.docs?.source}}},TipseenWithImage.parameters={...TipseenWithImage.parameters,docs:{...TipseenWithImage.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    const content = [<div>Message for the user will appear here, to give more information about the feature.</div>, <div>Message for the user will appear here, to give more information about the feature.</div>, <div>Message for the user will appear here, to give more information about the feature.</div>, <div>Message for the user will appear here, to give more information about the feature.</div>, <div>Message for the user will appear here, to give more information about the feature.</div>];\n    return <Tipseen\n    // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n    // Therefore, there is no need to move this prop in your implementations.\n    position="right" modifiers={[{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }]} closeButtonTheme="light" content={<>\n            <TipseenImage src={picture} />\n            <TipseenWizard title="This is a title" steps={content} activeStepIndex={2} />\n          </>}>\n        <div style={{\n        height: "300px"\n      }} />\n      </Tipseen>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          picture\n        }\n      }\n    }\n  },\n  name: "Tipseen with image"\n}',...TipseenWithImage.parameters?.docs?.source}}},TipseenWithCustomMedia.parameters={...TipseenWithCustomMedia.parameters,docs:{...TipseenWithCustomMedia.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Tipseen position="right"\n    // The modifier\'s purpose is to prevent the tipseen from being displayed when the user scrolls the story upwards / downwards.\n    // Therefore, there is no need to move this prop in your implementations.\n    modifiers={[{\n      name: "preventOverflow",\n      options: {\n        mainAxis: false\n      }\n    }]} closeButtonTheme="dark" content={<>\n            <TipseenMedia>\n              <video autoPlay muted loop src={video} style={{\n          width: "100%"\n        }} />\n            </TipseenMedia>\n            <TipseenContent title="This is a title">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          </>}>\n        <div style={{\n        height: "280px"\n      }} />\n      </Tipseen>;\n  },\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          video\n        }\n      }\n    }\n  },\n  name: "Tipseen with custom media"\n}',...TipseenWithCustomMedia.parameters?.docs?.source}}},FloatingTipseen.parameters={...FloatingTipseen.parameters,docs:{...FloatingTipseen.parameters?.docs,source:{originalSource:'{\n  render: () => {\n    return <Tipseen closeButtonTheme="dark" floating content={<>\n            <TipseenImage src={picture} />\n            <TipseenContent title="This is a Floating Tipseen">\n              Message for the user will appear here, to give more information about the feature.\n            </TipseenContent>\n          </>}\n    // You do not have to use containerSelector, in current use this is for story only\n    containerSelector="#tipseen-floating-container" />;\n  },\n  decorators: [Story => <div style={{\n    height: "400px"\n  }} id="tipseen-floating-container">\n        <Story />\n      </div>],\n  parameters: {\n    docs: {\n      liveEdit: {\n        scope: {\n          picture\n        }\n      }\n    }\n  },\n  name: "Floating Tipseen"\n}',...FloatingTipseen.parameters?.docs?.source}}};const __namedExportsOrder=["Overview","Colors","TipseenWithAWizard","TipseenWithImage","TipseenWithCustomMedia","FloatingTipseen"]}}]);