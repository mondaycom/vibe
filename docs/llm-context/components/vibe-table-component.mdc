---
description: Usage of Table component to represent data
globs: 
alwaysApply: false
---
## Building tables correctly
- The monday `Table` component must have the following props: `columns`, `emptyState` and `errorState`. 
- The children of the `Table` component must be `TableHeader` and `TableBody`.
- The children of `TableBody` are a list of `TableRow` components as children. 
- The children of `TableRow` are a list of `TableCell` components as children. 
- The children of `TableHeader` should be `TableHeaderCell` components with a `title` prop.
- For more use cases for the table component, use the boilerplate in [table-stories.md](mdc:.cursor/rules/stories/table-stories.md)

### Boilerplate

<Table
  columns={[
    {
      id: 'sentOn',
      loadingStateType: 'medium-text',
      title: 'Sent on',
      width: 150
    },
    {
      id: 'subject',
      loadingStateType: 'long-text',
      title: 'Subject'
    },
    {
      id: 'sentBy',
      infoContent: 'This is the sender',
      loadingStateType: 'circle',
      title: 'Sent by',
      width: {
        max: 200,
        min: 120
      }
    },
    {
      id: 'status',
      infoContent: 'Info content for the status column',
      loadingStateType: 'medium-text',
      title: 'Status',
      width: 150
    },
    {
      id: 'emailsSent',
      loadingStateType: 'medium-text',
      title: 'Emails sent',
      width: 150
    }
  ]}
>
  <TableHeader>
    <TableHeaderCell title="Sent on" />
    <TableHeaderCell title="Subject" />
    <TableHeaderCell title="Sent by" />
    <TableHeaderCell title="Status" />
    <TableHeaderCell title="Emails sent" />
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell>
        2020-01-01
      </TableCell>
      <TableCell>
        Lorem ipsum dolor
      </TableCell>
      <TableCell>
        <TableAvatar text="John Doe" />
      </TableCell>
      <TableCell>
        <Label
          color="positive"
          text="Sent"
        />
      </TableCell>
      <TableCell>
        100
      </TableCell>
    </TableRow>
    <TableRow>
      <TableCell>
        2023-03-03
      </TableCell>
      <TableCell>
        This is the subject This is the subject This is the subject This is the subject This is the subject This is the subject
      </TableCell>
      <TableCell>
        <TableAvatar text="Some Person" />
      </TableCell>
      <TableCell>
        <Label
          color="positive"
          text="Sent"
        />
      </TableCell>
      <TableCell>
        999
      </TableCell>
    </TableRow>
    <TableRow>
      <TableCell>
        2022-02-02
      </TableCell>
      <TableCell>
        This is the subject
      </TableCell>
      <TableCell>
        <TableAvatar text="Other Name" />
      </TableCell>
      <TableCell>
        <Label
          color="positive"
          text="Sent"
        />
      </TableCell>
      <TableCell>
        99
      </TableCell>
    </TableRow>
  </TableBody>
</Table>

### Default

```jsx
<TableHeaderCell key={index} title={headerCell.title} />
        ))}
      </TableHeader>,
      <TableBody>
        {[
          {
            id: "1",
            sentOn: "2020-01-01",
            sentBy: "John Doe",
            subject: "Lorem ipsum dolor",
            status: "Sent",
            emailsSent: 100
          },
          {
            id: "3",
            sentOn: "2023-03-03",
            sentBy: "Some Person",
            subject:
              "This is the subject This is the subject This is the subject This is the subject This is the subject This is the subject",
            status: "Sent",
            emailsSent: 999
          },
          {
            id: "2",
            sentOn: "2022-02-02",
            sentBy: "Other Name",
            subject: "This is the subject",
            status: "Sent",
            emailsSent: 99
          }
        ].map(rowItem => (
          <TableRow key={rowItem.id}>
            <TableCell>{rowItem.sentOn}</TableCell>
            <TableCell>{rowItem.subject}</TableCell>
            <TableCell>
              <TableAvatar text={rowItem.sentBy} />
            </TableCell>
            <TableCell>
              <Label text={rowItem.status} color="positive" />
            </TableCell>
            <TableCell>{rowItem.emailsSent}</TableCell>
          </TableRow>
        )
```

### Sizes

```jsx
<>
        <Table
          style={{ width: "auto" }}
          size="small"
          errorState={<TableErrorState />}
          emptyState={<TableEmptyState />}
          columns={columns}
        >
          <TableHeader>
            {columns.map((headerCell, index) => (
              <TableHeaderCell
                key={index}
                title={headerCell.title}
                icon={headerCell.icon}
                infoContent={headerCell.infoContent}
              />
            ))}
          </TableHeader>
          <TableBody>
            {data.map(rowItem => (
              <TableRow key={rowItem.id}>
                <TableCell>{rowItem.sentOn}</TableCell>
                <TableCell>{rowItem.subject}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Table
          style={{ width: "auto" }}
          size="medium"
          errorState={<TableErrorState />}
          emptyState={<TableEmptyState />}
          columns={columns}
        >
          <TableHeader>
            {columns.map((headerCell, index) => (
              <TableHeaderCell
                key={index}
                title={headerCell.title}
                icon={headerCell.icon}
                infoContent={headerCell.infoContent}
              />
            ))}
          </TableHeader>
          <TableBody>
            {data.map(rowItem => (
              <TableRow key={rowItem.id}>
                <TableCell>{rowItem.sentOn}</TableCell>
                <TableCell>{rowItem.subject}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Table
          style={{ width: "auto" }}
          size="large"
          errorState={<TableErrorState />}
          emptyState={<TableEmptyState />}
          columns={columns}
        >
          <TableHeader>
            {columns.map((headerCell, index) => (
              <TableHeaderCell
                key={index}
                title={headerCell.title}
                icon={headerCell.icon}
                infoContent={headerCell.infoContent}
              />
            ))}
          </TableHeader>
          <TableBody>
            {data.map(rowItem => (
              <TableRow key={rowItem.id}>
                <TableCell>{rowItem.sentOn}</TableCell>
                <TableCell>{rowItem.subject}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </>
    );
  },
  decorators: [
    (Story: typeof React.Component) => (
      <Flex align="start" justify="space-between" gap="medium" style={{ flex: 1 }}>
        <Story />
      </Flex>
```

### Borders

```jsx
<>
        <Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={columns}>
          <TableHeader>
            {columns.map((headerCell, index) => (
              <TableHeaderCell key={index} title={headerCell.title} />
            ))}
          </TableHeader>
          <TableBody>
            {data.map(rowItem => (
              <TableRow key={rowItem.id}>
                <TableCell>{rowItem.sentOn}</TableCell>
                <TableCell>{rowItem.subject}</TableCell>
                <TableCell>
                  <TableAvatar text={rowItem.sentBy} />
                </TableCell>
                <TableCell>
                  <Label text={rowItem.status} color="positive" />
                </TableCell>
                <TableCell>{rowItem.emailsSent}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
        <Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={columns} withoutBorder>
          <TableHeader>
            {columns.map((headerCell, index) => (
              <TableHeaderCell key={index} title={headerCell.title} />
            ))}
          </TableHeader>
          <TableBody>
            {data.map(rowItem => (
              <TableRow key={rowItem.id}>
                <TableCell>{rowItem.sentOn}</TableCell>
                <TableCell>{rowItem.subject}</TableCell>
                <TableCell>
                  <TableAvatar text={rowItem.sentBy} />
                </TableCell>
                <TableCell>
                  <Label text={rowItem.status} color="positive" />
                </TableCell>
                <TableCell>{rowItem.emailsSent}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </>
    );
  },
  decorators: [
    (Story: typeof React.Component) => (
      <Flex direction="column" gap={40}>
        <Story />
      </Flex>
```

### TableHeaderFunctionality

```jsx
emailTableData);
    const [sorting, setSorting] = useState<{ [key: string]: "asc" | "desc" | "none" }>({});

    const onSort = (columnId: string, sortState: "asc" | "desc" | "none") => {
      setSorting({
        [columnId]: sortState
      });

      setTableData(sort(columnId as keyof (typeof tableData)[number], sortState, tableData));
    };

    return (
      <Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={emailColumns}>
        <TableHeader>
          {emailColumns.map((headerCell, index) => (
            <TableHeaderCell
              key={index}
              title={headerCell.title}
              icon={headerCell.icon}
              infoContent={headerCell.infoContent}
              onSortClicked={sortState => onSort(headerCell.id, sortState)}
              sortState={sorting[headerCell.id]}
            />
          ))}
        </TableHeader>
        <TableBody>
          {tableData.map(rowItem => (
            <TableRow key={rowItem.id}>
              <TableCell>{rowItem.sentOn}</TableCell>
              <TableCell>{rowItem.subject}</TableCell>
              <TableCell>
                <TableAvatar text={rowItem.sentBy} />
              </TableCell>
              <TableCell>
                <Label text={rowItem.status} color="positive" />
              </TableCell>
              <TableCell>{rowItem.emailsSent}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
```

### Loading

```jsx
<Table
      dataState={{
        isLoading: true
      }}
      errorState={<TableErrorState />}
      emptyState={<TableEmptyState />}
      columns={emailColumns}
    >
      <TableHeader>
        {emailColumns.map((headerCell, index) => (
          <TableHeaderCell key={index} title={headerCell.title} />
        ))}
      </TableHeader>
      <TableBody>
        {emailTableData.map(rowItem => (
          <TableRow key={rowItem.id}>
            <TableCell>{rowItem.sentOn}</TableCell>
            <TableCell>{rowItem.subject}</TableCell>
            <TableCell>
              <TableAvatar text={rowItem.sentBy} />
            </TableCell>
            <TableCell>
              <Label text={rowItem.status} color="positive" />
            </TableCell>
            <TableCell>{rowItem.emailsSent}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
```

### Scroll

```jsx
<div
      style={{
        height: 220,
        width: "100%"
      }}
    >
      <Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={scrollTableColumns}>
        <TableHeader>
          {scrollTableColumns.map((headerCell, index) => (
            <TableHeaderCell key={index} title={headerCell.title} />
          ))}
        </TableHeader>
        <TableBody>
          {scrollTableData.map(rowItem => (
            <TableRow key={rowItem.id}>
              <TableCell>{rowItem.sentOn}</TableCell>
              <TableCell>
                <Label text={rowItem.priority} color={priorityColumnToLabelColor[rowItem.priority]} />
              </TableCell>
              <TableCell>{rowItem.subject}</TableCell>
              <TableCell>
                <TableAvatar text={rowItem.sentBy} />
              </TableCell>
              <TableCell>
                <Label text={rowItem.status} color={statusColumnToLabelColor[rowItem.status]} />
              </TableCell>
              <TableCell>{rowItem.emailsSent}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
```

### VirtualizedScroll

```jsx
data: (typeof virtualizedScrollTableData)[number]) => {
      return (
        <TableRow>
          {virtualizedScrollTableColumns.map(column => {
            return (
              <TableCell sticky={column.id === "id"} key={column.id}>
                {data[column.id as keyof typeof data]}
              </TableCell>
            );
          })}
        </TableRow>
      );
    };

    const Header = React.useCallback((columns: TableColumn[]) => {
      return (
        <TableHeader>
          {columns.map((cell, index) => (
            <TableHeaderCell sticky={index === 0} key={index} {...cell} />
          ))}
        </TableHeader>
      );
    }, []);

    return (
      <Table
        errorState={<TableErrorState />}
        emptyState={<TableEmptyState />}
        columns={virtualizedScrollTableColumns}
        style={{
          height: 250
        }}
      >
        <TableVirtualizedBody
          rowRenderer={Row}
          items={virtualizedScrollTableData}
          columns={virtualizedScrollTableColumns}
          headerRenderer={Header}
        />
      </Table>
```

### StickyColumn

```jsx
<Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={stickyColumns}>
        <TableHeader>
          {stickyColumns.map((headerCell, index) => (
            <TableHeaderCell sticky={index === 0} key={index} title={headerCell.title} />
          ))}
        </TableHeader>
        <TableBody>
          {stickyTableData.map(rowItem => (
            <TableRow key={rowItem.id}>
              <TableCell sticky>{rowItem.projectName}</TableCell>
              <TableCell>
                <Label text={rowItem.status} color={statusColumnToLabelColor[rowItem.status]} />
              </TableCell>
              <TableCell>{rowItem.description}</TableCell>
              <TableCell>{rowItem.createdOn}</TableCell>
              <TableCell>{rowItem.emailsSent}</TableCell>
              <TableCell>{rowItem.owner}</TableCell>
              <TableCell>{rowItem.priority}</TableCell>
              <TableCell>{rowItem.category}</TableCell>
              <TableCell>{rowItem.dueDate}</TableCell>
              <TableCell>{rowItem.comments}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
```

### HighlightedRow

```jsx
rowItem: (typeof emailTableData)[number]) => {
      return rowItem.id === "2";
    };

    return (
      <Table errorState={<TableErrorState />} emptyState={<TableEmptyState />} columns={emailColumns}>
        <TableHeader>
          {emailColumns.map((headerCell, index) => (
            <TableHeaderCell key={index} title={headerCell.title} />
          ))}
        </TableHeader>
        <TableBody>
          {emailTableData.map(rowItem => (
            <TableRow key={rowItem.id} highlighted={shouldRowBeHighlighted(rowItem)}>
              <TableCell>{rowItem.sentOn}</TableCell>
              <TableCell>{rowItem.subject}</TableCell>
              <TableCell>
                <TableAvatar text={rowItem.sentBy} />
              </TableCell>
              <TableCell>
                <Label text={rowItem.status} color="positive" />
              </TableCell>
              <TableCell>{rowItem.emailsSent}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
```

