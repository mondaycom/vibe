---
description: Toast component for alerts and messages
globs: 
alwaysApply: false
---
## Toast Boilerplate JSX

- Use the following boilerplate to create a new Toast component

### DefaultWithButton

```jsx
() => [
        {
          type: "button",
          content: "Button"
        }
      ],
      []
    );

    return (
      <Toast open autoHideDuration={5000} actions={actions} className="wrapper">
        General message toast
      </Toast>
```

### ToastWithLink

```jsx
() => [
        {
          type: "link",
          text: "Link to action",
          href: "https://monday.com"
        }
      ],
      []
    );

    return (
      <Toast open actions={actions} autoHideDuration={5000} className="wrapper">
        General message toast
      </Toast>
```

### ToastWithLoading

```jsx
<Toast open loading className="wrapper">
        General message toast
      </Toast>
```

### SuccessMessage

```jsx
() => [
        {
          type: "button",
          content: "Undo 5"
        }
      ],
      []
    );

    return (
      <Toast open type="positive" actions={actions} autoHideDuration={5000} className="wrapper">
        Positive message toast
      </Toast>
```

### ErrorMessage

```jsx
() => [
        {
          type: "button",
          content: "Button"
        }
      ],
      []
    );

    return (
      <Toast open actions={actions} type="negative" autoHideDuration={5000} className="wrapper">
        Negative message toast
      </Toast>
```

### WarningMessage

```jsx
() => [
        {
          type: "button",
          content: "Button"
        }
      ],
      []
    );

    return (
      <Toast open actions={actions} type="warning" autoHideDuration={5000} className="wrapper">
        Warning message toast
      </Toast>
```

### DarkMessage

```jsx
() => [
        {
          type: "button",
          content: "Button"
        }
      ],
      []
    );

    return (
      <Toast open actions={actions} type="dark" autoHideDuration={5000} className="wrapper">
        Dark message toast
      </Toast>
```

### FeedbackLoop

```jsx
() => [
        {
          type: Toast.actionTypes.BUTTON,
          content: "Undo"
        }
      ],
      []
    );

    return (
      <Toast open type={Toast.types.POSITIVE} actions={actions} className="wrapper">
        We successfully deleted 1 item
      </Toast>
```

### Animation

```jsx
false);
    const [failureToastOpen, setFailureToastOpen] = useState(false);
    const [isDeleting, setIsDeleting] = useState(false);

    const onSuccessClick = useCallback(() => {
      setSuccessToastOpen(true);
      setIsDeleting(true);

      setTimeout(() => {
        setIsDeleting(false);
      }, 1000);
    }, []);

    const onFailureClick = useCallback(() => {
      setFailureToastOpen(true);
      setIsDeleting(true);

      setTimeout(() => {
        setIsDeleting(false);
      }, 1000);
    }, []);

    const actions = useMemo<ToastAction[]>(
      () => [
        {
          type: "button",
          content: "Undo"
        }
      ],
      []
    );

    return (
      <>
        <Button onClick={onSuccessClick} kind={Button.kinds.SECONDARY}>
          Success action
        </Button>
        <Button onClick={onFailureClick} kind={Button.kinds.SECONDARY}>
          Failure action
        </Button>
        <Toast
          open={successToastOpen}
          type={isDeleting ? "normal" : "positive"}
          actions={isDeleting ? [] : actions}
          onClose={() => setSuccessToastOpen(false)}
          autoHideDuration={2000}
          loading={isDeleting}
        >
          {isDeleting ? "Deleting 1 selected item..." : "We successfully deleted 1 item"}
        </Toast>
        <Toast
          open={failureToastOpen}
          type={isDeleting ? "normal" : "negative"}
          onClose={() => setFailureToastOpen(false)}
          autoHideDuration={2000}
          loading={isDeleting}
        >
          {isDeleting ? "Deleting 1 selected item..." : "Something went wrong"}
        </Toast>
      </>
```

